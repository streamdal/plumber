// Code generated by counterfeiter. DO NOT EDIT.
package mqttfakes

import (
	"sync"

	mqtt "github.com/eclipse/paho.mqtt.golang"
)

type FakeMessage struct {
	AckStub        func()
	ackMutex       sync.RWMutex
	ackArgsForCall []struct {
	}
	DuplicateStub        func() bool
	duplicateMutex       sync.RWMutex
	duplicateArgsForCall []struct {
	}
	duplicateReturns struct {
		result1 bool
	}
	duplicateReturnsOnCall map[int]struct {
		result1 bool
	}
	MessageIDStub        func() uint16
	messageIDMutex       sync.RWMutex
	messageIDArgsForCall []struct {
	}
	messageIDReturns struct {
		result1 uint16
	}
	messageIDReturnsOnCall map[int]struct {
		result1 uint16
	}
	PayloadStub        func() []byte
	payloadMutex       sync.RWMutex
	payloadArgsForCall []struct {
	}
	payloadReturns struct {
		result1 []byte
	}
	payloadReturnsOnCall map[int]struct {
		result1 []byte
	}
	QosStub        func() byte
	qosMutex       sync.RWMutex
	qosArgsForCall []struct {
	}
	qosReturns struct {
		result1 byte
	}
	qosReturnsOnCall map[int]struct {
		result1 byte
	}
	RetainedStub        func() bool
	retainedMutex       sync.RWMutex
	retainedArgsForCall []struct {
	}
	retainedReturns struct {
		result1 bool
	}
	retainedReturnsOnCall map[int]struct {
		result1 bool
	}
	TopicStub        func() string
	topicMutex       sync.RWMutex
	topicArgsForCall []struct {
	}
	topicReturns struct {
		result1 string
	}
	topicReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMessage) Ack() {
	fake.ackMutex.Lock()
	fake.ackArgsForCall = append(fake.ackArgsForCall, struct {
	}{})
	stub := fake.AckStub
	fake.recordInvocation("Ack", []interface{}{})
	fake.ackMutex.Unlock()
	if stub != nil {
		fake.AckStub()
	}
}

func (fake *FakeMessage) AckCallCount() int {
	fake.ackMutex.RLock()
	defer fake.ackMutex.RUnlock()
	return len(fake.ackArgsForCall)
}

func (fake *FakeMessage) AckCalls(stub func()) {
	fake.ackMutex.Lock()
	defer fake.ackMutex.Unlock()
	fake.AckStub = stub
}

func (fake *FakeMessage) Duplicate() bool {
	fake.duplicateMutex.Lock()
	ret, specificReturn := fake.duplicateReturnsOnCall[len(fake.duplicateArgsForCall)]
	fake.duplicateArgsForCall = append(fake.duplicateArgsForCall, struct {
	}{})
	stub := fake.DuplicateStub
	fakeReturns := fake.duplicateReturns
	fake.recordInvocation("Duplicate", []interface{}{})
	fake.duplicateMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMessage) DuplicateCallCount() int {
	fake.duplicateMutex.RLock()
	defer fake.duplicateMutex.RUnlock()
	return len(fake.duplicateArgsForCall)
}

func (fake *FakeMessage) DuplicateCalls(stub func() bool) {
	fake.duplicateMutex.Lock()
	defer fake.duplicateMutex.Unlock()
	fake.DuplicateStub = stub
}

func (fake *FakeMessage) DuplicateReturns(result1 bool) {
	fake.duplicateMutex.Lock()
	defer fake.duplicateMutex.Unlock()
	fake.DuplicateStub = nil
	fake.duplicateReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeMessage) DuplicateReturnsOnCall(i int, result1 bool) {
	fake.duplicateMutex.Lock()
	defer fake.duplicateMutex.Unlock()
	fake.DuplicateStub = nil
	if fake.duplicateReturnsOnCall == nil {
		fake.duplicateReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.duplicateReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeMessage) MessageID() uint16 {
	fake.messageIDMutex.Lock()
	ret, specificReturn := fake.messageIDReturnsOnCall[len(fake.messageIDArgsForCall)]
	fake.messageIDArgsForCall = append(fake.messageIDArgsForCall, struct {
	}{})
	stub := fake.MessageIDStub
	fakeReturns := fake.messageIDReturns
	fake.recordInvocation("MessageID", []interface{}{})
	fake.messageIDMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMessage) MessageIDCallCount() int {
	fake.messageIDMutex.RLock()
	defer fake.messageIDMutex.RUnlock()
	return len(fake.messageIDArgsForCall)
}

func (fake *FakeMessage) MessageIDCalls(stub func() uint16) {
	fake.messageIDMutex.Lock()
	defer fake.messageIDMutex.Unlock()
	fake.MessageIDStub = stub
}

func (fake *FakeMessage) MessageIDReturns(result1 uint16) {
	fake.messageIDMutex.Lock()
	defer fake.messageIDMutex.Unlock()
	fake.MessageIDStub = nil
	fake.messageIDReturns = struct {
		result1 uint16
	}{result1}
}

func (fake *FakeMessage) MessageIDReturnsOnCall(i int, result1 uint16) {
	fake.messageIDMutex.Lock()
	defer fake.messageIDMutex.Unlock()
	fake.MessageIDStub = nil
	if fake.messageIDReturnsOnCall == nil {
		fake.messageIDReturnsOnCall = make(map[int]struct {
			result1 uint16
		})
	}
	fake.messageIDReturnsOnCall[i] = struct {
		result1 uint16
	}{result1}
}

func (fake *FakeMessage) Payload() []byte {
	fake.payloadMutex.Lock()
	ret, specificReturn := fake.payloadReturnsOnCall[len(fake.payloadArgsForCall)]
	fake.payloadArgsForCall = append(fake.payloadArgsForCall, struct {
	}{})
	stub := fake.PayloadStub
	fakeReturns := fake.payloadReturns
	fake.recordInvocation("Payload", []interface{}{})
	fake.payloadMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMessage) PayloadCallCount() int {
	fake.payloadMutex.RLock()
	defer fake.payloadMutex.RUnlock()
	return len(fake.payloadArgsForCall)
}

func (fake *FakeMessage) PayloadCalls(stub func() []byte) {
	fake.payloadMutex.Lock()
	defer fake.payloadMutex.Unlock()
	fake.PayloadStub = stub
}

func (fake *FakeMessage) PayloadReturns(result1 []byte) {
	fake.payloadMutex.Lock()
	defer fake.payloadMutex.Unlock()
	fake.PayloadStub = nil
	fake.payloadReturns = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeMessage) PayloadReturnsOnCall(i int, result1 []byte) {
	fake.payloadMutex.Lock()
	defer fake.payloadMutex.Unlock()
	fake.PayloadStub = nil
	if fake.payloadReturnsOnCall == nil {
		fake.payloadReturnsOnCall = make(map[int]struct {
			result1 []byte
		})
	}
	fake.payloadReturnsOnCall[i] = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeMessage) Qos() byte {
	fake.qosMutex.Lock()
	ret, specificReturn := fake.qosReturnsOnCall[len(fake.qosArgsForCall)]
	fake.qosArgsForCall = append(fake.qosArgsForCall, struct {
	}{})
	stub := fake.QosStub
	fakeReturns := fake.qosReturns
	fake.recordInvocation("Qos", []interface{}{})
	fake.qosMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMessage) QosCallCount() int {
	fake.qosMutex.RLock()
	defer fake.qosMutex.RUnlock()
	return len(fake.qosArgsForCall)
}

func (fake *FakeMessage) QosCalls(stub func() byte) {
	fake.qosMutex.Lock()
	defer fake.qosMutex.Unlock()
	fake.QosStub = stub
}

func (fake *FakeMessage) QosReturns(result1 byte) {
	fake.qosMutex.Lock()
	defer fake.qosMutex.Unlock()
	fake.QosStub = nil
	fake.qosReturns = struct {
		result1 byte
	}{result1}
}

func (fake *FakeMessage) QosReturnsOnCall(i int, result1 byte) {
	fake.qosMutex.Lock()
	defer fake.qosMutex.Unlock()
	fake.QosStub = nil
	if fake.qosReturnsOnCall == nil {
		fake.qosReturnsOnCall = make(map[int]struct {
			result1 byte
		})
	}
	fake.qosReturnsOnCall[i] = struct {
		result1 byte
	}{result1}
}

func (fake *FakeMessage) Retained() bool {
	fake.retainedMutex.Lock()
	ret, specificReturn := fake.retainedReturnsOnCall[len(fake.retainedArgsForCall)]
	fake.retainedArgsForCall = append(fake.retainedArgsForCall, struct {
	}{})
	stub := fake.RetainedStub
	fakeReturns := fake.retainedReturns
	fake.recordInvocation("Retained", []interface{}{})
	fake.retainedMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMessage) RetainedCallCount() int {
	fake.retainedMutex.RLock()
	defer fake.retainedMutex.RUnlock()
	return len(fake.retainedArgsForCall)
}

func (fake *FakeMessage) RetainedCalls(stub func() bool) {
	fake.retainedMutex.Lock()
	defer fake.retainedMutex.Unlock()
	fake.RetainedStub = stub
}

func (fake *FakeMessage) RetainedReturns(result1 bool) {
	fake.retainedMutex.Lock()
	defer fake.retainedMutex.Unlock()
	fake.RetainedStub = nil
	fake.retainedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeMessage) RetainedReturnsOnCall(i int, result1 bool) {
	fake.retainedMutex.Lock()
	defer fake.retainedMutex.Unlock()
	fake.RetainedStub = nil
	if fake.retainedReturnsOnCall == nil {
		fake.retainedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.retainedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeMessage) Topic() string {
	fake.topicMutex.Lock()
	ret, specificReturn := fake.topicReturnsOnCall[len(fake.topicArgsForCall)]
	fake.topicArgsForCall = append(fake.topicArgsForCall, struct {
	}{})
	stub := fake.TopicStub
	fakeReturns := fake.topicReturns
	fake.recordInvocation("topic", []interface{}{})
	fake.topicMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMessage) TopicCallCount() int {
	fake.topicMutex.RLock()
	defer fake.topicMutex.RUnlock()
	return len(fake.topicArgsForCall)
}

func (fake *FakeMessage) TopicCalls(stub func() string) {
	fake.topicMutex.Lock()
	defer fake.topicMutex.Unlock()
	fake.TopicStub = stub
}

func (fake *FakeMessage) TopicReturns(result1 string) {
	fake.topicMutex.Lock()
	defer fake.topicMutex.Unlock()
	fake.TopicStub = nil
	fake.topicReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeMessage) TopicReturnsOnCall(i int, result1 string) {
	fake.topicMutex.Lock()
	defer fake.topicMutex.Unlock()
	fake.TopicStub = nil
	if fake.topicReturnsOnCall == nil {
		fake.topicReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.topicReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeMessage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.ackMutex.RLock()
	defer fake.ackMutex.RUnlock()
	fake.duplicateMutex.RLock()
	defer fake.duplicateMutex.RUnlock()
	fake.messageIDMutex.RLock()
	defer fake.messageIDMutex.RUnlock()
	fake.payloadMutex.RLock()
	defer fake.payloadMutex.RUnlock()
	fake.qosMutex.RLock()
	defer fake.qosMutex.RUnlock()
	fake.retainedMutex.RLock()
	defer fake.retainedMutex.RUnlock()
	fake.topicMutex.RLock()
	defer fake.topicMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMessage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ mqtt.Message = new(FakeMessage)
