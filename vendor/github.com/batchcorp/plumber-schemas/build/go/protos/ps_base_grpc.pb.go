// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: ps_base.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlumberServerClient is the client API for PlumberServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlumberServerClient interface {
	// List configured/known connections
	GetAllConnections(ctx context.Context, in *GetAllConnectionsRequest, opts ...grpc.CallOption) (*GetAllConnectionsResponse, error)
	// Fetch a specific connection by ID
	GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetConnectionResponse, error)
	// Create a connection in plumber
	CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error)
	// Test a connection before saving its configuration
	TestConnection(ctx context.Context, in *TestConnectionRequest, opts ...grpc.CallOption) (*TestConnectionResponse, error)
	// Any active connections will be restarted
	UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*UpdateConnectionResponse, error)
	// If there are any active connections, delete will cause them to get closed
	DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*DeleteConnectionResponse, error)
	GetAllRelays(ctx context.Context, in *GetAllRelaysRequest, opts ...grpc.CallOption) (*GetAllRelaysResponse, error)
	GetRelay(ctx context.Context, in *GetRelayRequest, opts ...grpc.CallOption) (*GetRelayResponse, error)
	CreateRelay(ctx context.Context, in *CreateRelayRequest, opts ...grpc.CallOption) (*CreateRelayResponse, error)
	UpdateRelay(ctx context.Context, in *UpdateRelayRequest, opts ...grpc.CallOption) (*UpdateRelayResponse, error)
	ResumeRelay(ctx context.Context, in *ResumeRelayRequest, opts ...grpc.CallOption) (*ResumeRelayResponse, error)
	StopRelay(ctx context.Context, in *StopRelayRequest, opts ...grpc.CallOption) (*StopRelayResponse, error)
	DeleteRelay(ctx context.Context, in *DeleteRelayRequest, opts ...grpc.CallOption) (*DeleteRelayResponse, error)
	GetTunnel(ctx context.Context, in *GetTunnelRequest, opts ...grpc.CallOption) (*GetTunnelResponse, error)
	GetAllTunnels(ctx context.Context, in *GetAllTunnelsRequest, opts ...grpc.CallOption) (*GetAllTunnelsResponse, error)
	CreateTunnel(ctx context.Context, in *CreateTunnelRequest, opts ...grpc.CallOption) (*CreateTunnelResponse, error)
	StopTunnel(ctx context.Context, in *StopTunnelRequest, opts ...grpc.CallOption) (*StopTunnelResponse, error)
	ResumeTunnel(ctx context.Context, in *ResumeTunnelRequest, opts ...grpc.CallOption) (*ResumeTunnelResponse, error)
	UpdateTunnel(ctx context.Context, in *UpdateTunnelRequest, opts ...grpc.CallOption) (*UpdateTunnelResponse, error)
	DeleteTunnel(ctx context.Context, in *DeleteTunnelRequest, opts ...grpc.CallOption) (*DeleteTunnelResponse, error)
	ListWasmFiles(ctx context.Context, in *ListWasmFilesRequest, opts ...grpc.CallOption) (*ListWasmFilesResponse, error)
	UploadWasmFile(ctx context.Context, in *UploadWasmFileRequest, opts ...grpc.CallOption) (*UploadWasmFileResponse, error)
	DownloadWasmFile(ctx context.Context, in *DownloadWasmFileRequest, opts ...grpc.CallOption) (*DownloadWasmFileResponse, error)
	DeleteWasmFile(ctx context.Context, in *DeleteWasmFileRequest, opts ...grpc.CallOption) (*DeleteWasmFileResponse, error)
	GetRuleSets(ctx context.Context, in *GetDataQualityRuleSetsRequest, opts ...grpc.CallOption) (*GetDataQualityRuleSetsResponse, error)
	GetRule(ctx context.Context, in *GetDataQualityRuleRequest, opts ...grpc.CallOption) (*GetDataQualityRuleResponse, error)
	CreateRule(ctx context.Context, in *CreateDataQualityRuleRequest, opts ...grpc.CallOption) (*CreateDataQualityRuleResponse, error)
	UpdateRule(ctx context.Context, in *UpdateDataQualityRuleRequest, opts ...grpc.CallOption) (*UpdateDataQualityRuleResponse, error)
	DeleteRule(ctx context.Context, in *DeleteDataQualityRuleRequest, opts ...grpc.CallOption) (*DeleteDataQualityRuleResponse, error)
	CreateRuleSet(ctx context.Context, in *CreateDataQualityRuleSetRequest, opts ...grpc.CallOption) (*CreateDataQualityRuleSetResponse, error)
	UpdateRuleSet(ctx context.Context, in *UpdateDataQualityRuleSetRequest, opts ...grpc.CallOption) (*UpdateDataQualityRuleSetResponse, error)
	DeleteRuleSet(ctx context.Context, in *DeleteDataQualityRuleSetRequest, opts ...grpc.CallOption) (*DeleteDataQualityRuleSetResponse, error)
	SendRuleNotification(ctx context.Context, in *SendRuleNotificationRequest, opts ...grpc.CallOption) (*SendRuleNotificationResponse, error)
	GetServerOptions(ctx context.Context, in *GetServerOptionsRequest, opts ...grpc.CallOption) (*GetServerOptionsResponse, error)
}

type plumberServerClient struct {
	cc grpc.ClientConnInterface
}

func NewPlumberServerClient(cc grpc.ClientConnInterface) PlumberServerClient {
	return &plumberServerClient{cc}
}

func (c *plumberServerClient) GetAllConnections(ctx context.Context, in *GetAllConnectionsRequest, opts ...grpc.CallOption) (*GetAllConnectionsResponse, error) {
	out := new(GetAllConnectionsResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetAllConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*GetConnectionResponse, error) {
	out := new(GetConnectionResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*CreateConnectionResponse, error) {
	out := new(CreateConnectionResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/CreateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) TestConnection(ctx context.Context, in *TestConnectionRequest, opts ...grpc.CallOption) (*TestConnectionResponse, error) {
	out := new(TestConnectionResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/TestConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*UpdateConnectionResponse, error) {
	out := new(UpdateConnectionResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/UpdateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*DeleteConnectionResponse, error) {
	out := new(DeleteConnectionResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/DeleteConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetAllRelays(ctx context.Context, in *GetAllRelaysRequest, opts ...grpc.CallOption) (*GetAllRelaysResponse, error) {
	out := new(GetAllRelaysResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetAllRelays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetRelay(ctx context.Context, in *GetRelayRequest, opts ...grpc.CallOption) (*GetRelayResponse, error) {
	out := new(GetRelayResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) CreateRelay(ctx context.Context, in *CreateRelayRequest, opts ...grpc.CallOption) (*CreateRelayResponse, error) {
	out := new(CreateRelayResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/CreateRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) UpdateRelay(ctx context.Context, in *UpdateRelayRequest, opts ...grpc.CallOption) (*UpdateRelayResponse, error) {
	out := new(UpdateRelayResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/UpdateRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) ResumeRelay(ctx context.Context, in *ResumeRelayRequest, opts ...grpc.CallOption) (*ResumeRelayResponse, error) {
	out := new(ResumeRelayResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/ResumeRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) StopRelay(ctx context.Context, in *StopRelayRequest, opts ...grpc.CallOption) (*StopRelayResponse, error) {
	out := new(StopRelayResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/StopRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) DeleteRelay(ctx context.Context, in *DeleteRelayRequest, opts ...grpc.CallOption) (*DeleteRelayResponse, error) {
	out := new(DeleteRelayResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/DeleteRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetTunnel(ctx context.Context, in *GetTunnelRequest, opts ...grpc.CallOption) (*GetTunnelResponse, error) {
	out := new(GetTunnelResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetAllTunnels(ctx context.Context, in *GetAllTunnelsRequest, opts ...grpc.CallOption) (*GetAllTunnelsResponse, error) {
	out := new(GetAllTunnelsResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetAllTunnels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) CreateTunnel(ctx context.Context, in *CreateTunnelRequest, opts ...grpc.CallOption) (*CreateTunnelResponse, error) {
	out := new(CreateTunnelResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/CreateTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) StopTunnel(ctx context.Context, in *StopTunnelRequest, opts ...grpc.CallOption) (*StopTunnelResponse, error) {
	out := new(StopTunnelResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/StopTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) ResumeTunnel(ctx context.Context, in *ResumeTunnelRequest, opts ...grpc.CallOption) (*ResumeTunnelResponse, error) {
	out := new(ResumeTunnelResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/ResumeTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) UpdateTunnel(ctx context.Context, in *UpdateTunnelRequest, opts ...grpc.CallOption) (*UpdateTunnelResponse, error) {
	out := new(UpdateTunnelResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/UpdateTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) DeleteTunnel(ctx context.Context, in *DeleteTunnelRequest, opts ...grpc.CallOption) (*DeleteTunnelResponse, error) {
	out := new(DeleteTunnelResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/DeleteTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) ListWasmFiles(ctx context.Context, in *ListWasmFilesRequest, opts ...grpc.CallOption) (*ListWasmFilesResponse, error) {
	out := new(ListWasmFilesResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/ListWasmFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) UploadWasmFile(ctx context.Context, in *UploadWasmFileRequest, opts ...grpc.CallOption) (*UploadWasmFileResponse, error) {
	out := new(UploadWasmFileResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/UploadWasmFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) DownloadWasmFile(ctx context.Context, in *DownloadWasmFileRequest, opts ...grpc.CallOption) (*DownloadWasmFileResponse, error) {
	out := new(DownloadWasmFileResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/DownloadWasmFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) DeleteWasmFile(ctx context.Context, in *DeleteWasmFileRequest, opts ...grpc.CallOption) (*DeleteWasmFileResponse, error) {
	out := new(DeleteWasmFileResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/DeleteWasmFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetRuleSets(ctx context.Context, in *GetDataQualityRuleSetsRequest, opts ...grpc.CallOption) (*GetDataQualityRuleSetsResponse, error) {
	out := new(GetDataQualityRuleSetsResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetRuleSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetRule(ctx context.Context, in *GetDataQualityRuleRequest, opts ...grpc.CallOption) (*GetDataQualityRuleResponse, error) {
	out := new(GetDataQualityRuleResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) CreateRule(ctx context.Context, in *CreateDataQualityRuleRequest, opts ...grpc.CallOption) (*CreateDataQualityRuleResponse, error) {
	out := new(CreateDataQualityRuleResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/CreateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) UpdateRule(ctx context.Context, in *UpdateDataQualityRuleRequest, opts ...grpc.CallOption) (*UpdateDataQualityRuleResponse, error) {
	out := new(UpdateDataQualityRuleResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/UpdateRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) DeleteRule(ctx context.Context, in *DeleteDataQualityRuleRequest, opts ...grpc.CallOption) (*DeleteDataQualityRuleResponse, error) {
	out := new(DeleteDataQualityRuleResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/DeleteRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) CreateRuleSet(ctx context.Context, in *CreateDataQualityRuleSetRequest, opts ...grpc.CallOption) (*CreateDataQualityRuleSetResponse, error) {
	out := new(CreateDataQualityRuleSetResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/CreateRuleSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) UpdateRuleSet(ctx context.Context, in *UpdateDataQualityRuleSetRequest, opts ...grpc.CallOption) (*UpdateDataQualityRuleSetResponse, error) {
	out := new(UpdateDataQualityRuleSetResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/UpdateRuleSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) DeleteRuleSet(ctx context.Context, in *DeleteDataQualityRuleSetRequest, opts ...grpc.CallOption) (*DeleteDataQualityRuleSetResponse, error) {
	out := new(DeleteDataQualityRuleSetResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/DeleteRuleSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) SendRuleNotification(ctx context.Context, in *SendRuleNotificationRequest, opts ...grpc.CallOption) (*SendRuleNotificationResponse, error) {
	out := new(SendRuleNotificationResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/SendRuleNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plumberServerClient) GetServerOptions(ctx context.Context, in *GetServerOptionsRequest, opts ...grpc.CallOption) (*GetServerOptionsResponse, error) {
	out := new(GetServerOptionsResponse)
	err := c.cc.Invoke(ctx, "/protos.PlumberServer/GetServerOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlumberServerServer is the server API for PlumberServer service.
// All implementations should embed UnimplementedPlumberServerServer
// for forward compatibility
type PlumberServerServer interface {
	// List configured/known connections
	GetAllConnections(context.Context, *GetAllConnectionsRequest) (*GetAllConnectionsResponse, error)
	// Fetch a specific connection by ID
	GetConnection(context.Context, *GetConnectionRequest) (*GetConnectionResponse, error)
	// Create a connection in plumber
	CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error)
	// Test a connection before saving its configuration
	TestConnection(context.Context, *TestConnectionRequest) (*TestConnectionResponse, error)
	// Any active connections will be restarted
	UpdateConnection(context.Context, *UpdateConnectionRequest) (*UpdateConnectionResponse, error)
	// If there are any active connections, delete will cause them to get closed
	DeleteConnection(context.Context, *DeleteConnectionRequest) (*DeleteConnectionResponse, error)
	GetAllRelays(context.Context, *GetAllRelaysRequest) (*GetAllRelaysResponse, error)
	GetRelay(context.Context, *GetRelayRequest) (*GetRelayResponse, error)
	CreateRelay(context.Context, *CreateRelayRequest) (*CreateRelayResponse, error)
	UpdateRelay(context.Context, *UpdateRelayRequest) (*UpdateRelayResponse, error)
	ResumeRelay(context.Context, *ResumeRelayRequest) (*ResumeRelayResponse, error)
	StopRelay(context.Context, *StopRelayRequest) (*StopRelayResponse, error)
	DeleteRelay(context.Context, *DeleteRelayRequest) (*DeleteRelayResponse, error)
	GetTunnel(context.Context, *GetTunnelRequest) (*GetTunnelResponse, error)
	GetAllTunnels(context.Context, *GetAllTunnelsRequest) (*GetAllTunnelsResponse, error)
	CreateTunnel(context.Context, *CreateTunnelRequest) (*CreateTunnelResponse, error)
	StopTunnel(context.Context, *StopTunnelRequest) (*StopTunnelResponse, error)
	ResumeTunnel(context.Context, *ResumeTunnelRequest) (*ResumeTunnelResponse, error)
	UpdateTunnel(context.Context, *UpdateTunnelRequest) (*UpdateTunnelResponse, error)
	DeleteTunnel(context.Context, *DeleteTunnelRequest) (*DeleteTunnelResponse, error)
	ListWasmFiles(context.Context, *ListWasmFilesRequest) (*ListWasmFilesResponse, error)
	UploadWasmFile(context.Context, *UploadWasmFileRequest) (*UploadWasmFileResponse, error)
	DownloadWasmFile(context.Context, *DownloadWasmFileRequest) (*DownloadWasmFileResponse, error)
	DeleteWasmFile(context.Context, *DeleteWasmFileRequest) (*DeleteWasmFileResponse, error)
	GetRuleSets(context.Context, *GetDataQualityRuleSetsRequest) (*GetDataQualityRuleSetsResponse, error)
	GetRule(context.Context, *GetDataQualityRuleRequest) (*GetDataQualityRuleResponse, error)
	CreateRule(context.Context, *CreateDataQualityRuleRequest) (*CreateDataQualityRuleResponse, error)
	UpdateRule(context.Context, *UpdateDataQualityRuleRequest) (*UpdateDataQualityRuleResponse, error)
	DeleteRule(context.Context, *DeleteDataQualityRuleRequest) (*DeleteDataQualityRuleResponse, error)
	CreateRuleSet(context.Context, *CreateDataQualityRuleSetRequest) (*CreateDataQualityRuleSetResponse, error)
	UpdateRuleSet(context.Context, *UpdateDataQualityRuleSetRequest) (*UpdateDataQualityRuleSetResponse, error)
	DeleteRuleSet(context.Context, *DeleteDataQualityRuleSetRequest) (*DeleteDataQualityRuleSetResponse, error)
	SendRuleNotification(context.Context, *SendRuleNotificationRequest) (*SendRuleNotificationResponse, error)
	GetServerOptions(context.Context, *GetServerOptionsRequest) (*GetServerOptionsResponse, error)
}

// UnimplementedPlumberServerServer should be embedded to have forward compatible implementations.
type UnimplementedPlumberServerServer struct {
}

func (UnimplementedPlumberServerServer) GetAllConnections(context.Context, *GetAllConnectionsRequest) (*GetAllConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllConnections not implemented")
}
func (UnimplementedPlumberServerServer) GetConnection(context.Context, *GetConnectionRequest) (*GetConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnection not implemented")
}
func (UnimplementedPlumberServerServer) CreateConnection(context.Context, *CreateConnectionRequest) (*CreateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedPlumberServerServer) TestConnection(context.Context, *TestConnectionRequest) (*TestConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestConnection not implemented")
}
func (UnimplementedPlumberServerServer) UpdateConnection(context.Context, *UpdateConnectionRequest) (*UpdateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnection not implemented")
}
func (UnimplementedPlumberServerServer) DeleteConnection(context.Context, *DeleteConnectionRequest) (*DeleteConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (UnimplementedPlumberServerServer) GetAllRelays(context.Context, *GetAllRelaysRequest) (*GetAllRelaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRelays not implemented")
}
func (UnimplementedPlumberServerServer) GetRelay(context.Context, *GetRelayRequest) (*GetRelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelay not implemented")
}
func (UnimplementedPlumberServerServer) CreateRelay(context.Context, *CreateRelayRequest) (*CreateRelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelay not implemented")
}
func (UnimplementedPlumberServerServer) UpdateRelay(context.Context, *UpdateRelayRequest) (*UpdateRelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRelay not implemented")
}
func (UnimplementedPlumberServerServer) ResumeRelay(context.Context, *ResumeRelayRequest) (*ResumeRelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeRelay not implemented")
}
func (UnimplementedPlumberServerServer) StopRelay(context.Context, *StopRelayRequest) (*StopRelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRelay not implemented")
}
func (UnimplementedPlumberServerServer) DeleteRelay(context.Context, *DeleteRelayRequest) (*DeleteRelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelay not implemented")
}
func (UnimplementedPlumberServerServer) GetTunnel(context.Context, *GetTunnelRequest) (*GetTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnel not implemented")
}
func (UnimplementedPlumberServerServer) GetAllTunnels(context.Context, *GetAllTunnelsRequest) (*GetAllTunnelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTunnels not implemented")
}
func (UnimplementedPlumberServerServer) CreateTunnel(context.Context, *CreateTunnelRequest) (*CreateTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnel not implemented")
}
func (UnimplementedPlumberServerServer) StopTunnel(context.Context, *StopTunnelRequest) (*StopTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTunnel not implemented")
}
func (UnimplementedPlumberServerServer) ResumeTunnel(context.Context, *ResumeTunnelRequest) (*ResumeTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeTunnel not implemented")
}
func (UnimplementedPlumberServerServer) UpdateTunnel(context.Context, *UpdateTunnelRequest) (*UpdateTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTunnel not implemented")
}
func (UnimplementedPlumberServerServer) DeleteTunnel(context.Context, *DeleteTunnelRequest) (*DeleteTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTunnel not implemented")
}
func (UnimplementedPlumberServerServer) ListWasmFiles(context.Context, *ListWasmFilesRequest) (*ListWasmFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWasmFiles not implemented")
}
func (UnimplementedPlumberServerServer) UploadWasmFile(context.Context, *UploadWasmFileRequest) (*UploadWasmFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadWasmFile not implemented")
}
func (UnimplementedPlumberServerServer) DownloadWasmFile(context.Context, *DownloadWasmFileRequest) (*DownloadWasmFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadWasmFile not implemented")
}
func (UnimplementedPlumberServerServer) DeleteWasmFile(context.Context, *DeleteWasmFileRequest) (*DeleteWasmFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWasmFile not implemented")
}
func (UnimplementedPlumberServerServer) GetRuleSets(context.Context, *GetDataQualityRuleSetsRequest) (*GetDataQualityRuleSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRuleSets not implemented")
}
func (UnimplementedPlumberServerServer) GetRule(context.Context, *GetDataQualityRuleRequest) (*GetDataQualityRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRule not implemented")
}
func (UnimplementedPlumberServerServer) CreateRule(context.Context, *CreateDataQualityRuleRequest) (*CreateDataQualityRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRule not implemented")
}
func (UnimplementedPlumberServerServer) UpdateRule(context.Context, *UpdateDataQualityRuleRequest) (*UpdateDataQualityRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRule not implemented")
}
func (UnimplementedPlumberServerServer) DeleteRule(context.Context, *DeleteDataQualityRuleRequest) (*DeleteDataQualityRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRule not implemented")
}
func (UnimplementedPlumberServerServer) CreateRuleSet(context.Context, *CreateDataQualityRuleSetRequest) (*CreateDataQualityRuleSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRuleSet not implemented")
}
func (UnimplementedPlumberServerServer) UpdateRuleSet(context.Context, *UpdateDataQualityRuleSetRequest) (*UpdateDataQualityRuleSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRuleSet not implemented")
}
func (UnimplementedPlumberServerServer) DeleteRuleSet(context.Context, *DeleteDataQualityRuleSetRequest) (*DeleteDataQualityRuleSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRuleSet not implemented")
}
func (UnimplementedPlumberServerServer) SendRuleNotification(context.Context, *SendRuleNotificationRequest) (*SendRuleNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRuleNotification not implemented")
}
func (UnimplementedPlumberServerServer) GetServerOptions(context.Context, *GetServerOptionsRequest) (*GetServerOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerOptions not implemented")
}

// UnsafePlumberServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlumberServerServer will
// result in compilation errors.
type UnsafePlumberServerServer interface {
	mustEmbedUnimplementedPlumberServerServer()
}

func RegisterPlumberServerServer(s grpc.ServiceRegistrar, srv PlumberServerServer) {
	s.RegisterService(&PlumberServer_ServiceDesc, srv)
}

func _PlumberServer_GetAllConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetAllConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetAllConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetAllConnections(ctx, req.(*GetAllConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetConnection(ctx, req.(*GetConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/CreateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).CreateConnection(ctx, req.(*CreateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_TestConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).TestConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/TestConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).TestConnection(ctx, req.(*TestConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_UpdateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).UpdateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/UpdateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).UpdateConnection(ctx, req.(*UpdateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/DeleteConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).DeleteConnection(ctx, req.(*DeleteConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetAllRelays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRelaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetAllRelays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetAllRelays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetAllRelays(ctx, req.(*GetAllRelaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetRelay(ctx, req.(*GetRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_CreateRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).CreateRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/CreateRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).CreateRelay(ctx, req.(*CreateRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_UpdateRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).UpdateRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/UpdateRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).UpdateRelay(ctx, req.(*UpdateRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_ResumeRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).ResumeRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/ResumeRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).ResumeRelay(ctx, req.(*ResumeRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_StopRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).StopRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/StopRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).StopRelay(ctx, req.(*StopRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_DeleteRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).DeleteRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/DeleteRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).DeleteRelay(ctx, req.(*DeleteRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetTunnel(ctx, req.(*GetTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetAllTunnels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTunnelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetAllTunnels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetAllTunnels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetAllTunnels(ctx, req.(*GetAllTunnelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_CreateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).CreateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/CreateTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).CreateTunnel(ctx, req.(*CreateTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_StopTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).StopTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/StopTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).StopTunnel(ctx, req.(*StopTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_ResumeTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).ResumeTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/ResumeTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).ResumeTunnel(ctx, req.(*ResumeTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_UpdateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).UpdateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/UpdateTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).UpdateTunnel(ctx, req.(*UpdateTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_DeleteTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).DeleteTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/DeleteTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).DeleteTunnel(ctx, req.(*DeleteTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_ListWasmFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWasmFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).ListWasmFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/ListWasmFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).ListWasmFiles(ctx, req.(*ListWasmFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_UploadWasmFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadWasmFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).UploadWasmFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/UploadWasmFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).UploadWasmFile(ctx, req.(*UploadWasmFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_DownloadWasmFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadWasmFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).DownloadWasmFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/DownloadWasmFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).DownloadWasmFile(ctx, req.(*DownloadWasmFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_DeleteWasmFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWasmFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).DeleteWasmFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/DeleteWasmFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).DeleteWasmFile(ctx, req.(*DeleteWasmFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetRuleSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataQualityRuleSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetRuleSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetRuleSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetRuleSets(ctx, req.(*GetDataQualityRuleSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataQualityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetRule(ctx, req.(*GetDataQualityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataQualityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/CreateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).CreateRule(ctx, req.(*CreateDataQualityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_UpdateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataQualityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).UpdateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/UpdateRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).UpdateRule(ctx, req.(*UpdateDataQualityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_DeleteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataQualityRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).DeleteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/DeleteRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).DeleteRule(ctx, req.(*DeleteDataQualityRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_CreateRuleSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataQualityRuleSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).CreateRuleSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/CreateRuleSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).CreateRuleSet(ctx, req.(*CreateDataQualityRuleSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_UpdateRuleSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDataQualityRuleSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).UpdateRuleSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/UpdateRuleSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).UpdateRuleSet(ctx, req.(*UpdateDataQualityRuleSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_DeleteRuleSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataQualityRuleSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).DeleteRuleSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/DeleteRuleSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).DeleteRuleSet(ctx, req.(*DeleteDataQualityRuleSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_SendRuleNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRuleNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).SendRuleNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/SendRuleNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).SendRuleNotification(ctx, req.(*SendRuleNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlumberServer_GetServerOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlumberServerServer).GetServerOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PlumberServer/GetServerOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlumberServerServer).GetServerOptions(ctx, req.(*GetServerOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlumberServer_ServiceDesc is the grpc.ServiceDesc for PlumberServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlumberServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.PlumberServer",
	HandlerType: (*PlumberServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllConnections",
			Handler:    _PlumberServer_GetAllConnections_Handler,
		},
		{
			MethodName: "GetConnection",
			Handler:    _PlumberServer_GetConnection_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _PlumberServer_CreateConnection_Handler,
		},
		{
			MethodName: "TestConnection",
			Handler:    _PlumberServer_TestConnection_Handler,
		},
		{
			MethodName: "UpdateConnection",
			Handler:    _PlumberServer_UpdateConnection_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _PlumberServer_DeleteConnection_Handler,
		},
		{
			MethodName: "GetAllRelays",
			Handler:    _PlumberServer_GetAllRelays_Handler,
		},
		{
			MethodName: "GetRelay",
			Handler:    _PlumberServer_GetRelay_Handler,
		},
		{
			MethodName: "CreateRelay",
			Handler:    _PlumberServer_CreateRelay_Handler,
		},
		{
			MethodName: "UpdateRelay",
			Handler:    _PlumberServer_UpdateRelay_Handler,
		},
		{
			MethodName: "ResumeRelay",
			Handler:    _PlumberServer_ResumeRelay_Handler,
		},
		{
			MethodName: "StopRelay",
			Handler:    _PlumberServer_StopRelay_Handler,
		},
		{
			MethodName: "DeleteRelay",
			Handler:    _PlumberServer_DeleteRelay_Handler,
		},
		{
			MethodName: "GetTunnel",
			Handler:    _PlumberServer_GetTunnel_Handler,
		},
		{
			MethodName: "GetAllTunnels",
			Handler:    _PlumberServer_GetAllTunnels_Handler,
		},
		{
			MethodName: "CreateTunnel",
			Handler:    _PlumberServer_CreateTunnel_Handler,
		},
		{
			MethodName: "StopTunnel",
			Handler:    _PlumberServer_StopTunnel_Handler,
		},
		{
			MethodName: "ResumeTunnel",
			Handler:    _PlumberServer_ResumeTunnel_Handler,
		},
		{
			MethodName: "UpdateTunnel",
			Handler:    _PlumberServer_UpdateTunnel_Handler,
		},
		{
			MethodName: "DeleteTunnel",
			Handler:    _PlumberServer_DeleteTunnel_Handler,
		},
		{
			MethodName: "ListWasmFiles",
			Handler:    _PlumberServer_ListWasmFiles_Handler,
		},
		{
			MethodName: "UploadWasmFile",
			Handler:    _PlumberServer_UploadWasmFile_Handler,
		},
		{
			MethodName: "DownloadWasmFile",
			Handler:    _PlumberServer_DownloadWasmFile_Handler,
		},
		{
			MethodName: "DeleteWasmFile",
			Handler:    _PlumberServer_DeleteWasmFile_Handler,
		},
		{
			MethodName: "GetRuleSets",
			Handler:    _PlumberServer_GetRuleSets_Handler,
		},
		{
			MethodName: "GetRule",
			Handler:    _PlumberServer_GetRule_Handler,
		},
		{
			MethodName: "CreateRule",
			Handler:    _PlumberServer_CreateRule_Handler,
		},
		{
			MethodName: "UpdateRule",
			Handler:    _PlumberServer_UpdateRule_Handler,
		},
		{
			MethodName: "DeleteRule",
			Handler:    _PlumberServer_DeleteRule_Handler,
		},
		{
			MethodName: "CreateRuleSet",
			Handler:    _PlumberServer_CreateRuleSet_Handler,
		},
		{
			MethodName: "UpdateRuleSet",
			Handler:    _PlumberServer_UpdateRuleSet_Handler,
		},
		{
			MethodName: "DeleteRuleSet",
			Handler:    _PlumberServer_DeleteRuleSet_Handler,
		},
		{
			MethodName: "SendRuleNotification",
			Handler:    _PlumberServer_SendRuleNotification_Handler,
		},
		{
			MethodName: "GetServerOptions",
			Handler:    _PlumberServer_GetServerOptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ps_base.proto",
}
