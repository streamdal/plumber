// Records contain types for read, write and relay operations.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: records/ps_records_base.proto

package records

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Returned for read requests (server & cli)
type ReadRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id automatically created by plumber
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Plumber counts the number of messages it reads; this number represents
	// the message number (useful for CLI).
	Num int64 `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	// Metadata may contain properties that cannot be found in the Raw message.
	// For example: read lag in Kafka.
	//
	// Metadata may also contain data such as "count" which is an incremental
	// number that plumber assigns to each message it receives. This is used
	// with read via CLI functionality to allow the user to quickly discern
	// whether this is message #1 or #500, etc.
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// UTC unix timestamp of when plumber received the message; a backend record
	// entry might have its own timestamp as well. This should be seconds.
	ReceivedAtUnixTsUtc int64 `protobuf:"varint,6,opt,name=received_at_unix_ts_utc,json=receivedAtUnixTsUtc,proto3" json:"received_at_unix_ts_utc,omitempty"`
	// Set _outside_ the backend; will contain the final value, regardless of
	// whether decoding options were specified for a read.
	// _This_ is what both CLI and desktop should display for the payload.
	Payload []byte `protobuf:"bytes,99,opt,name=payload,proto3" json:"payload,omitempty"`
	// Types that are assignable to Record:
	//
	//	*ReadRecord_Kafka
	//	*ReadRecord_Rabbit
	//	*ReadRecord_Activemq
	//	*ReadRecord_AwsSqs
	//	*ReadRecord_AzureEventHub
	//	*ReadRecord_AzureServiceBus
	//	*ReadRecord_GcpPubsub
	//	*ReadRecord_Kubemq
	//	*ReadRecord_Mongo
	//	*ReadRecord_Mqtt
	//	*ReadRecord_Nats
	//	*ReadRecord_NatsStreaming
	//	*ReadRecord_Nsq
	//	*ReadRecord_Postgres
	//	*ReadRecord_Pulsar
	//	*ReadRecord_RabbitStreams
	//	*ReadRecord_RedisPubsub
	//	*ReadRecord_RedisStreams
	//	*ReadRecord_NatsJetstream
	//	*ReadRecord_AwsKinesis
	//	*ReadRecord_Memphis
	Record isReadRecord_Record `protobuf_oneof:"Record"`
	// Original backend message (encoded with gob, ie. *skafka.Message, etc.).
	// In most cases, you should use the oneof record instead of the raw message.
	XRaw []byte `protobuf:"bytes,1000,opt,name=_raw,json=Raw,proto3" json:"_raw,omitempty"`
	// Identifies which plumber instance received the event (set outside the backend)
	XPlumberId string `protobuf:"bytes,1001,opt,name=_plumber_id,json=PlumberId,proto3" json:"_plumber_id,omitempty"`
}

func (x *ReadRecord) Reset() {
	*x = ReadRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_records_ps_records_base_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRecord) ProtoMessage() {}

func (x *ReadRecord) ProtoReflect() protoreflect.Message {
	mi := &file_records_ps_records_base_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRecord.ProtoReflect.Descriptor instead.
func (*ReadRecord) Descriptor() ([]byte, []int) {
	return file_records_ps_records_base_proto_rawDescGZIP(), []int{0}
}

func (x *ReadRecord) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *ReadRecord) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *ReadRecord) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ReadRecord) GetReceivedAtUnixTsUtc() int64 {
	if x != nil {
		return x.ReceivedAtUnixTsUtc
	}
	return 0
}

func (x *ReadRecord) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (m *ReadRecord) GetRecord() isReadRecord_Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func (x *ReadRecord) GetKafka() *Kafka {
	if x, ok := x.GetRecord().(*ReadRecord_Kafka); ok {
		return x.Kafka
	}
	return nil
}

func (x *ReadRecord) GetRabbit() *Rabbit {
	if x, ok := x.GetRecord().(*ReadRecord_Rabbit); ok {
		return x.Rabbit
	}
	return nil
}

func (x *ReadRecord) GetActivemq() *ActiveMQ {
	if x, ok := x.GetRecord().(*ReadRecord_Activemq); ok {
		return x.Activemq
	}
	return nil
}

func (x *ReadRecord) GetAwsSqs() *AWSSQS {
	if x, ok := x.GetRecord().(*ReadRecord_AwsSqs); ok {
		return x.AwsSqs
	}
	return nil
}

func (x *ReadRecord) GetAzureEventHub() *AzureEventHub {
	if x, ok := x.GetRecord().(*ReadRecord_AzureEventHub); ok {
		return x.AzureEventHub
	}
	return nil
}

func (x *ReadRecord) GetAzureServiceBus() *AzureServiceBus {
	if x, ok := x.GetRecord().(*ReadRecord_AzureServiceBus); ok {
		return x.AzureServiceBus
	}
	return nil
}

func (x *ReadRecord) GetGcpPubsub() *GCPPubSub {
	if x, ok := x.GetRecord().(*ReadRecord_GcpPubsub); ok {
		return x.GcpPubsub
	}
	return nil
}

func (x *ReadRecord) GetKubemq() *KubeMQ {
	if x, ok := x.GetRecord().(*ReadRecord_Kubemq); ok {
		return x.Kubemq
	}
	return nil
}

func (x *ReadRecord) GetMongo() *Mongo {
	if x, ok := x.GetRecord().(*ReadRecord_Mongo); ok {
		return x.Mongo
	}
	return nil
}

func (x *ReadRecord) GetMqtt() *MQTT {
	if x, ok := x.GetRecord().(*ReadRecord_Mqtt); ok {
		return x.Mqtt
	}
	return nil
}

func (x *ReadRecord) GetNats() *Nats {
	if x, ok := x.GetRecord().(*ReadRecord_Nats); ok {
		return x.Nats
	}
	return nil
}

func (x *ReadRecord) GetNatsStreaming() *NatsStreaming {
	if x, ok := x.GetRecord().(*ReadRecord_NatsStreaming); ok {
		return x.NatsStreaming
	}
	return nil
}

func (x *ReadRecord) GetNsq() *NSQ {
	if x, ok := x.GetRecord().(*ReadRecord_Nsq); ok {
		return x.Nsq
	}
	return nil
}

func (x *ReadRecord) GetPostgres() *Postgres {
	if x, ok := x.GetRecord().(*ReadRecord_Postgres); ok {
		return x.Postgres
	}
	return nil
}

func (x *ReadRecord) GetPulsar() *Pulsar {
	if x, ok := x.GetRecord().(*ReadRecord_Pulsar); ok {
		return x.Pulsar
	}
	return nil
}

func (x *ReadRecord) GetRabbitStreams() *RabbitStreams {
	if x, ok := x.GetRecord().(*ReadRecord_RabbitStreams); ok {
		return x.RabbitStreams
	}
	return nil
}

func (x *ReadRecord) GetRedisPubsub() *RedisPubsub {
	if x, ok := x.GetRecord().(*ReadRecord_RedisPubsub); ok {
		return x.RedisPubsub
	}
	return nil
}

func (x *ReadRecord) GetRedisStreams() *RedisStreams {
	if x, ok := x.GetRecord().(*ReadRecord_RedisStreams); ok {
		return x.RedisStreams
	}
	return nil
}

func (x *ReadRecord) GetNatsJetstream() *NatsJetstream {
	if x, ok := x.GetRecord().(*ReadRecord_NatsJetstream); ok {
		return x.NatsJetstream
	}
	return nil
}

func (x *ReadRecord) GetAwsKinesis() *AWSKinesis {
	if x, ok := x.GetRecord().(*ReadRecord_AwsKinesis); ok {
		return x.AwsKinesis
	}
	return nil
}

func (x *ReadRecord) GetMemphis() *Memphis {
	if x, ok := x.GetRecord().(*ReadRecord_Memphis); ok {
		return x.Memphis
	}
	return nil
}

func (x *ReadRecord) GetXRaw() []byte {
	if x != nil {
		return x.XRaw
	}
	return nil
}

func (x *ReadRecord) GetXPlumberId() string {
	if x != nil {
		return x.XPlumberId
	}
	return ""
}

type isReadRecord_Record interface {
	isReadRecord_Record()
}

type ReadRecord_Kafka struct {
	Kafka *Kafka `protobuf:"bytes,100,opt,name=kafka,proto3,oneof"`
}

type ReadRecord_Rabbit struct {
	Rabbit *Rabbit `protobuf:"bytes,101,opt,name=rabbit,proto3,oneof"`
}

type ReadRecord_Activemq struct {
	Activemq *ActiveMQ `protobuf:"bytes,102,opt,name=activemq,proto3,oneof"`
}

type ReadRecord_AwsSqs struct {
	AwsSqs *AWSSQS `protobuf:"bytes,103,opt,name=aws_sqs,json=awsSqs,proto3,oneof"`
}

type ReadRecord_AzureEventHub struct {
	AzureEventHub *AzureEventHub `protobuf:"bytes,104,opt,name=azure_event_hub,json=azureEventHub,proto3,oneof"`
}

type ReadRecord_AzureServiceBus struct {
	AzureServiceBus *AzureServiceBus `protobuf:"bytes,105,opt,name=azure_service_bus,json=azureServiceBus,proto3,oneof"`
}

type ReadRecord_GcpPubsub struct {
	GcpPubsub *GCPPubSub `protobuf:"bytes,106,opt,name=gcp_pubsub,json=gcpPubsub,proto3,oneof"`
}

type ReadRecord_Kubemq struct {
	Kubemq *KubeMQ `protobuf:"bytes,107,opt,name=kubemq,proto3,oneof"`
}

type ReadRecord_Mongo struct {
	Mongo *Mongo `protobuf:"bytes,108,opt,name=mongo,proto3,oneof"`
}

type ReadRecord_Mqtt struct {
	Mqtt *MQTT `protobuf:"bytes,109,opt,name=mqtt,proto3,oneof"`
}

type ReadRecord_Nats struct {
	Nats *Nats `protobuf:"bytes,110,opt,name=nats,proto3,oneof"`
}

type ReadRecord_NatsStreaming struct {
	NatsStreaming *NatsStreaming `protobuf:"bytes,111,opt,name=nats_streaming,json=natsStreaming,proto3,oneof"`
}

type ReadRecord_Nsq struct {
	Nsq *NSQ `protobuf:"bytes,112,opt,name=nsq,proto3,oneof"`
}

type ReadRecord_Postgres struct {
	Postgres *Postgres `protobuf:"bytes,113,opt,name=postgres,proto3,oneof"`
}

type ReadRecord_Pulsar struct {
	Pulsar *Pulsar `protobuf:"bytes,114,opt,name=pulsar,proto3,oneof"`
}

type ReadRecord_RabbitStreams struct {
	RabbitStreams *RabbitStreams `protobuf:"bytes,115,opt,name=rabbit_streams,json=rabbitStreams,proto3,oneof"`
}

type ReadRecord_RedisPubsub struct {
	RedisPubsub *RedisPubsub `protobuf:"bytes,116,opt,name=redis_pubsub,json=redisPubsub,proto3,oneof"`
}

type ReadRecord_RedisStreams struct {
	RedisStreams *RedisStreams `protobuf:"bytes,117,opt,name=redis_streams,json=redisStreams,proto3,oneof"`
}

type ReadRecord_NatsJetstream struct {
	NatsJetstream *NatsJetstream `protobuf:"bytes,118,opt,name=nats_jetstream,json=natsJetstream,proto3,oneof"`
}

type ReadRecord_AwsKinesis struct {
	AwsKinesis *AWSKinesis `protobuf:"bytes,119,opt,name=aws_kinesis,json=awsKinesis,proto3,oneof"`
}

type ReadRecord_Memphis struct {
	Memphis *Memphis `protobuf:"bytes,120,opt,name=memphis,proto3,oneof"`
}

func (*ReadRecord_Kafka) isReadRecord_Record() {}

func (*ReadRecord_Rabbit) isReadRecord_Record() {}

func (*ReadRecord_Activemq) isReadRecord_Record() {}

func (*ReadRecord_AwsSqs) isReadRecord_Record() {}

func (*ReadRecord_AzureEventHub) isReadRecord_Record() {}

func (*ReadRecord_AzureServiceBus) isReadRecord_Record() {}

func (*ReadRecord_GcpPubsub) isReadRecord_Record() {}

func (*ReadRecord_Kubemq) isReadRecord_Record() {}

func (*ReadRecord_Mongo) isReadRecord_Record() {}

func (*ReadRecord_Mqtt) isReadRecord_Record() {}

func (*ReadRecord_Nats) isReadRecord_Record() {}

func (*ReadRecord_NatsStreaming) isReadRecord_Record() {}

func (*ReadRecord_Nsq) isReadRecord_Record() {}

func (*ReadRecord_Postgres) isReadRecord_Record() {}

func (*ReadRecord_Pulsar) isReadRecord_Record() {}

func (*ReadRecord_RabbitStreams) isReadRecord_Record() {}

func (*ReadRecord_RedisPubsub) isReadRecord_Record() {}

func (*ReadRecord_RedisStreams) isReadRecord_Record() {}

func (*ReadRecord_NatsJetstream) isReadRecord_Record() {}

func (*ReadRecord_AwsKinesis) isReadRecord_Record() {}

func (*ReadRecord_Memphis) isReadRecord_Record() {}

// Used as an arg for write requests (server & cli)
type WriteRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If encoding options are provided, this value will be updated by plumber
	// to contain the encoded payload _before_ passing it to the backend.
	// @gotags: kong:"help='Input string',name=input,xor=input,default"
	Input string `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty" kong:"help='Input string',name=input,xor=input,default"`
	// @gotags: kong:"help='Optional metadata a backend may use (key1=value,key2=value,etc)',name=input-metadata"
	InputMetadata map[string]string `protobuf:"bytes,2,rep,name=input_metadata,json=inputMetadata,proto3" json:"input_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" kong:"help='Optional metadata a backend may use (key1=value,key2=value,etc)',name=input-metadata"`
}

func (x *WriteRecord) Reset() {
	*x = WriteRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_records_ps_records_base_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRecord) ProtoMessage() {}

func (x *WriteRecord) ProtoReflect() protoreflect.Message {
	mi := &file_records_ps_records_base_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRecord.ProtoReflect.Descriptor instead.
func (*WriteRecord) Descriptor() ([]byte, []int) {
	return file_records_ps_records_base_proto_rawDescGZIP(), []int{1}
}

func (x *WriteRecord) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *WriteRecord) GetInputMetadata() map[string]string {
	if x != nil {
		return x.InputMetadata
	}
	return nil
}

// Used for communicating errors that occur during a read, write, relay, etc.
type ErrorRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OccurredAtUnixTsUtc int64             `protobuf:"varint,1,opt,name=occurred_at_unix_ts_utc,json=occurredAtUnixTsUtc,proto3" json:"occurred_at_unix_ts_utc,omitempty"`
	Error               string            `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Metadata            map[string][]byte `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ErrorRecord) Reset() {
	*x = ErrorRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_records_ps_records_base_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorRecord) ProtoMessage() {}

func (x *ErrorRecord) ProtoReflect() protoreflect.Message {
	mi := &file_records_ps_records_base_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorRecord.ProtoReflect.Descriptor instead.
func (*ErrorRecord) Descriptor() ([]byte, []int) {
	return file_records_ps_records_base_proto_rawDescGZIP(), []int{2}
}

func (x *ErrorRecord) GetOccurredAtUnixTsUtc() int64 {
	if x != nil {
		return x.OccurredAtUnixTsUtc
	}
	return 0
}

func (x *ErrorRecord) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ErrorRecord) GetMetadata() map[string][]byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_records_ps_records_base_proto protoreflect.FileDescriptor

var file_records_ps_records_base_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x1a,
	0x21, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x24, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x6b, 0x69, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x2f, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x61, 0x77, 0x73,
	0x5f, 0x73, 0x71, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x75, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x70, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x23, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x5f, 0x67, 0x63, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x70,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x70,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x6d, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f,
	0x70, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x70, 0x68,
	0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x2f, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x6d, 0x6f, 0x6e,
	0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x2f, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x6d, 0x71, 0x74,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x2f, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f,
	0x70, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x73, 0x5f,
	0x6a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x27, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x2f, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x6e, 0x73, 0x71,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f,
	0x70, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x75,
	0x6c, 0x73, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x72,
	0x61, 0x62, 0x62, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f,
	0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x70, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x70,
	0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x0c, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x17, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x74, 0x73,
	0x5f, 0x75, 0x74, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x55, 0x6e, 0x69, 0x78, 0x54, 0x73, 0x55, 0x74, 0x63, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x48,
	0x00, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x61, 0x62, 0x62,
	0x69, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x6d, 0x71, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x4d, 0x51, 0x48, 0x00, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x6d, 0x71, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x71, 0x73, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x53, 0x51, 0x53, 0x48, 0x00, 0x52, 0x06, 0x61,
	0x77, 0x73, 0x53, 0x71, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x75, 0x62, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x41, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x62, 0x48, 0x00, 0x52,
	0x0d, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x62, 0x12, 0x4d,
	0x0a, 0x11, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x62, 0x75, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x7a,
	0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x73, 0x12, 0x3a, 0x0a,
	0x0a, 0x67, 0x63, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x47, 0x43, 0x50, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x48, 0x00, 0x52, 0x09,
	0x67, 0x63, 0x70, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x12, 0x30, 0x0a, 0x06, 0x6b, 0x75, 0x62,
	0x65, 0x6d, 0x71, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x4d,
	0x51, 0x48, 0x00, 0x52, 0x06, 0x6b, 0x75, 0x62, 0x65, 0x6d, 0x71, 0x12, 0x2d, 0x0a, 0x05, 0x6d,
	0x6f, 0x6e, 0x67, 0x6f, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x67,
	0x6f, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x71,
	0x74, 0x74, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x51, 0x54, 0x54, 0x48, 0x00,
	0x52, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x74, 0x73, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x74, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x61, 0x74,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x03, 0x6e, 0x73,
	0x71, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x4e, 0x53, 0x51, 0x48, 0x00, 0x52, 0x03,
	0x6e, 0x73, 0x71, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x18,
	0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x70,
	0x75, 0x6c, 0x73, 0x61, 0x72, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x50, 0x75, 0x6c,
	0x73, 0x61, 0x72, 0x48, 0x00, 0x52, 0x06, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x12, 0x46, 0x0a,
	0x0e, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18,
	0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x70,
	0x75, 0x62, 0x73, 0x75, 0x62, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69,
	0x73, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x12, 0x43, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0c,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x46, 0x0a, 0x0e,
	0x6e, 0x61, 0x74, 0x73, 0x5f, 0x6a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x76,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x77, 0x73, 0x5f, 0x6b, 0x69, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x4b, 0x69,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x4b, 0x69, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x18, 0x78,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x48, 0x00, 0x52,
	0x07, 0x6d, 0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x5f, 0x72, 0x61, 0x77,
	0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x52, 0x61, 0x77, 0x12, 0x1f, 0x0a, 0x0b,
	0x5f, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0xe9, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x50, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x0b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x55, 0x0a, 0x0e, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x40, 0x0a, 0x12, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xdd, 0x01, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x17, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x74, 0x73, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x41, 0x74,
	0x55, 0x6e, 0x69, 0x78, 0x54, 0x73, 0x55, 0x74, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x45, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x70, 0x6c, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_records_ps_records_base_proto_rawDescOnce sync.Once
	file_records_ps_records_base_proto_rawDescData = file_records_ps_records_base_proto_rawDesc
)

func file_records_ps_records_base_proto_rawDescGZIP() []byte {
	file_records_ps_records_base_proto_rawDescOnce.Do(func() {
		file_records_ps_records_base_proto_rawDescData = protoimpl.X.CompressGZIP(file_records_ps_records_base_proto_rawDescData)
	})
	return file_records_ps_records_base_proto_rawDescData
}

var file_records_ps_records_base_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_records_ps_records_base_proto_goTypes = []interface{}{
	(*ReadRecord)(nil),      // 0: protos.records.ReadRecord
	(*WriteRecord)(nil),     // 1: protos.records.WriteRecord
	(*ErrorRecord)(nil),     // 2: protos.records.ErrorRecord
	nil,                     // 3: protos.records.ReadRecord.MetadataEntry
	nil,                     // 4: protos.records.WriteRecord.InputMetadataEntry
	nil,                     // 5: protos.records.ErrorRecord.MetadataEntry
	(*Kafka)(nil),           // 6: protos.records.Kafka
	(*Rabbit)(nil),          // 7: protos.records.Rabbit
	(*ActiveMQ)(nil),        // 8: protos.records.ActiveMQ
	(*AWSSQS)(nil),          // 9: protos.records.AWSSQS
	(*AzureEventHub)(nil),   // 10: protos.records.AzureEventHub
	(*AzureServiceBus)(nil), // 11: protos.records.AzureServiceBus
	(*GCPPubSub)(nil),       // 12: protos.records.GCPPubSub
	(*KubeMQ)(nil),          // 13: protos.records.KubeMQ
	(*Mongo)(nil),           // 14: protos.records.Mongo
	(*MQTT)(nil),            // 15: protos.records.MQTT
	(*Nats)(nil),            // 16: protos.records.Nats
	(*NatsStreaming)(nil),   // 17: protos.records.NatsStreaming
	(*NSQ)(nil),             // 18: protos.records.NSQ
	(*Postgres)(nil),        // 19: protos.records.Postgres
	(*Pulsar)(nil),          // 20: protos.records.Pulsar
	(*RabbitStreams)(nil),   // 21: protos.records.RabbitStreams
	(*RedisPubsub)(nil),     // 22: protos.records.RedisPubsub
	(*RedisStreams)(nil),    // 23: protos.records.RedisStreams
	(*NatsJetstream)(nil),   // 24: protos.records.NatsJetstream
	(*AWSKinesis)(nil),      // 25: protos.records.AWSKinesis
	(*Memphis)(nil),         // 26: protos.records.Memphis
}
var file_records_ps_records_base_proto_depIdxs = []int32{
	3,  // 0: protos.records.ReadRecord.metadata:type_name -> protos.records.ReadRecord.MetadataEntry
	6,  // 1: protos.records.ReadRecord.kafka:type_name -> protos.records.Kafka
	7,  // 2: protos.records.ReadRecord.rabbit:type_name -> protos.records.Rabbit
	8,  // 3: protos.records.ReadRecord.activemq:type_name -> protos.records.ActiveMQ
	9,  // 4: protos.records.ReadRecord.aws_sqs:type_name -> protos.records.AWSSQS
	10, // 5: protos.records.ReadRecord.azure_event_hub:type_name -> protos.records.AzureEventHub
	11, // 6: protos.records.ReadRecord.azure_service_bus:type_name -> protos.records.AzureServiceBus
	12, // 7: protos.records.ReadRecord.gcp_pubsub:type_name -> protos.records.GCPPubSub
	13, // 8: protos.records.ReadRecord.kubemq:type_name -> protos.records.KubeMQ
	14, // 9: protos.records.ReadRecord.mongo:type_name -> protos.records.Mongo
	15, // 10: protos.records.ReadRecord.mqtt:type_name -> protos.records.MQTT
	16, // 11: protos.records.ReadRecord.nats:type_name -> protos.records.Nats
	17, // 12: protos.records.ReadRecord.nats_streaming:type_name -> protos.records.NatsStreaming
	18, // 13: protos.records.ReadRecord.nsq:type_name -> protos.records.NSQ
	19, // 14: protos.records.ReadRecord.postgres:type_name -> protos.records.Postgres
	20, // 15: protos.records.ReadRecord.pulsar:type_name -> protos.records.Pulsar
	21, // 16: protos.records.ReadRecord.rabbit_streams:type_name -> protos.records.RabbitStreams
	22, // 17: protos.records.ReadRecord.redis_pubsub:type_name -> protos.records.RedisPubsub
	23, // 18: protos.records.ReadRecord.redis_streams:type_name -> protos.records.RedisStreams
	24, // 19: protos.records.ReadRecord.nats_jetstream:type_name -> protos.records.NatsJetstream
	25, // 20: protos.records.ReadRecord.aws_kinesis:type_name -> protos.records.AWSKinesis
	26, // 21: protos.records.ReadRecord.memphis:type_name -> protos.records.Memphis
	4,  // 22: protos.records.WriteRecord.input_metadata:type_name -> protos.records.WriteRecord.InputMetadataEntry
	5,  // 23: protos.records.ErrorRecord.metadata:type_name -> protos.records.ErrorRecord.MetadataEntry
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_records_ps_records_base_proto_init() }
func file_records_ps_records_base_proto_init() {
	if File_records_ps_records_base_proto != nil {
		return
	}
	file_records_ps_records_activemq_proto_init()
	file_records_ps_records_aws_kinesis_proto_init()
	file_records_ps_records_aws_sqs_proto_init()
	file_records_ps_records_azure_event_hub_proto_init()
	file_records_ps_records_azure_service_bus_proto_init()
	file_records_ps_records_gcp_pubsub_proto_init()
	file_records_ps_records_kafka_proto_init()
	file_records_ps_records_kubemq_proto_init()
	file_records_ps_records_memphis_proto_init()
	file_records_ps_records_mongo_proto_init()
	file_records_ps_records_mqtt_proto_init()
	file_records_ps_records_nats_proto_init()
	file_records_ps_records_nats_jetstream_proto_init()
	file_records_ps_records_nats_streaming_proto_init()
	file_records_ps_records_nsq_proto_init()
	file_records_ps_records_postgres_proto_init()
	file_records_ps_records_pulsar_proto_init()
	file_records_ps_records_rabbit_proto_init()
	file_records_ps_records_rabbit_streams_proto_init()
	file_records_ps_records_redis_pubsub_proto_init()
	file_records_ps_records_redis_streams_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_records_ps_records_base_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_records_ps_records_base_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_records_ps_records_base_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_records_ps_records_base_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ReadRecord_Kafka)(nil),
		(*ReadRecord_Rabbit)(nil),
		(*ReadRecord_Activemq)(nil),
		(*ReadRecord_AwsSqs)(nil),
		(*ReadRecord_AzureEventHub)(nil),
		(*ReadRecord_AzureServiceBus)(nil),
		(*ReadRecord_GcpPubsub)(nil),
		(*ReadRecord_Kubemq)(nil),
		(*ReadRecord_Mongo)(nil),
		(*ReadRecord_Mqtt)(nil),
		(*ReadRecord_Nats)(nil),
		(*ReadRecord_NatsStreaming)(nil),
		(*ReadRecord_Nsq)(nil),
		(*ReadRecord_Postgres)(nil),
		(*ReadRecord_Pulsar)(nil),
		(*ReadRecord_RabbitStreams)(nil),
		(*ReadRecord_RedisPubsub)(nil),
		(*ReadRecord_RedisStreams)(nil),
		(*ReadRecord_NatsJetstream)(nil),
		(*ReadRecord_AwsKinesis)(nil),
		(*ReadRecord_Memphis)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_records_ps_records_base_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_records_ps_records_base_proto_goTypes,
		DependencyIndexes: file_records_ps_records_base_proto_depIdxs,
		MessageInfos:      file_records_ps_records_base_proto_msgTypes,
	}.Build()
	File_records_ps_records_base_proto = out.File
	file_records_ps_records_base_proto_rawDesc = nil
	file_records_ps_records_base_proto_goTypes = nil
	file_records_ps_records_base_proto_depIdxs = nil
}
