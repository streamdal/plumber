// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: opts/ps_opts_cli.proto

package opts

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GlobalCLIOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='Enable debug output',short=d"
	Debug bool `protobuf:"varint,1,opt,name=debug,proto3" json:"debug,omitempty" kong:"help='Enable debug output',short=d"`
	// @gotags: kong:"help='Disable fancy output (like curl -s)',short=q"
	Quiet bool `protobuf:"varint,2,opt,name=quiet,proto3" json:"quiet,omitempty" kong:"help='Disable fancy output (like curl -s)',short=q"`
	// @gotags: kong:"help='Display plumber version'"
	Version bool `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty" kong:"help='Display plumber version'"`
	// @gotags: kong:"-"
	XFullCommand string `protobuf:"bytes,1000,opt,name=_full_command,json=FullCommand,proto3" json:"_full_command,omitempty" kong:"-"`
	// @gotags: kong:"-"
	XAction string `protobuf:"bytes,1001,opt,name=_action,json=Action,proto3" json:"_action,omitempty" kong:"-"`
	// @gotags: kong:"-"
	XBackend string `protobuf:"bytes,1002,opt,name=_backend,json=Backend,proto3" json:"_backend,omitempty" kong:"-"`
	// @gotags: kong:"-"
	XCommands []string `protobuf:"bytes,1003,rep,name=_commands,json=Commands,proto3" json:"_commands,omitempty" kong:"-"`
}

func (x *GlobalCLIOptions) Reset() {
	*x = GlobalCLIOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_cli_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalCLIOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalCLIOptions) ProtoMessage() {}

func (x *GlobalCLIOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_cli_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalCLIOptions.ProtoReflect.Descriptor instead.
func (*GlobalCLIOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_cli_proto_rawDescGZIP(), []int{0}
}

func (x *GlobalCLIOptions) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *GlobalCLIOptions) GetQuiet() bool {
	if x != nil {
		return x.Quiet
	}
	return false
}

func (x *GlobalCLIOptions) GetVersion() bool {
	if x != nil {
		return x.Version
	}
	return false
}

func (x *GlobalCLIOptions) GetXFullCommand() string {
	if x != nil {
		return x.XFullCommand
	}
	return ""
}

func (x *GlobalCLIOptions) GetXAction() string {
	if x != nil {
		return x.XAction
	}
	return ""
}

func (x *GlobalCLIOptions) GetXBackend() string {
	if x != nil {
		return x.XBackend
	}
	return ""
}

func (x *GlobalCLIOptions) GetXCommands() []string {
	if x != nil {
		return x.XCommands
	}
	return nil
}

// CLI options in plumber are derived 100% from the protobuf schemas.
// The CLIOptions type is used for populating base CLI options. Introducing
// a top-level CLI option should begin here (and trickle all the way down to
// any newly introduced types).
//
// For more info, check README_CLI.md
type CLIOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	Global *GlobalCLIOptions `protobuf:"bytes,1,opt,name=global,proto3" json:"global,omitempty" kong:"embed"`
	// @gotags: kong:"cmd,help='Read message(s) from messaging system'"
	Read *ReadOptions `protobuf:"bytes,2,opt,name=read,proto3" json:"read,omitempty" kong:"cmd,help='Read message(s) from messaging system'"`
	// @gotags: kong:"cmd,help='Write message(s) to messaging system'"
	Write *WriteOptions `protobuf:"bytes,3,opt,name=write,proto3" json:"write,omitempty" kong:"cmd,help='Write message(s) to messaging system'"`
	// @gotags: kong:"cmd,help='Relay message(s) from messaging system to Streamdal'"
	Relay *RelayOptions `protobuf:"bytes,4,opt,name=relay,proto3" json:"relay,omitempty" kong:"cmd,help='Relay message(s) from messaging system to Streamdal'"`
	// @gotags: kong:"cmd,help='Use plumber as a destination tunnel in Streamdal'"
	Tunnel *TunnelOptions `protobuf:"bytes,5,opt,name=tunnel,proto3" json:"tunnel,omitempty" kong:"cmd,help='Use plumber as a destination tunnel in Streamdal'"`
	// @gotags: kong:"cmd,help='Control your Streamdal resources via the public API'"
	Streamdal *StreamdalOptions `protobuf:"bytes,6,opt,name=streamdal,proto3" json:"streamdal,omitempty" kong:"cmd,help='Control your Streamdal resources via the public API'"`
	// @gotags: kong:"cmd,help='Run plumber in server mode'"
	Server *ServerOptions `protobuf:"bytes,7,opt,name=server,proto3" json:"server,omitempty" kong:"cmd,help='Run plumber in server mode'"`
	// @gotags: kong:"cmd,help='Manage plumber server'"
	Manage *ManageOptions `protobuf:"bytes,8,opt,name=manage,proto3" json:"manage,omitempty" kong:"cmd,help='Manage plumber server'"`
}

func (x *CLIOptions) Reset() {
	*x = CLIOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_cli_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CLIOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLIOptions) ProtoMessage() {}

func (x *CLIOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_cli_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLIOptions.ProtoReflect.Descriptor instead.
func (*CLIOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_cli_proto_rawDescGZIP(), []int{1}
}

func (x *CLIOptions) GetGlobal() *GlobalCLIOptions {
	if x != nil {
		return x.Global
	}
	return nil
}

func (x *CLIOptions) GetRead() *ReadOptions {
	if x != nil {
		return x.Read
	}
	return nil
}

func (x *CLIOptions) GetWrite() *WriteOptions {
	if x != nil {
		return x.Write
	}
	return nil
}

func (x *CLIOptions) GetRelay() *RelayOptions {
	if x != nil {
		return x.Relay
	}
	return nil
}

func (x *CLIOptions) GetTunnel() *TunnelOptions {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

func (x *CLIOptions) GetStreamdal() *StreamdalOptions {
	if x != nil {
		return x.Streamdal
	}
	return nil
}

func (x *CLIOptions) GetServer() *ServerOptions {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *CLIOptions) GetManage() *ManageOptions {
	if x != nil {
		return x.Manage
	}
	return nil
}

var File_opts_ps_opts_cli_proto protoreflect.FileDescriptor

var file_opts_ps_opts_cli_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6f, 0x70, 0x74, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x5f, 0x63,
	0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x6f, 0x70, 0x74, 0x73, 0x1a, 0x19, 0x6f, 0x70, 0x74, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x6f,
	0x70, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x6f, 0x70, 0x74, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6f, 0x70, 0x74, 0x73, 0x2f,
	0x70, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6f, 0x70, 0x74, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x6f, 0x70, 0x74,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x6f, 0x70, 0x74, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6f, 0x70,
	0x74, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6f, 0x70, 0x74, 0x73, 0x2f, 0x70, 0x73,
	0x5f, 0x6f, 0x70, 0x74, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd1, 0x01, 0x0a, 0x10, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x4c, 0x49, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x69, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x71, 0x75, 0x69,
	0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0xe8, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe9, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x18, 0xeb, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0xac, 0x03, 0x0a, 0x0a, 0x43, 0x4c, 0x49, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70,
	0x74, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x4c, 0x49, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x06, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x04, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x32, 0x0a, 0x06, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x3b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x32, 0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x70, 0x6c, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6f, 0x70, 0x74,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opts_ps_opts_cli_proto_rawDescOnce sync.Once
	file_opts_ps_opts_cli_proto_rawDescData = file_opts_ps_opts_cli_proto_rawDesc
)

func file_opts_ps_opts_cli_proto_rawDescGZIP() []byte {
	file_opts_ps_opts_cli_proto_rawDescOnce.Do(func() {
		file_opts_ps_opts_cli_proto_rawDescData = protoimpl.X.CompressGZIP(file_opts_ps_opts_cli_proto_rawDescData)
	})
	return file_opts_ps_opts_cli_proto_rawDescData
}

var file_opts_ps_opts_cli_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_opts_ps_opts_cli_proto_goTypes = []interface{}{
	(*GlobalCLIOptions)(nil), // 0: protos.opts.GlobalCLIOptions
	(*CLIOptions)(nil),       // 1: protos.opts.CLIOptions
	(*ReadOptions)(nil),      // 2: protos.opts.ReadOptions
	(*WriteOptions)(nil),     // 3: protos.opts.WriteOptions
	(*RelayOptions)(nil),     // 4: protos.opts.RelayOptions
	(*TunnelOptions)(nil),    // 5: protos.opts.TunnelOptions
	(*StreamdalOptions)(nil), // 6: protos.opts.StreamdalOptions
	(*ServerOptions)(nil),    // 7: protos.opts.ServerOptions
	(*ManageOptions)(nil),    // 8: protos.opts.ManageOptions
}
var file_opts_ps_opts_cli_proto_depIdxs = []int32{
	0, // 0: protos.opts.CLIOptions.global:type_name -> protos.opts.GlobalCLIOptions
	2, // 1: protos.opts.CLIOptions.read:type_name -> protos.opts.ReadOptions
	3, // 2: protos.opts.CLIOptions.write:type_name -> protos.opts.WriteOptions
	4, // 3: protos.opts.CLIOptions.relay:type_name -> protos.opts.RelayOptions
	5, // 4: protos.opts.CLIOptions.tunnel:type_name -> protos.opts.TunnelOptions
	6, // 5: protos.opts.CLIOptions.streamdal:type_name -> protos.opts.StreamdalOptions
	7, // 6: protos.opts.CLIOptions.server:type_name -> protos.opts.ServerOptions
	8, // 7: protos.opts.CLIOptions.manage:type_name -> protos.opts.ManageOptions
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_opts_ps_opts_cli_proto_init() }
func file_opts_ps_opts_cli_proto_init() {
	if File_opts_ps_opts_cli_proto != nil {
		return
	}
	file_opts_ps_opts_manage_proto_init()
	file_opts_ps_opts_read_proto_init()
	file_opts_ps_opts_relay_proto_init()
	file_opts_ps_opts_server_proto_init()
	file_opts_ps_opts_streamdal_proto_init()
	file_opts_ps_opts_tunnel_proto_init()
	file_opts_ps_opts_write_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_opts_ps_opts_cli_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalCLIOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_cli_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CLIOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opts_ps_opts_cli_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opts_ps_opts_cli_proto_goTypes,
		DependencyIndexes: file_opts_ps_opts_cli_proto_depIdxs,
		MessageInfos:      file_opts_ps_opts_cli_proto_msgTypes,
	}.Build()
	File_opts_ps_opts_cli_proto = out.File
	file_opts_ps_opts_cli_proto_rawDesc = nil
	file_opts_ps_opts_cli_proto_goTypes = nil
	file_opts_ps_opts_cli_proto_depIdxs = nil
}
