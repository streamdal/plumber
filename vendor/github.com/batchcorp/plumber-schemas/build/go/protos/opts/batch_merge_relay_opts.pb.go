// Code generated by generate-merge-relay-opts.go. DO NOT EDIT.

package opts

import (
	"errors"
)

func MergeRelayOptions(backend string, relayOpts *RelayOptions, createRelayOpts *CreateRelayOptions) error {
	switch backend {
	case "awssqs":
		relayOpts.AwsSqs = &RelayGroupAWSSQSOptions{Args: createRelayOpts.AwsSqs}
	case "azureservicebus":
		relayOpts.AzureServiceBus = &RelayGroupAzureServiceBusOptions{Args: createRelayOpts.AzureServiceBus}
	case "gcppubsub":
		relayOpts.GcpPubsub = &RelayGroupGCPPubSubOptions{Args: createRelayOpts.GcpPubsub}
	case "kafka":
		relayOpts.Kafka = &RelayGroupKafkaOptions{Args: createRelayOpts.Kafka}
	case "kubemqqueue":
		relayOpts.KubemqQueue = &RelayGroupKubeMQQueueOptions{Args: createRelayOpts.KubemqQueue}
	case "mongo":
		relayOpts.Mongo = &RelayGroupMongoOptions{Args: createRelayOpts.Mongo}
	case "mqtt":
		relayOpts.Mqtt = &RelayGroupMQTTOptions{Args: createRelayOpts.Mqtt}
	case "nats":
		relayOpts.Nats = &RelayGroupNatsOptions{Args: createRelayOpts.Nats}
	case "natsjetstream":
		relayOpts.NatsJetstream = &RelayGroupNatsJetStreamOptions{Args: createRelayOpts.NatsJetstream}
	case "natsstreaming":
		relayOpts.NatsStreaming = &RelayGroupNatsStreamingOptions{Args: createRelayOpts.NatsStreaming}
	case "nsq":
		relayOpts.Nsq = &RelayGroupNSQOptions{Args: createRelayOpts.Nsq}
	case "postgres":
		relayOpts.Postgres = &RelayGroupPostgresOptions{Args: createRelayOpts.Postgres}
	case "rabbit":
		relayOpts.Rabbit = &RelayGroupRabbitOptions{Args: createRelayOpts.Rabbit}
	case "redispubsub":
		relayOpts.RedisPubsub = &RelayGroupRedisPubSubOptions{Args: createRelayOpts.RedisPubsub}
	case "redisstreams":
		relayOpts.RedisStreams = &RelayGroupRedisStreamsOptions{Args: createRelayOpts.RedisStreams}
	default:
		return errors.New("unknown backend")
	}

	return nil
}
