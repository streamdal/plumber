// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: opts/ps_opts_streamdal.proto

package opts

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamdalOutputType int32

const (
	StreamdalOutputType_TABLE StreamdalOutputType = 0
	StreamdalOutputType_JSON  StreamdalOutputType = 1
)

// Enum value maps for StreamdalOutputType.
var (
	StreamdalOutputType_name = map[int32]string{
		0: "TABLE",
		1: "JSON",
	}
	StreamdalOutputType_value = map[string]int32{
		"TABLE": 0,
		"JSON":  1,
	}
)

func (x StreamdalOutputType) Enum() *StreamdalOutputType {
	p := new(StreamdalOutputType)
	*p = x
	return p
}

func (x StreamdalOutputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamdalOutputType) Descriptor() protoreflect.EnumDescriptor {
	return file_opts_ps_opts_streamdal_proto_enumTypes[0].Descriptor()
}

func (StreamdalOutputType) Type() protoreflect.EnumType {
	return &file_opts_ps_opts_streamdal_proto_enumTypes[0]
}

func (x StreamdalOutputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamdalOutputType.Descriptor instead.
func (StreamdalOutputType) EnumDescriptor() ([]byte, []int) {
	return file_opts_ps_opts_streamdal_proto_rawDescGZIP(), []int{0}
}

type StreamdalReplayType int32

const (
	StreamdalReplayType_SINGLE     StreamdalReplayType = 0
	StreamdalReplayType_CONTINUOUS StreamdalReplayType = 1
)

// Enum value maps for StreamdalReplayType.
var (
	StreamdalReplayType_name = map[int32]string{
		0: "SINGLE",
		1: "CONTINUOUS",
	}
	StreamdalReplayType_value = map[string]int32{
		"SINGLE":     0,
		"CONTINUOUS": 1,
	}
)

func (x StreamdalReplayType) Enum() *StreamdalReplayType {
	p := new(StreamdalReplayType)
	*p = x
	return p
}

func (x StreamdalReplayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamdalReplayType) Descriptor() protoreflect.EnumDescriptor {
	return file_opts_ps_opts_streamdal_proto_enumTypes[1].Descriptor()
}

func (StreamdalReplayType) Type() protoreflect.EnumType {
	return &file_opts_ps_opts_streamdal_proto_enumTypes[1]
}

func (x StreamdalReplayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamdalReplayType.Descriptor instead.
func (StreamdalReplayType) EnumDescriptor() ([]byte, []int) {
	return file_opts_ps_opts_streamdal_proto_rawDescGZIP(), []int{1}
}

type StreamdalOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='How to output results (options: table json)',default=table,type=pbenum,pbenum_lowercase"
	OutputType StreamdalOutputType `protobuf:"varint,1,opt,name=output_type,json=outputType,proto3,enum=protos.opts.StreamdalOutputType" json:"output_type,omitempty" kong:"help='How to output results (options: table json)',default=table,type=pbenum,pbenum_lowercase"`
	// @gotags: kong:"help='Alternative URL to use for Streamdal API',default='https://api.streamdal.com'"
	ApiUrl string `protobuf:"bytes,2,opt,name=api_url,json=apiUrl,proto3" json:"api_url,omitempty" kong:"help='Alternative URL to use for Streamdal API',default='https://api.streamdal.com'"`
	// @gotags: kong:"cmd,help='Login to the Streamdal platform'"
	Login *StreamdalLoginOptions `protobuf:"bytes,3,opt,name=login,proto3" json:"login,omitempty" kong:"cmd,help='Login to the Streamdal platform'"`
	// @gotags: kong:"cmd,help='Login to Streamdal'"
	Logout *StreamdalLogoutOptions `protobuf:"bytes,4,opt,name=logout,proto3" json:"logout,omitempty" kong:"cmd,help='Login to Streamdal'"`
	// @gotags: kong:"cmd,help='List Streamdal resources'"
	List *StreamdalListOptions `protobuf:"bytes,5,opt,name=list,proto3" json:"list,omitempty" kong:"cmd,help='List Streamdal resources'"`
	// @gotags: kong:"cmd,help='Create operations'"
	Create *StreamdalCreateOptions `protobuf:"bytes,6,opt,name=create,proto3" json:"create,omitempty" kong:"cmd,help='Create operations'"`
	// @gotags: kong:"cmd,help='Search operations'"
	Search *StreamdalSearchOptions `protobuf:"bytes,7,opt,name=search,proto3" json:"search,omitempty" kong:"cmd,help='Search operations'"`
	// @gotags: kong:"cmd,help='Archive a resource'"
	Archive *StreamdalArchiveOptions `protobuf:"bytes,8,opt,name=archive,proto3" json:"archive,omitempty" kong:"cmd,help='Archive a resource'"`
}

func (x *StreamdalOptions) Reset() {
	*x = StreamdalOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_streamdal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamdalOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamdalOptions) ProtoMessage() {}

func (x *StreamdalOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_streamdal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamdalOptions.ProtoReflect.Descriptor instead.
func (*StreamdalOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_streamdal_proto_rawDescGZIP(), []int{0}
}

func (x *StreamdalOptions) GetOutputType() StreamdalOutputType {
	if x != nil {
		return x.OutputType
	}
	return StreamdalOutputType_TABLE
}

func (x *StreamdalOptions) GetApiUrl() string {
	if x != nil {
		return x.ApiUrl
	}
	return ""
}

func (x *StreamdalOptions) GetLogin() *StreamdalLoginOptions {
	if x != nil {
		return x.Login
	}
	return nil
}

func (x *StreamdalOptions) GetLogout() *StreamdalLogoutOptions {
	if x != nil {
		return x.Logout
	}
	return nil
}

func (x *StreamdalOptions) GetList() *StreamdalListOptions {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *StreamdalOptions) GetCreate() *StreamdalCreateOptions {
	if x != nil {
		return x.Create
	}
	return nil
}

func (x *StreamdalOptions) GetSearch() *StreamdalSearchOptions {
	if x != nil {
		return x.Search
	}
	return nil
}

func (x *StreamdalOptions) GetArchive() *StreamdalArchiveOptions {
	if x != nil {
		return x.Archive
	}
	return nil
}

type StreamdalLoginOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamdalLoginOptions) Reset() {
	*x = StreamdalLoginOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_streamdal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamdalLoginOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamdalLoginOptions) ProtoMessage() {}

func (x *StreamdalLoginOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_streamdal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamdalLoginOptions.ProtoReflect.Descriptor instead.
func (*StreamdalLoginOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_streamdal_proto_rawDescGZIP(), []int{1}
}

type StreamdalLogoutOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamdalLogoutOptions) Reset() {
	*x = StreamdalLogoutOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_streamdal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamdalLogoutOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamdalLogoutOptions) ProtoMessage() {}

func (x *StreamdalLogoutOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_streamdal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamdalLogoutOptions.ProtoReflect.Descriptor instead.
func (*StreamdalLogoutOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_streamdal_proto_rawDescGZIP(), []int{2}
}

type StreamdalListCollectionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamdalListCollectionOptions) Reset() {
	*x = StreamdalListCollectionOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_streamdal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamdalListCollectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamdalListCollectionOptions) ProtoMessage() {}

func (x *StreamdalListCollectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_streamdal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamdalListCollectionOptions.ProtoReflect.Descriptor instead.
func (*StreamdalListCollectionOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_streamdal_proto_rawDescGZIP(), []int{3}
}

type StreamdalListDestinationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamdalListDestinationOptions) Reset() {
	*x = StreamdalListDestinationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_streamdal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamdalListDestinationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamdalListDestinationOptions) ProtoMessage() {}

func (x *StreamdalListDestinationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_streamdal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamdalListDestinationOptions.ProtoReflect.Descriptor instead.
func (*StreamdalListDestinationOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_streamdal_proto_rawDescGZIP(), []int{4}
}

type StreamdalListSchemaOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamdalListSchemaOptions) Reset() {
	*x = StreamdalListSchemaOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_streamdal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamdalListSchemaOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamdalListSchemaOptions) ProtoMessage() {}

func (x *StreamdalListSchemaOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_streamdal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamdalListSchemaOptions.ProtoReflect.Descriptor instead.
func (*StreamdalListSchemaOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_streamdal_proto_rawDescGZIP(), []int{5}
}

type StreamdalListReplayOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamdalListReplayOptions) Reset() {
	*x = StreamdalListReplayOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_streamdal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamdalListReplayOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamdalListReplayOptions) ProtoMessage() {}

func (x *StreamdalListReplayOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_streamdal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamdalListReplayOptions.ProtoReflect.Descriptor instead.
func (*StreamdalListReplayOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_streamdal_proto_rawDescGZIP(), []int{6}
}

type StreamdalArchiveOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed,cmd,help='Archive a replay'"
	Replay *StreamdalArchiveReplayOptions `protobuf:"bytes,1,opt,name=replay,proto3" json:"replay,omitempty" kong:"embed,cmd,help='Archive a replay'"`
}

func (x *StreamdalArchiveOptions) Reset() {
	*x = StreamdalArchiveOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_streamdal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamdalArchiveOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamdalArchiveOptions) ProtoMessage() {}

func (x *StreamdalArchiveOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_streamdal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamdalArchiveOptions.ProtoReflect.Descriptor instead.
func (*StreamdalArchiveOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_streamdal_proto_rawDescGZIP(), []int{7}
}

func (x *StreamdalArchiveOptions) GetReplay() *StreamdalArchiveReplayOptions {
	if x != nil {
		return x.Replay
	}
	return nil
}

type StreamdalArchiveReplayOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='Replay ID to archive',required"
	ReplayId string `protobuf:"bytes,1,opt,name=replay_id,json=replayId,proto3" json:"replay_id,omitempty" kong:"help='Replay ID to archive',required"`
}

func (x *StreamdalArchiveReplayOptions) Reset() {
	*x = StreamdalArchiveReplayOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_streamdal_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamdalArchiveReplayOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamdalArchiveReplayOptions) ProtoMessage() {}

func (x *StreamdalArchiveReplayOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_streamdal_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamdalArchiveReplayOptions.ProtoReflect.Descriptor instead.
func (*StreamdalArchiveReplayOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_streamdal_proto_rawDescGZIP(), []int{8}
}

func (x *StreamdalArchiveReplayOptions) GetReplayId() string {
	if x != nil {
		return x.ReplayId
	}
	return ""
}

type StreamdalListOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"cmd,help='List all collections'"
	Collection *StreamdalListCollectionOptions `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty" kong:"cmd,help='List all collections'"`
	// @gotags: kong:"cmd,help='List all destinations'"
	Destination *StreamdalListDestinationOptions `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty" kong:"cmd,help='List all destinations'"`
	// @gotags: kong:"cmd,help='List all replays'"
	Replay *StreamdalListReplayOptions `protobuf:"bytes,3,opt,name=replay,proto3" json:"replay,omitempty" kong:"cmd,help='List all replays'"`
	// @gotags: kong:"cmd,help='List all schemas'"
	Schema *StreamdalListSchemaOptions `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty" kong:"cmd,help='List all schemas'"`
}

func (x *StreamdalListOptions) Reset() {
	*x = StreamdalListOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_streamdal_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamdalListOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamdalListOptions) ProtoMessage() {}

func (x *StreamdalListOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_streamdal_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamdalListOptions.ProtoReflect.Descriptor instead.
func (*StreamdalListOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_streamdal_proto_rawDescGZIP(), []int{9}
}

func (x *StreamdalListOptions) GetCollection() *StreamdalListCollectionOptions {
	if x != nil {
		return x.Collection
	}
	return nil
}

func (x *StreamdalListOptions) GetDestination() *StreamdalListDestinationOptions {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *StreamdalListOptions) GetReplay() *StreamdalListReplayOptions {
	if x != nil {
		return x.Replay
	}
	return nil
}

func (x *StreamdalListOptions) GetSchema() *StreamdalListSchemaOptions {
	if x != nil {
		return x.Schema
	}
	return nil
}

type StreamdalCreateOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"cmd,help='Create a collection'"
	Collection *StreamdalCreateCollectionOptions `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty" kong:"cmd,help='Create a collection'"`
	// @gotags: kong:"cmd,help='Create a replay'"
	Replay *StreamdalCreateReplayOptions `protobuf:"bytes,2,opt,name=replay,proto3" json:"replay,omitempty" kong:"cmd,help='Create a replay'"`
	// @gotags: kong:"cmd,help='Create a destination'"
	Destination *StreamdalCreateDestinationOptions `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty" kong:"cmd,help='Create a destination'"`
}

func (x *StreamdalCreateOptions) Reset() {
	*x = StreamdalCreateOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_streamdal_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamdalCreateOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamdalCreateOptions) ProtoMessage() {}

func (x *StreamdalCreateOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_streamdal_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamdalCreateOptions.ProtoReflect.Descriptor instead.
func (*StreamdalCreateOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_streamdal_proto_rawDescGZIP(), []int{10}
}

func (x *StreamdalCreateOptions) GetCollection() *StreamdalCreateCollectionOptions {
	if x != nil {
		return x.Collection
	}
	return nil
}

func (x *StreamdalCreateOptions) GetReplay() *StreamdalCreateReplayOptions {
	if x != nil {
		return x.Replay
	}
	return nil
}

func (x *StreamdalCreateOptions) GetDestination() *StreamdalCreateDestinationOptions {
	if x != nil {
		return x.Destination
	}
	return nil
}

type StreamdalSearchOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='Query to perform',default='*'"
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty" kong:"help='Query to perform',default='*'"`
	// @gotags: kong:"help='Collection id to query',required"
	CollectionId string `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty" kong:"help='Collection id to query',required"`
	// @gotags: kong:"help='Which page to display',default=1"
	Page int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty" kong:"help='Which page to display',default=1"`
}

func (x *StreamdalSearchOptions) Reset() {
	*x = StreamdalSearchOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_streamdal_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamdalSearchOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamdalSearchOptions) ProtoMessage() {}

func (x *StreamdalSearchOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_streamdal_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamdalSearchOptions.ProtoReflect.Descriptor instead.
func (*StreamdalSearchOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_streamdal_proto_rawDescGZIP(), []int{11}
}

func (x *StreamdalSearchOptions) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *StreamdalSearchOptions) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *StreamdalSearchOptions) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type StreamdalCreateCollectionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='Friendly name for the collection',required"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" kong:"help='Friendly name for the collection',required"`
	// @gotags: kong:"help='Schema the collection will use (can be obtained running _plumber streamdal list schema_)',required"
	SchemaId string `protobuf:"bytes,2,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty" kong:"help='Schema the collection will use (can be obtained running _plumber streamdal list schema_)',required"`
	// @gotags: kong:"help='Optional notes for the collection'"
	Notes string `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty" kong:"help='Optional notes for the collection'"`
	// @gotags: kong:"help='(Protobuf Schemas Only) Envelope Type (deep or shallow)',default='deep'"
	EnvelopeType string `protobuf:"bytes,4,opt,name=envelope_type,json=envelopeType,proto3" json:"envelope_type,omitempty" kong:"help='(Protobuf Schemas Only) Envelope Type (deep or shallow)',default='deep'"`
	// @gotags: kong:"help='(Protobuf Schemas Only) Envelope Message Name (Ex: events.MessageEnvelope)'"
	EnvelopeRootMessage string `protobuf:"bytes,5,opt,name=envelope_root_message,json=envelopeRootMessage,proto3" json:"envelope_root_message,omitempty" kong:"help='(Protobuf Schemas Only) Envelope Message Name (Ex: events.MessageEnvelope)'"`
	// @gotags: kong:"help='(Shallow Envelope Protobuf Schemas Only) Payload Message Name (Ex: events.ShallowPayload)'"
	PayloadFieldMessage string `protobuf:"bytes,6,opt,name=payload_field_message,json=payloadFieldMessage,proto3" json:"payload_field_message,omitempty" kong:"help='(Shallow Envelope Protobuf Schemas Only) Payload Message Name (Ex: events.ShallowPayload)'"`
	// @gotags: kong:"help='(Shallow Envelope Protobuf Schemas Only) Field ID containing the message encoded with Payload Message'"
	PayloadFieldId string `protobuf:"bytes,7,opt,name=payload_field_id,json=payloadFieldId,proto3" json:"payload_field_id,omitempty" kong:"help='(Shallow Envelope Protobuf Schemas Only) Field ID containing the message encoded with Payload Message'"`
}

func (x *StreamdalCreateCollectionOptions) Reset() {
	*x = StreamdalCreateCollectionOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_streamdal_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamdalCreateCollectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamdalCreateCollectionOptions) ProtoMessage() {}

func (x *StreamdalCreateCollectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_streamdal_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamdalCreateCollectionOptions.ProtoReflect.Descriptor instead.
func (*StreamdalCreateCollectionOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_streamdal_proto_rawDescGZIP(), []int{12}
}

func (x *StreamdalCreateCollectionOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamdalCreateCollectionOptions) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *StreamdalCreateCollectionOptions) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *StreamdalCreateCollectionOptions) GetEnvelopeType() string {
	if x != nil {
		return x.EnvelopeType
	}
	return ""
}

func (x *StreamdalCreateCollectionOptions) GetEnvelopeRootMessage() string {
	if x != nil {
		return x.EnvelopeRootMessage
	}
	return ""
}

func (x *StreamdalCreateCollectionOptions) GetPayloadFieldMessage() string {
	if x != nil {
		return x.PayloadFieldMessage
	}
	return ""
}

func (x *StreamdalCreateCollectionOptions) GetPayloadFieldId() string {
	if x != nil {
		return x.PayloadFieldId
	}
	return ""
}

type StreamdalCreateReplayOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='Friendly name to assign to the replay',required"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" kong:"help='Friendly name to assign to the replay',required"`
	// @gotags: kong:"help='One-time/single or continuous replay (options: single, continuous)',type=pbenum,pbenum_lowercase,default=single"
	Type StreamdalReplayType `protobuf:"varint,2,opt,name=type,proto3,enum=protos.opts.StreamdalReplayType" json:"type,omitempty" kong:"help='One-time/single or continuous replay (options: single, continuous)',type=pbenum,pbenum_lowercase,default=single"`
	// @gotags: kong:"help='Notes to attach to the replay'"
	Notes string `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty" kong:"help='Notes to attach to the replay'"`
	// @gotags: kong:"help='Collection ID to replay from',required"
	CollectionId string `protobuf:"bytes,4,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty" kong:"help='Collection ID to replay from',required"`
	// @gotags: kong:"help='Destination ID to replay to',required"
	DestinationId string `protobuf:"bytes,5,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty" kong:"help='Destination ID to replay to',required"`
	// @gotags: kong:"help='Search query',default='*'"
	Query string `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty" kong:"help='Search query',default='*'"`
	// @gotags: kong:"help='Where to begin search (RFC3339 timestamp)',required"
	FromTimestamp string `protobuf:"bytes,7,opt,name=from_timestamp,json=fromTimestamp,proto3" json:"from_timestamp,omitempty" kong:"help='Where to begin search (RFC3339 timestamp)',required"`
	// @gotags: kong:"help='Where to end search (RFC3339 timestamp)',required"
	ToTimestamp string `protobuf:"bytes,8,opt,name=to_timestamp,json=toTimestamp,proto3" json:"to_timestamp,omitempty" kong:"help='Where to end search (RFC3339 timestamp)',required"`
}

func (x *StreamdalCreateReplayOptions) Reset() {
	*x = StreamdalCreateReplayOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_streamdal_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamdalCreateReplayOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamdalCreateReplayOptions) ProtoMessage() {}

func (x *StreamdalCreateReplayOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_streamdal_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamdalCreateReplayOptions.ProtoReflect.Descriptor instead.
func (*StreamdalCreateReplayOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_streamdal_proto_rawDescGZIP(), []int{13}
}

func (x *StreamdalCreateReplayOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamdalCreateReplayOptions) GetType() StreamdalReplayType {
	if x != nil {
		return x.Type
	}
	return StreamdalReplayType_SINGLE
}

func (x *StreamdalCreateReplayOptions) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *StreamdalCreateReplayOptions) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *StreamdalCreateReplayOptions) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

func (x *StreamdalCreateReplayOptions) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *StreamdalCreateReplayOptions) GetFromTimestamp() string {
	if x != nil {
		return x.FromTimestamp
	}
	return ""
}

func (x *StreamdalCreateReplayOptions) GetToTimestamp() string {
	if x != nil {
		return x.ToTimestamp
	}
	return ""
}

type StreamdalCreateDestinationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='Friendly name to assign to the destination',required"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" kong:"help='Friendly name to assign to the destination',required"`
	// @gotags: kong:"help='Any notes to include with the destination'"
	Notes string `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty" kong:"help='Any notes to include with the destination'"`
	// Used internally by CLI
	// @gotags: kong:"-"
	XApiDestinationType string `protobuf:"bytes,1000,opt,name=_api_destination_type,json=ApiDestinationType,proto3" json:"_api_destination_type,omitempty" kong:"-"`
	// @gotags: kong:"cmd,help='Apache Kafka'"
	Kafka *WriteGroupKafkaOptions `protobuf:"bytes,100,opt,name=kafka,proto3" json:"kafka,omitempty" kong:"cmd,help='Apache Kafka'"`
	// @gotags: kong:"cmd,help='RabbitMQ'"
	Rabbit *WriteGroupRabbitOptions `protobuf:"bytes,101,opt,name=rabbit,proto3" json:"rabbit,omitempty" kong:"cmd,help='RabbitMQ'"`
	// @gotags: kong:"cmd,help='KubeMQ Queue'"
	KubemqQueue *WriteGroupKubeMQQueueOptions `protobuf:"bytes,102,opt,name=kubemq_queue,json=kubemqQueue,proto3" json:"kubemq_queue,omitempty" kong:"cmd,help='KubeMQ Queue'"`
	// @gotags: kong:"cmd,help='AWS Simple Queue System'"
	AwsSqs *WriteGroupAWSSQSOptions `protobuf:"bytes,103,opt,name=aws_sqs,json=awsSqs,proto3" json:"aws_sqs,omitempty" kong:"cmd,help='AWS Simple Queue System'"`
	// @gotags: kong:"cmd,help='HTTP Destination (POST)'"
	Http *HTTPDestination `protobuf:"bytes,104,opt,name=http,proto3" json:"http,omitempty" kong:"cmd,help='HTTP Destination (POST)'"`
}

func (x *StreamdalCreateDestinationOptions) Reset() {
	*x = StreamdalCreateDestinationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_streamdal_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamdalCreateDestinationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamdalCreateDestinationOptions) ProtoMessage() {}

func (x *StreamdalCreateDestinationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_streamdal_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamdalCreateDestinationOptions.ProtoReflect.Descriptor instead.
func (*StreamdalCreateDestinationOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_streamdal_proto_rawDescGZIP(), []int{14}
}

func (x *StreamdalCreateDestinationOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamdalCreateDestinationOptions) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *StreamdalCreateDestinationOptions) GetXApiDestinationType() string {
	if x != nil {
		return x.XApiDestinationType
	}
	return ""
}

func (x *StreamdalCreateDestinationOptions) GetKafka() *WriteGroupKafkaOptions {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *StreamdalCreateDestinationOptions) GetRabbit() *WriteGroupRabbitOptions {
	if x != nil {
		return x.Rabbit
	}
	return nil
}

func (x *StreamdalCreateDestinationOptions) GetKubemqQueue() *WriteGroupKubeMQQueueOptions {
	if x != nil {
		return x.KubemqQueue
	}
	return nil
}

func (x *StreamdalCreateDestinationOptions) GetAwsSqs() *WriteGroupAWSSQSOptions {
	if x != nil {
		return x.AwsSqs
	}
	return nil
}

func (x *StreamdalCreateDestinationOptions) GetHttp() *HTTPDestination {
	if x != nil {
		return x.Http
	}
	return nil
}

type HTTPDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='Full URL to HTTP server (ex: https://example.com/some/path)',required"
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty" kong:"help='Full URL to HTTP server (ex: https://example.com/some/path)',required"`
	// @gotags: kong:"help='Optional map of headers to pass on replay (--headers key1=value1,key2=value2..)'"
	Headers map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" kong:"help='Optional map of headers to pass on replay (--headers key1=value1,key2=value2..)'"`
}

func (x *HTTPDestination) Reset() {
	*x = HTTPDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_streamdal_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPDestination) ProtoMessage() {}

func (x *HTTPDestination) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_streamdal_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPDestination.ProtoReflect.Descriptor instead.
func (*HTTPDestination) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_streamdal_proto_rawDescGZIP(), []int{15}
}

func (x *HTTPDestination) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HTTPDestination) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

var File_opts_ps_opts_streamdal_proto protoreflect.FileDescriptor

var file_opts_ps_opts_streamdal_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6f, 0x70, 0x74, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x1a, 0x18, 0x6f, 0x70, 0x74,
	0x73, 0x2f, 0x70, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x03, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x64, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x61, 0x70, 0x69, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x70, 0x69, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f,
	0x70, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x3b, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x35, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x64, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70,
	0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x3e,
	0x0a, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x22, 0x17,
	0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x64, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x64, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x5d, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a,
	0x06, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x64, 0x61, 0x6c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x22, 0x3c, 0x0a, 0x1d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x22,
	0xb5, 0x02, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x64, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64,
	0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f,
	0x70, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x6f, 0x70, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xfc, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x64, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x6f, 0x70, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x12, 0x50, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61,
	0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x64, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22,
	0xa0, 0x02, 0x0a, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x64, 0x22, 0xaa, 0x02, 0x0a, 0x1c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f,
	0x70, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66,
	0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0xb9, 0x03, 0x0a, 0x21, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x41, 0x70, 0x69, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x3c,
	0x0a, 0x06, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x12, 0x4c, 0x0a, 0x0c,
	0x6b, 0x75, 0x62, 0x65, 0x6d, 0x71, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x75, 0x62, 0x65, 0x4d,
	0x51, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x6b,
	0x75, 0x62, 0x65, 0x6d, 0x71, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x61, 0x77,
	0x73, 0x5f, 0x73, 0x71, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x57, 0x53, 0x53, 0x51, 0x53, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x06, 0x61, 0x77, 0x73, 0x53, 0x71, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x74, 0x74,
	0x70, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x22, 0xa4, 0x01, 0x0a, 0x0f,
	0x48, 0x54, 0x54, 0x50, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x43, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x2a, 0x2a, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x2a, 0x31,
	0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53, 0x10,
	0x01, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opts_ps_opts_streamdal_proto_rawDescOnce sync.Once
	file_opts_ps_opts_streamdal_proto_rawDescData = file_opts_ps_opts_streamdal_proto_rawDesc
)

func file_opts_ps_opts_streamdal_proto_rawDescGZIP() []byte {
	file_opts_ps_opts_streamdal_proto_rawDescOnce.Do(func() {
		file_opts_ps_opts_streamdal_proto_rawDescData = protoimpl.X.CompressGZIP(file_opts_ps_opts_streamdal_proto_rawDescData)
	})
	return file_opts_ps_opts_streamdal_proto_rawDescData
}

var file_opts_ps_opts_streamdal_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_opts_ps_opts_streamdal_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_opts_ps_opts_streamdal_proto_goTypes = []interface{}{
	(StreamdalOutputType)(0),                  // 0: protos.opts.StreamdalOutputType
	(StreamdalReplayType)(0),                  // 1: protos.opts.StreamdalReplayType
	(*StreamdalOptions)(nil),                  // 2: protos.opts.StreamdalOptions
	(*StreamdalLoginOptions)(nil),             // 3: protos.opts.StreamdalLoginOptions
	(*StreamdalLogoutOptions)(nil),            // 4: protos.opts.StreamdalLogoutOptions
	(*StreamdalListCollectionOptions)(nil),    // 5: protos.opts.StreamdalListCollectionOptions
	(*StreamdalListDestinationOptions)(nil),   // 6: protos.opts.StreamdalListDestinationOptions
	(*StreamdalListSchemaOptions)(nil),        // 7: protos.opts.StreamdalListSchemaOptions
	(*StreamdalListReplayOptions)(nil),        // 8: protos.opts.StreamdalListReplayOptions
	(*StreamdalArchiveOptions)(nil),           // 9: protos.opts.StreamdalArchiveOptions
	(*StreamdalArchiveReplayOptions)(nil),     // 10: protos.opts.StreamdalArchiveReplayOptions
	(*StreamdalListOptions)(nil),              // 11: protos.opts.StreamdalListOptions
	(*StreamdalCreateOptions)(nil),            // 12: protos.opts.StreamdalCreateOptions
	(*StreamdalSearchOptions)(nil),            // 13: protos.opts.StreamdalSearchOptions
	(*StreamdalCreateCollectionOptions)(nil),  // 14: protos.opts.StreamdalCreateCollectionOptions
	(*StreamdalCreateReplayOptions)(nil),      // 15: protos.opts.StreamdalCreateReplayOptions
	(*StreamdalCreateDestinationOptions)(nil), // 16: protos.opts.StreamdalCreateDestinationOptions
	(*HTTPDestination)(nil),                   // 17: protos.opts.HTTPDestination
	nil,                                       // 18: protos.opts.HTTPDestination.HeadersEntry
	(*WriteGroupKafkaOptions)(nil),            // 19: protos.opts.WriteGroupKafkaOptions
	(*WriteGroupRabbitOptions)(nil),           // 20: protos.opts.WriteGroupRabbitOptions
	(*WriteGroupKubeMQQueueOptions)(nil),      // 21: protos.opts.WriteGroupKubeMQQueueOptions
	(*WriteGroupAWSSQSOptions)(nil),           // 22: protos.opts.WriteGroupAWSSQSOptions
}
var file_opts_ps_opts_streamdal_proto_depIdxs = []int32{
	0,  // 0: protos.opts.StreamdalOptions.output_type:type_name -> protos.opts.StreamdalOutputType
	3,  // 1: protos.opts.StreamdalOptions.login:type_name -> protos.opts.StreamdalLoginOptions
	4,  // 2: protos.opts.StreamdalOptions.logout:type_name -> protos.opts.StreamdalLogoutOptions
	11, // 3: protos.opts.StreamdalOptions.list:type_name -> protos.opts.StreamdalListOptions
	12, // 4: protos.opts.StreamdalOptions.create:type_name -> protos.opts.StreamdalCreateOptions
	13, // 5: protos.opts.StreamdalOptions.search:type_name -> protos.opts.StreamdalSearchOptions
	9,  // 6: protos.opts.StreamdalOptions.archive:type_name -> protos.opts.StreamdalArchiveOptions
	10, // 7: protos.opts.StreamdalArchiveOptions.replay:type_name -> protos.opts.StreamdalArchiveReplayOptions
	5,  // 8: protos.opts.StreamdalListOptions.collection:type_name -> protos.opts.StreamdalListCollectionOptions
	6,  // 9: protos.opts.StreamdalListOptions.destination:type_name -> protos.opts.StreamdalListDestinationOptions
	8,  // 10: protos.opts.StreamdalListOptions.replay:type_name -> protos.opts.StreamdalListReplayOptions
	7,  // 11: protos.opts.StreamdalListOptions.schema:type_name -> protos.opts.StreamdalListSchemaOptions
	14, // 12: protos.opts.StreamdalCreateOptions.collection:type_name -> protos.opts.StreamdalCreateCollectionOptions
	15, // 13: protos.opts.StreamdalCreateOptions.replay:type_name -> protos.opts.StreamdalCreateReplayOptions
	16, // 14: protos.opts.StreamdalCreateOptions.destination:type_name -> protos.opts.StreamdalCreateDestinationOptions
	1,  // 15: protos.opts.StreamdalCreateReplayOptions.type:type_name -> protos.opts.StreamdalReplayType
	19, // 16: protos.opts.StreamdalCreateDestinationOptions.kafka:type_name -> protos.opts.WriteGroupKafkaOptions
	20, // 17: protos.opts.StreamdalCreateDestinationOptions.rabbit:type_name -> protos.opts.WriteGroupRabbitOptions
	21, // 18: protos.opts.StreamdalCreateDestinationOptions.kubemq_queue:type_name -> protos.opts.WriteGroupKubeMQQueueOptions
	22, // 19: protos.opts.StreamdalCreateDestinationOptions.aws_sqs:type_name -> protos.opts.WriteGroupAWSSQSOptions
	17, // 20: protos.opts.StreamdalCreateDestinationOptions.http:type_name -> protos.opts.HTTPDestination
	18, // 21: protos.opts.HTTPDestination.headers:type_name -> protos.opts.HTTPDestination.HeadersEntry
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_opts_ps_opts_streamdal_proto_init() }
func file_opts_ps_opts_streamdal_proto_init() {
	if File_opts_ps_opts_streamdal_proto != nil {
		return
	}
	file_opts_ps_opts_write_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_opts_ps_opts_streamdal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamdalOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_streamdal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamdalLoginOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_streamdal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamdalLogoutOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_streamdal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamdalListCollectionOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_streamdal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamdalListDestinationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_streamdal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamdalListSchemaOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_streamdal_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamdalListReplayOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_streamdal_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamdalArchiveOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_streamdal_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamdalArchiveReplayOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_streamdal_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamdalListOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_streamdal_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamdalCreateOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_streamdal_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamdalSearchOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_streamdal_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamdalCreateCollectionOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_streamdal_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamdalCreateReplayOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_streamdal_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamdalCreateDestinationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_streamdal_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opts_ps_opts_streamdal_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opts_ps_opts_streamdal_proto_goTypes,
		DependencyIndexes: file_opts_ps_opts_streamdal_proto_depIdxs,
		EnumInfos:         file_opts_ps_opts_streamdal_proto_enumTypes,
		MessageInfos:      file_opts_ps_opts_streamdal_proto_msgTypes,
	}.Build()
	File_opts_ps_opts_streamdal_proto = out.File
	file_opts_ps_opts_streamdal_proto_rawDesc = nil
	file_opts_ps_opts_streamdal_proto_goTypes = nil
	file_opts_ps_opts_streamdal_proto_depIdxs = nil
}
