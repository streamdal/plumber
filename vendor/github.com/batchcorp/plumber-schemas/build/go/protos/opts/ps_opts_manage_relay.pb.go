// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: opts/ps_opts_manage_relay.proto

package opts

import (
	args "github.com/batchcorp/plumber-schemas/build/go/protos/args"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetRelayOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='ID of the relay to get (leave empty to get all)'"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" kong:"help='ID of the relay to get (leave empty to get all)'"`
}

func (x *GetRelayOptions) Reset() {
	*x = GetRelayOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_manage_relay_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelayOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelayOptions) ProtoMessage() {}

func (x *GetRelayOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_manage_relay_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelayOptions.ProtoReflect.Descriptor instead.
func (*GetRelayOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_manage_relay_proto_rawDescGZIP(), []int{0}
}

func (x *GetRelayOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateRelayOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='ID of the connection to use',required"
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" kong:"help='ID of the connection to use',required"`
	// @gotags: kong:"help='Secret collection token',required"
	CollectionToken string `protobuf:"bytes,2,opt,name=collection_token,json=collectionToken,proto3" json:"collection_token,omitempty" kong:"help='Secret collection token',required"`
	// @gotags: kong:"help='How many messages to send in a single batch',default=1000"
	BatchSize int32 `protobuf:"varint,3,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty" kong:"help='How many messages to send in a single batch',default=1000"`
	// @gotags: kong:"help='How many times plumber will try re-sending a batch',default=3"
	BatchMaxRetry int32 `protobuf:"varint,4,opt,name=batch_max_retry,json=batchMaxRetry,proto3" json:"batch_max_retry,omitempty" kong:"help='How many times plumber will try re-sending a batch',default=3"`
	// @gotags: kong:"help='How many workers to launch per relay',default=10"
	NumWorkers int32 `protobuf:"varint,5,opt,name=num_workers,json=numWorkers,proto3" json:"num_workers,omitempty" kong:"help='How many workers to launch per relay',default=10"`
	// @gotags: kong:"help='Alternative collector to relay events to',default='grpc-collector.streamdal.com:9000'"
	StreamdalGrpcAddress string `protobuf:"bytes,6,opt,name=streamdal_grpc_address,json=streamdalGrpcAddress,proto3" json:"streamdal_grpc_address,omitempty" kong:"help='Alternative collector to relay events to',default='grpc-collector.streamdal.com:9000'"`
	// @gotags: kong:"help='Whether to use TLS with collector'"
	StreamdalGrpcDisableTls bool `protobuf:"varint,7,opt,name=streamdal_grpc_disable_tls,json=streamdalGrpcDisableTls,proto3" json:"streamdal_grpc_disable_tls,omitempty" kong:"help='Whether to use TLS with collector'"`
	// @gotags: kong:"help='How long to wait before giving up talking to the gRPC collector',default=5"
	StreamdalGrpcTimeoutSeconds int32 `protobuf:"varint,8,opt,name=streamdal_grpc_timeout_seconds,json=streamdalGrpcTimeoutSeconds,proto3" json:"streamdal_grpc_timeout_seconds,omitempty" kong:"help='How long to wait before giving up talking to the gRPC collector',default=5"`
	// @gotags: kong:"help='Consumed messages are intended to be dead-lettered'"
	DeadLetter bool `protobuf:"varint,9,opt,name=dead_letter,json=deadLetter,proto3" json:"dead_letter,omitempty" kong:"help='Consumed messages are intended to be dead-lettered'"`
	// @gotags: kong:"cmd,help='Apache Kafka'"
	Kafka *args.KafkaRelayArgs `protobuf:"bytes,100,opt,name=kafka,proto3" json:"kafka,omitempty" kong:"cmd,help='Apache Kafka'"`
	// @gotags: kong:"cmd,help='AWS Simple Queue System'"
	AwsSqs *args.AWSSQSRelayArgs `protobuf:"bytes,101,opt,name=aws_sqs,json=awsSqs,proto3" json:"aws_sqs,omitempty" kong:"cmd,help='AWS Simple Queue System'"`
	// @gotags: kong:"cmd,help='MongoDB (CDC)'"
	Mongo *args.MongoReadArgs `protobuf:"bytes,102,opt,name=mongo,proto3" json:"mongo,omitempty" kong:"cmd,help='MongoDB (CDC)'"`
	// @gotags: kong:"cmd,help='NSQ'"
	Nsq *args.NSQReadArgs `protobuf:"bytes,103,opt,name=nsq,proto3" json:"nsq,omitempty" kong:"cmd,help='NSQ'"`
	// @gotags: kong:"cmd,help='MQTT'"
	Rabbit *args.RabbitReadArgs `protobuf:"bytes,104,opt,name=rabbit,proto3" json:"rabbit,omitempty" kong:"cmd,help='MQTT'"`
	// @gotags: kong:"cmd,help='MQTT'"
	Mqtt *args.MQTTReadArgs `protobuf:"bytes,105,opt,name=mqtt,proto3" json:"mqtt,omitempty" kong:"cmd,help='MQTT'"`
	// @gotags: kong:"cmd,help='Azure Service Bus'"
	AzureServiceBus *args.AzureServiceBusReadArgs `protobuf:"bytes,106,opt,name=azure_service_bus,json=azureServiceBus,proto3" json:"azure_service_bus,omitempty" kong:"cmd,help='Azure Service Bus'"`
	// @gotags: kong:"cmd,help='Google Cloud Platform Pub/Sub'"
	GcpPubsub *args.GCPPubSubReadArgs `protobuf:"bytes,107,opt,name=gcp_pubsub,json=gcpPubsub,proto3" json:"gcp_pubsub,omitempty" kong:"cmd,help='Google Cloud Platform Pub/Sub'"`
	// @gotags: kong:"cmd,help='KubeMQ Queue'"
	KubemqQueue *args.KubeMQQueueReadArgs `protobuf:"bytes,108,opt,name=kubemq_queue,json=kubemqQueue,proto3" json:"kubemq_queue,omitempty" kong:"cmd,help='KubeMQ Queue'"`
	// @gotags: kong:"cmd,help='Redis PubSub'"
	RedisPubsub *args.RedisPubSubReadArgs `protobuf:"bytes,109,opt,name=redis_pubsub,json=redisPubsub,proto3" json:"redis_pubsub,omitempty" kong:"cmd,help='Redis PubSub'"`
	// @gotags: kong:"cmd,help='Redis Streams'"
	RedisStreams *args.RedisStreamsReadArgs `protobuf:"bytes,111,opt,name=redis_streams,json=redisStreams,proto3" json:"redis_streams,omitempty" kong:"cmd,help='Redis Streams'"`
	// @gotags: kong:"cmd,help='PostgreSQL (CDC)'"
	Postgres *args.PostgresReadArgs `protobuf:"bytes,112,opt,name=postgres,proto3" json:"postgres,omitempty" kong:"cmd,help='PostgreSQL (CDC)'"`
	// @gotags: kong:"cmd,help='NATS'"
	Nats *args.NatsReadArgs `protobuf:"bytes,113,opt,name=nats,proto3" json:"nats,omitempty" kong:"cmd,help='NATS'"`
	// @gotags: kong:"cmd,help='NATS Streaming'"
	NatsStreaming *args.NatsStreamingReadArgs `protobuf:"bytes,114,opt,name=nats_streaming,json=natsStreaming,proto3" json:"nats_streaming,omitempty" kong:"cmd,help='NATS Streaming'"`
	// @gotags: kong:"cmd,help='NATS JetStream'"
	NatsJetstream *args.NatsJetstreamReadArgs `protobuf:"bytes,115,opt,name=nats_jetstream,json=natsJetstream,proto3" json:"nats_jetstream,omitempty" kong:"cmd,help='NATS JetStream'"`
}

func (x *CreateRelayOptions) Reset() {
	*x = CreateRelayOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_manage_relay_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRelayOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRelayOptions) ProtoMessage() {}

func (x *CreateRelayOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_manage_relay_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRelayOptions.ProtoReflect.Descriptor instead.
func (*CreateRelayOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_manage_relay_proto_rawDescGZIP(), []int{1}
}

func (x *CreateRelayOptions) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *CreateRelayOptions) GetCollectionToken() string {
	if x != nil {
		return x.CollectionToken
	}
	return ""
}

func (x *CreateRelayOptions) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *CreateRelayOptions) GetBatchMaxRetry() int32 {
	if x != nil {
		return x.BatchMaxRetry
	}
	return 0
}

func (x *CreateRelayOptions) GetNumWorkers() int32 {
	if x != nil {
		return x.NumWorkers
	}
	return 0
}

func (x *CreateRelayOptions) GetStreamdalGrpcAddress() string {
	if x != nil {
		return x.StreamdalGrpcAddress
	}
	return ""
}

func (x *CreateRelayOptions) GetStreamdalGrpcDisableTls() bool {
	if x != nil {
		return x.StreamdalGrpcDisableTls
	}
	return false
}

func (x *CreateRelayOptions) GetStreamdalGrpcTimeoutSeconds() int32 {
	if x != nil {
		return x.StreamdalGrpcTimeoutSeconds
	}
	return 0
}

func (x *CreateRelayOptions) GetDeadLetter() bool {
	if x != nil {
		return x.DeadLetter
	}
	return false
}

func (x *CreateRelayOptions) GetKafka() *args.KafkaRelayArgs {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *CreateRelayOptions) GetAwsSqs() *args.AWSSQSRelayArgs {
	if x != nil {
		return x.AwsSqs
	}
	return nil
}

func (x *CreateRelayOptions) GetMongo() *args.MongoReadArgs {
	if x != nil {
		return x.Mongo
	}
	return nil
}

func (x *CreateRelayOptions) GetNsq() *args.NSQReadArgs {
	if x != nil {
		return x.Nsq
	}
	return nil
}

func (x *CreateRelayOptions) GetRabbit() *args.RabbitReadArgs {
	if x != nil {
		return x.Rabbit
	}
	return nil
}

func (x *CreateRelayOptions) GetMqtt() *args.MQTTReadArgs {
	if x != nil {
		return x.Mqtt
	}
	return nil
}

func (x *CreateRelayOptions) GetAzureServiceBus() *args.AzureServiceBusReadArgs {
	if x != nil {
		return x.AzureServiceBus
	}
	return nil
}

func (x *CreateRelayOptions) GetGcpPubsub() *args.GCPPubSubReadArgs {
	if x != nil {
		return x.GcpPubsub
	}
	return nil
}

func (x *CreateRelayOptions) GetKubemqQueue() *args.KubeMQQueueReadArgs {
	if x != nil {
		return x.KubemqQueue
	}
	return nil
}

func (x *CreateRelayOptions) GetRedisPubsub() *args.RedisPubSubReadArgs {
	if x != nil {
		return x.RedisPubsub
	}
	return nil
}

func (x *CreateRelayOptions) GetRedisStreams() *args.RedisStreamsReadArgs {
	if x != nil {
		return x.RedisStreams
	}
	return nil
}

func (x *CreateRelayOptions) GetPostgres() *args.PostgresReadArgs {
	if x != nil {
		return x.Postgres
	}
	return nil
}

func (x *CreateRelayOptions) GetNats() *args.NatsReadArgs {
	if x != nil {
		return x.Nats
	}
	return nil
}

func (x *CreateRelayOptions) GetNatsStreaming() *args.NatsStreamingReadArgs {
	if x != nil {
		return x.NatsStreaming
	}
	return nil
}

func (x *CreateRelayOptions) GetNatsJetstream() *args.NatsJetstreamReadArgs {
	if x != nil {
		return x.NatsJetstream
	}
	return nil
}

type DeleteRelayOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='ID of the relay to delete',required=true"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" kong:"help='ID of the relay to delete',required=true"`
}

func (x *DeleteRelayOptions) Reset() {
	*x = DeleteRelayOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_manage_relay_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRelayOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRelayOptions) ProtoMessage() {}

func (x *DeleteRelayOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_manage_relay_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRelayOptions.ProtoReflect.Descriptor instead.
func (*DeleteRelayOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_manage_relay_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteRelayOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StopRelayOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='ID of the relay to stop',required=true"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" kong:"help='ID of the relay to stop',required=true"`
}

func (x *StopRelayOptions) Reset() {
	*x = StopRelayOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_manage_relay_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRelayOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRelayOptions) ProtoMessage() {}

func (x *StopRelayOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_manage_relay_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRelayOptions.ProtoReflect.Descriptor instead.
func (*StopRelayOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_manage_relay_proto_rawDescGZIP(), []int{3}
}

func (x *StopRelayOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ResumeRelayOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='ID of the relay to resume',required=true"
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" kong:"help='ID of the relay to resume',required=true"`
}

func (x *ResumeRelayOptions) Reset() {
	*x = ResumeRelayOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_manage_relay_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResumeRelayOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeRelayOptions) ProtoMessage() {}

func (x *ResumeRelayOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_manage_relay_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeRelayOptions.ProtoReflect.Descriptor instead.
func (*ResumeRelayOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_manage_relay_proto_rawDescGZIP(), []int{4}
}

func (x *ResumeRelayOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_opts_ps_opts_manage_relay_proto protoreflect.FileDescriptor

var file_opts_ps_opts_manage_relay_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6f, 0x70, 0x74, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x1a, 0x1a,
	0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x61, 0x77, 0x73,
	0x5f, 0x73, 0x71, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x61, 0x72, 0x67, 0x73,
	0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1d, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x67,
	0x63, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x61, 0x72, 0x67, 0x73, 0x2f,
	0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x6d, 0x71, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x72, 0x67, 0x73,
	0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61,
	0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f,
	0x61, 0x72, 0x67, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x6a, 0x65, 0x74, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x61, 0x72, 0x67, 0x73, 0x2f,
	0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x72,
	0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6e, 0x73, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f,
	0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x61, 0x72,
	0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x61,
	0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x69,
	0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xb4, 0x0a, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x5f, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x64, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x47, 0x72, 0x70, 0x63, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x6c, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61,
	0x6c, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x47, 0x72, 0x70, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x61,
	0x64, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x64, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x05, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x41, 0x72, 0x67, 0x73, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x35, 0x0a,
	0x07, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x71, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x57, 0x53,
	0x53, 0x51, 0x53, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x67, 0x73, 0x52, 0x06, 0x61, 0x77,
	0x73, 0x53, 0x71, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67,
	0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52,
	0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x12, 0x2a, 0x0a, 0x03, 0x6e, 0x73, 0x71, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67,
	0x73, 0x2e, 0x4e, 0x53, 0x51, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x03, 0x6e,
	0x73, 0x71, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x18, 0x68, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73,
	0x2e, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52,
	0x06, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x18,
	0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61,
	0x72, 0x67, 0x73, 0x2e, 0x4d, 0x51, 0x54, 0x54, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73,
	0x52, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e,
	0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x73, 0x52,
	0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x0f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x67, 0x63, 0x70, 0x5f,
	0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x47, 0x43, 0x50, 0x50, 0x75,
	0x62, 0x53, 0x75, 0x62, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x09, 0x67, 0x63,
	0x70, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x12, 0x43, 0x0a, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x6d,
	0x71, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x4d, 0x51, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52,
	0x0b, 0x6b, 0x75, 0x62, 0x65, 0x6d, 0x71, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x0c,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x18, 0x6d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73,
	0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x52, 0x65, 0x61, 0x64,
	0x41, 0x72, 0x67, 0x73, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x73, 0x50, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x12, 0x46, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x6e, 0x61, 0x74, 0x73, 0x18, 0x71, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73,
	0x2e, 0x4e, 0x61, 0x74, 0x73, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x6e,
	0x61, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x0e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52,
	0x0d, 0x6e, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x49,
	0x0a, 0x0e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x6a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x0d, 0x6e, 0x61, 0x74, 0x73,
	0x4a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x24, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x22, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x63, 0x6f, 0x72,
	0x70, 0x2f, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x6f, 0x70, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opts_ps_opts_manage_relay_proto_rawDescOnce sync.Once
	file_opts_ps_opts_manage_relay_proto_rawDescData = file_opts_ps_opts_manage_relay_proto_rawDesc
)

func file_opts_ps_opts_manage_relay_proto_rawDescGZIP() []byte {
	file_opts_ps_opts_manage_relay_proto_rawDescOnce.Do(func() {
		file_opts_ps_opts_manage_relay_proto_rawDescData = protoimpl.X.CompressGZIP(file_opts_ps_opts_manage_relay_proto_rawDescData)
	})
	return file_opts_ps_opts_manage_relay_proto_rawDescData
}

var file_opts_ps_opts_manage_relay_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_opts_ps_opts_manage_relay_proto_goTypes = []interface{}{
	(*GetRelayOptions)(nil),              // 0: protos.opts.GetRelayOptions
	(*CreateRelayOptions)(nil),           // 1: protos.opts.CreateRelayOptions
	(*DeleteRelayOptions)(nil),           // 2: protos.opts.DeleteRelayOptions
	(*StopRelayOptions)(nil),             // 3: protos.opts.StopRelayOptions
	(*ResumeRelayOptions)(nil),           // 4: protos.opts.ResumeRelayOptions
	(*args.KafkaRelayArgs)(nil),          // 5: protos.args.KafkaRelayArgs
	(*args.AWSSQSRelayArgs)(nil),         // 6: protos.args.AWSSQSRelayArgs
	(*args.MongoReadArgs)(nil),           // 7: protos.args.MongoReadArgs
	(*args.NSQReadArgs)(nil),             // 8: protos.args.NSQReadArgs
	(*args.RabbitReadArgs)(nil),          // 9: protos.args.RabbitReadArgs
	(*args.MQTTReadArgs)(nil),            // 10: protos.args.MQTTReadArgs
	(*args.AzureServiceBusReadArgs)(nil), // 11: protos.args.AzureServiceBusReadArgs
	(*args.GCPPubSubReadArgs)(nil),       // 12: protos.args.GCPPubSubReadArgs
	(*args.KubeMQQueueReadArgs)(nil),     // 13: protos.args.KubeMQQueueReadArgs
	(*args.RedisPubSubReadArgs)(nil),     // 14: protos.args.RedisPubSubReadArgs
	(*args.RedisStreamsReadArgs)(nil),    // 15: protos.args.RedisStreamsReadArgs
	(*args.PostgresReadArgs)(nil),        // 16: protos.args.PostgresReadArgs
	(*args.NatsReadArgs)(nil),            // 17: protos.args.NatsReadArgs
	(*args.NatsStreamingReadArgs)(nil),   // 18: protos.args.NatsStreamingReadArgs
	(*args.NatsJetstreamReadArgs)(nil),   // 19: protos.args.NatsJetstreamReadArgs
}
var file_opts_ps_opts_manage_relay_proto_depIdxs = []int32{
	5,  // 0: protos.opts.CreateRelayOptions.kafka:type_name -> protos.args.KafkaRelayArgs
	6,  // 1: protos.opts.CreateRelayOptions.aws_sqs:type_name -> protos.args.AWSSQSRelayArgs
	7,  // 2: protos.opts.CreateRelayOptions.mongo:type_name -> protos.args.MongoReadArgs
	8,  // 3: protos.opts.CreateRelayOptions.nsq:type_name -> protos.args.NSQReadArgs
	9,  // 4: protos.opts.CreateRelayOptions.rabbit:type_name -> protos.args.RabbitReadArgs
	10, // 5: protos.opts.CreateRelayOptions.mqtt:type_name -> protos.args.MQTTReadArgs
	11, // 6: protos.opts.CreateRelayOptions.azure_service_bus:type_name -> protos.args.AzureServiceBusReadArgs
	12, // 7: protos.opts.CreateRelayOptions.gcp_pubsub:type_name -> protos.args.GCPPubSubReadArgs
	13, // 8: protos.opts.CreateRelayOptions.kubemq_queue:type_name -> protos.args.KubeMQQueueReadArgs
	14, // 9: protos.opts.CreateRelayOptions.redis_pubsub:type_name -> protos.args.RedisPubSubReadArgs
	15, // 10: protos.opts.CreateRelayOptions.redis_streams:type_name -> protos.args.RedisStreamsReadArgs
	16, // 11: protos.opts.CreateRelayOptions.postgres:type_name -> protos.args.PostgresReadArgs
	17, // 12: protos.opts.CreateRelayOptions.nats:type_name -> protos.args.NatsReadArgs
	18, // 13: protos.opts.CreateRelayOptions.nats_streaming:type_name -> protos.args.NatsStreamingReadArgs
	19, // 14: protos.opts.CreateRelayOptions.nats_jetstream:type_name -> protos.args.NatsJetstreamReadArgs
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_opts_ps_opts_manage_relay_proto_init() }
func file_opts_ps_opts_manage_relay_proto_init() {
	if File_opts_ps_opts_manage_relay_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_opts_ps_opts_manage_relay_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelayOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_manage_relay_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRelayOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_manage_relay_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRelayOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_manage_relay_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRelayOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_manage_relay_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResumeRelayOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opts_ps_opts_manage_relay_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opts_ps_opts_manage_relay_proto_goTypes,
		DependencyIndexes: file_opts_ps_opts_manage_relay_proto_depIdxs,
		MessageInfos:      file_opts_ps_opts_manage_relay_proto_msgTypes,
	}.Build()
	File_opts_ps_opts_manage_relay_proto = out.File
	file_opts_ps_opts_manage_relay_proto_rawDesc = nil
	file_opts_ps_opts_manage_relay_proto_goTypes = nil
	file_opts_ps_opts_manage_relay_proto_depIdxs = nil
}
