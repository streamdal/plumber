// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: opts/ps_opts_tunnel.proto

package opts

import (
	args "github.com/batchcorp/plumber-schemas/build/go/protos/args"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TunnelOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='API token to use for tunnel (create here: https://console.streamdal.com/account/security)',required"
	ApiToken string `protobuf:"bytes,1,opt,name=api_token,json=apiToken,proto3" json:"api_token,omitempty" kong:"help='API token to use for tunnel (create here: https://console.streamdal.com/account/security)',required"`
	// @gotags: kong:"-"
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" kong:"-"`
	// @gotags: kong:"help='Tunnel API address',default='dproxy.streamdal.com:443'"
	XGrpcAddress string `protobuf:"bytes,3,opt,name=_grpc_address,json=GrpcAddress,proto3" json:"_grpc_address,omitempty" kong:"help='Tunnel API address',default='dproxy.streamdal.com:443'"`
	// @gotags: kong:"help='Tunnel API initial connection timeout',default=5"
	XGrpcTimeoutSeconds uint32 `protobuf:"varint,4,opt,name=_grpc_timeout_seconds,json=GrpcTimeoutSeconds,proto3" json:"_grpc_timeout_seconds,omitempty" kong:"help='Tunnel API initial connection timeout',default=5"`
	// @gotags: kong:"help='Use gRPC insecure mode when talking to Streamdal'"
	XGrpcInsecure bool `protobuf:"varint,5,opt,name=_grpc_insecure,json=GrpcInsecure,proto3" json:"_grpc_insecure,omitempty" kong:"help='Use gRPC insecure mode when talking to Streamdal'"`
	// Optional for server and CLI
	// NOTE: CLI-based tunnels will be treated as ephemeral.
	// @gotags: kong:"help='Name to identify tunnel in Streamdal console. If omitted, your IP address will be used'"
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty" kong:"help='Name to identify tunnel in Streamdal console. If omitted, your IP address will be used'"`
	// ID of the created tunnel; populated by plumber.
	// @gotags: kong:"-"
	XTunnelId string `protobuf:"bytes,1000,opt,name=_tunnel_id,json=TunnelId,proto3" json:"_tunnel_id,omitempty" kong:"-"`
	// Set by CreateTunnel() StopTunnel() and ResumeTunnel() methods in Plumber
	// @gotags: kong:"-"
	XActive bool `protobuf:"varint,1001,opt,name=_active,json=Active,proto3" json:"_active,omitempty" kong:"-"`
	// @gotags: kong:"cmd,help='Apache Kafka'"
	Kafka *TunnelGroupKafkaOptions `protobuf:"bytes,100,opt,name=kafka,proto3" json:"kafka,omitempty" kong:"cmd,help='Apache Kafka'"`
	// @gotags: kong:"cmd,help='Apache ActiveMQ'"
	Activemq *TunnelGroupActiveMQOptions `protobuf:"bytes,101,opt,name=activemq,proto3" json:"activemq,omitempty" kong:"cmd,help='Apache ActiveMQ'"`
	// @gotags: kong:"cmd,help='AWS Simple Queue System'"
	AwsSqs *TunnelGroupAWSSQSOptions `protobuf:"bytes,102,opt,name=aws_sqs,json=awsSqs,proto3" json:"aws_sqs,omitempty" kong:"cmd,help='AWS Simple Queue System'"`
	// @gotags: kong:"cmd,help='AWS Simple Notification System'"
	AwsSns *TunnelGroupAWSSNSOptions `protobuf:"bytes,103,opt,name=aws_sns,json=awsSns,proto3" json:"aws_sns,omitempty" kong:"cmd,help='AWS Simple Notification System'"`
	// @gotags: kong:"cmd,help='NATS'"
	Nats *TunnelGroupNatsOptions `protobuf:"bytes,104,opt,name=nats,proto3" json:"nats,omitempty" kong:"cmd,help='NATS'"`
	// @gotags: kong:"cmd,help='NATS Streaming'"
	NatsStreaming *TunnelGroupNatsStreamingOptions `protobuf:"bytes,105,opt,name=nats_streaming,json=natsStreaming,proto3" json:"nats_streaming,omitempty" kong:"cmd,help='NATS Streaming'"`
	// @gotags: kong:"cmd,help='NSQ'"
	Nsq *TunnelGroupNSQOptions `protobuf:"bytes,106,opt,name=nsq,proto3" json:"nsq,omitempty" kong:"cmd,help='NSQ'"`
	// @gotags: kong:"cmd,help='RabbitMQ'"
	Rabbit *TunnelGroupRabbitOptions `protobuf:"bytes,107,opt,name=rabbit,proto3" json:"rabbit,omitempty" kong:"cmd,help='RabbitMQ'"`
	// @gotags: kong:"cmd,help='MQTT'"
	Mqtt *TunnelGroupMQTTOptions `protobuf:"bytes,108,opt,name=mqtt,proto3" json:"mqtt,omitempty" kong:"cmd,help='MQTT'"`
	// @gotags: kong:"cmd,help='Azure Service Bus'"
	AzureServiceBus *TunnelGroupAzureServiceBusOptions `protobuf:"bytes,109,opt,name=azure_service_bus,json=azureServiceBus,proto3" json:"azure_service_bus,omitempty" kong:"cmd,help='Azure Service Bus'"`
	// @gotags: kong:"cmd,help='Azure Event Hub'"
	AzureEventHub *TunnelGroupAzureEventHubOptions `protobuf:"bytes,110,opt,name=azure_event_hub,json=azureEventHub,proto3" json:"azure_event_hub,omitempty" kong:"cmd,help='Azure Event Hub'"`
	// @gotags: kong:"cmd,help='Google Cloud Platform Pub/Sub'"
	GcpPubsub *TunnelGroupGCPPubSubOptions `protobuf:"bytes,111,opt,name=gcp_pubsub,json=gcpPubsub,proto3" json:"gcp_pubsub,omitempty" kong:"cmd,help='Google Cloud Platform Pub/Sub'"`
	// @gotags: kong:"cmd,help='KubeMQ Queue'"
	KubemqQueue *TunnelGroupKubeMQQueueOptions `protobuf:"bytes,112,opt,name=kubemq_queue,json=kubemqQueue,proto3" json:"kubemq_queue,omitempty" kong:"cmd,help='KubeMQ Queue'"`
	// @gotags: kong:"cmd,help='Redis PubSub'"
	RedisPubsub *TunnelGroupRedisPubSubOptions `protobuf:"bytes,113,opt,name=redis_pubsub,json=redisPubsub,proto3" json:"redis_pubsub,omitempty" kong:"cmd,help='Redis PubSub'"`
	// @gotags: kong:"cmd,help='Redis Streams'"
	RedisStreams *TunnelGroupRedisStreamsOptions `protobuf:"bytes,114,opt,name=redis_streams,json=redisStreams,proto3" json:"redis_streams,omitempty" kong:"cmd,help='Redis Streams'"`
	// @gotags: kong:"cmd,help='Apache Pulsar'"
	Pulsar *TunnelGroupPulsarOptions `protobuf:"bytes,115,opt,name=pulsar,proto3" json:"pulsar,omitempty" kong:"cmd,help='Apache Pulsar'"`
	// @gotags: kong:"cmd,help='RabbitMQ Streams'"
	RabbitStreams *TunnelGroupRabbitStreamsOptions `protobuf:"bytes,116,opt,name=rabbit_streams,json=rabbitStreams,proto3" json:"rabbit_streams,omitempty" kong:"cmd,help='RabbitMQ Streams'"`
	// @gotags: kong:"cmd,help='NATS JetStream'"
	NatsJetstream *TunnelGroupNatsJetstreamOptions `protobuf:"bytes,117,opt,name=nats_jetstream,json=natsJetstream,proto3" json:"nats_jetstream,omitempty" kong:"cmd,help='NATS JetStream'"`
	// @gotags: kong:"cmd,help='AWS Kinesis Streams'"
	AwsKinesis *TunnelGroupAWSKinesisOptions `protobuf:"bytes,118,opt,name=aws_kinesis,json=awsKinesis,proto3" json:"aws_kinesis,omitempty" kong:"cmd,help='AWS Kinesis Streams'"`
	// @gotags: kong:"cmd,help='Memphis'"
	Memphis *TunnelGroupMemphisOptions `protobuf:"bytes,119,opt,name=memphis,proto3" json:"memphis,omitempty" kong:"cmd,help='Memphis'"`
}

func (x *TunnelOptions) Reset() {
	*x = TunnelOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_tunnel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelOptions) ProtoMessage() {}

func (x *TunnelOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_tunnel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelOptions.ProtoReflect.Descriptor instead.
func (*TunnelOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_tunnel_proto_rawDescGZIP(), []int{0}
}

func (x *TunnelOptions) GetApiToken() string {
	if x != nil {
		return x.ApiToken
	}
	return ""
}

func (x *TunnelOptions) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *TunnelOptions) GetXGrpcAddress() string {
	if x != nil {
		return x.XGrpcAddress
	}
	return ""
}

func (x *TunnelOptions) GetXGrpcTimeoutSeconds() uint32 {
	if x != nil {
		return x.XGrpcTimeoutSeconds
	}
	return 0
}

func (x *TunnelOptions) GetXGrpcInsecure() bool {
	if x != nil {
		return x.XGrpcInsecure
	}
	return false
}

func (x *TunnelOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TunnelOptions) GetXTunnelId() string {
	if x != nil {
		return x.XTunnelId
	}
	return ""
}

func (x *TunnelOptions) GetXActive() bool {
	if x != nil {
		return x.XActive
	}
	return false
}

func (x *TunnelOptions) GetKafka() *TunnelGroupKafkaOptions {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *TunnelOptions) GetActivemq() *TunnelGroupActiveMQOptions {
	if x != nil {
		return x.Activemq
	}
	return nil
}

func (x *TunnelOptions) GetAwsSqs() *TunnelGroupAWSSQSOptions {
	if x != nil {
		return x.AwsSqs
	}
	return nil
}

func (x *TunnelOptions) GetAwsSns() *TunnelGroupAWSSNSOptions {
	if x != nil {
		return x.AwsSns
	}
	return nil
}

func (x *TunnelOptions) GetNats() *TunnelGroupNatsOptions {
	if x != nil {
		return x.Nats
	}
	return nil
}

func (x *TunnelOptions) GetNatsStreaming() *TunnelGroupNatsStreamingOptions {
	if x != nil {
		return x.NatsStreaming
	}
	return nil
}

func (x *TunnelOptions) GetNsq() *TunnelGroupNSQOptions {
	if x != nil {
		return x.Nsq
	}
	return nil
}

func (x *TunnelOptions) GetRabbit() *TunnelGroupRabbitOptions {
	if x != nil {
		return x.Rabbit
	}
	return nil
}

func (x *TunnelOptions) GetMqtt() *TunnelGroupMQTTOptions {
	if x != nil {
		return x.Mqtt
	}
	return nil
}

func (x *TunnelOptions) GetAzureServiceBus() *TunnelGroupAzureServiceBusOptions {
	if x != nil {
		return x.AzureServiceBus
	}
	return nil
}

func (x *TunnelOptions) GetAzureEventHub() *TunnelGroupAzureEventHubOptions {
	if x != nil {
		return x.AzureEventHub
	}
	return nil
}

func (x *TunnelOptions) GetGcpPubsub() *TunnelGroupGCPPubSubOptions {
	if x != nil {
		return x.GcpPubsub
	}
	return nil
}

func (x *TunnelOptions) GetKubemqQueue() *TunnelGroupKubeMQQueueOptions {
	if x != nil {
		return x.KubemqQueue
	}
	return nil
}

func (x *TunnelOptions) GetRedisPubsub() *TunnelGroupRedisPubSubOptions {
	if x != nil {
		return x.RedisPubsub
	}
	return nil
}

func (x *TunnelOptions) GetRedisStreams() *TunnelGroupRedisStreamsOptions {
	if x != nil {
		return x.RedisStreams
	}
	return nil
}

func (x *TunnelOptions) GetPulsar() *TunnelGroupPulsarOptions {
	if x != nil {
		return x.Pulsar
	}
	return nil
}

func (x *TunnelOptions) GetRabbitStreams() *TunnelGroupRabbitStreamsOptions {
	if x != nil {
		return x.RabbitStreams
	}
	return nil
}

func (x *TunnelOptions) GetNatsJetstream() *TunnelGroupNatsJetstreamOptions {
	if x != nil {
		return x.NatsJetstream
	}
	return nil
}

func (x *TunnelOptions) GetAwsKinesis() *TunnelGroupAWSKinesisOptions {
	if x != nil {
		return x.AwsKinesis
	}
	return nil
}

func (x *TunnelOptions) GetMemphis() *TunnelGroupMemphisOptions {
	if x != nil {
		return x.Memphis
	}
	return nil
}

type TunnelGroupKafkaOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.KafkaConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.KafkaWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *TunnelGroupKafkaOptions) Reset() {
	*x = TunnelGroupKafkaOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_tunnel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelGroupKafkaOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelGroupKafkaOptions) ProtoMessage() {}

func (x *TunnelGroupKafkaOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_tunnel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelGroupKafkaOptions.ProtoReflect.Descriptor instead.
func (*TunnelGroupKafkaOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_tunnel_proto_rawDescGZIP(), []int{1}
}

func (x *TunnelGroupKafkaOptions) GetXConn() *args.KafkaConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *TunnelGroupKafkaOptions) GetArgs() *args.KafkaWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type TunnelGroupActiveMQOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.ActiveMQConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.ActiveMQWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *TunnelGroupActiveMQOptions) Reset() {
	*x = TunnelGroupActiveMQOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_tunnel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelGroupActiveMQOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelGroupActiveMQOptions) ProtoMessage() {}

func (x *TunnelGroupActiveMQOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_tunnel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelGroupActiveMQOptions.ProtoReflect.Descriptor instead.
func (*TunnelGroupActiveMQOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_tunnel_proto_rawDescGZIP(), []int{2}
}

func (x *TunnelGroupActiveMQOptions) GetXConn() *args.ActiveMQConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *TunnelGroupActiveMQOptions) GetArgs() *args.ActiveMQWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type TunnelGroupAWSSQSOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.AWSSQSConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.AWSSQSWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *TunnelGroupAWSSQSOptions) Reset() {
	*x = TunnelGroupAWSSQSOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_tunnel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelGroupAWSSQSOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelGroupAWSSQSOptions) ProtoMessage() {}

func (x *TunnelGroupAWSSQSOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_tunnel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelGroupAWSSQSOptions.ProtoReflect.Descriptor instead.
func (*TunnelGroupAWSSQSOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_tunnel_proto_rawDescGZIP(), []int{3}
}

func (x *TunnelGroupAWSSQSOptions) GetXConn() *args.AWSSQSConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *TunnelGroupAWSSQSOptions) GetArgs() *args.AWSSQSWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type TunnelGroupAWSSNSOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.AWSSNSConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.AWSSNSWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *TunnelGroupAWSSNSOptions) Reset() {
	*x = TunnelGroupAWSSNSOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_tunnel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelGroupAWSSNSOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelGroupAWSSNSOptions) ProtoMessage() {}

func (x *TunnelGroupAWSSNSOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_tunnel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelGroupAWSSNSOptions.ProtoReflect.Descriptor instead.
func (*TunnelGroupAWSSNSOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_tunnel_proto_rawDescGZIP(), []int{4}
}

func (x *TunnelGroupAWSSNSOptions) GetXConn() *args.AWSSNSConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *TunnelGroupAWSSNSOptions) GetArgs() *args.AWSSNSWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type TunnelGroupNatsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.NatsConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.NatsWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *TunnelGroupNatsOptions) Reset() {
	*x = TunnelGroupNatsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_tunnel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelGroupNatsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelGroupNatsOptions) ProtoMessage() {}

func (x *TunnelGroupNatsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_tunnel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelGroupNatsOptions.ProtoReflect.Descriptor instead.
func (*TunnelGroupNatsOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_tunnel_proto_rawDescGZIP(), []int{5}
}

func (x *TunnelGroupNatsOptions) GetXConn() *args.NatsConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *TunnelGroupNatsOptions) GetArgs() *args.NatsWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type TunnelGroupNatsJetstreamOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.NatsJetstreamConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.NatsJetstreamWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *TunnelGroupNatsJetstreamOptions) Reset() {
	*x = TunnelGroupNatsJetstreamOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_tunnel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelGroupNatsJetstreamOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelGroupNatsJetstreamOptions) ProtoMessage() {}

func (x *TunnelGroupNatsJetstreamOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_tunnel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelGroupNatsJetstreamOptions.ProtoReflect.Descriptor instead.
func (*TunnelGroupNatsJetstreamOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_tunnel_proto_rawDescGZIP(), []int{6}
}

func (x *TunnelGroupNatsJetstreamOptions) GetXConn() *args.NatsJetstreamConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *TunnelGroupNatsJetstreamOptions) GetArgs() *args.NatsJetstreamWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type TunnelGroupNatsStreamingOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.NatsStreamingConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.NatsStreamingWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *TunnelGroupNatsStreamingOptions) Reset() {
	*x = TunnelGroupNatsStreamingOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_tunnel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelGroupNatsStreamingOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelGroupNatsStreamingOptions) ProtoMessage() {}

func (x *TunnelGroupNatsStreamingOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_tunnel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelGroupNatsStreamingOptions.ProtoReflect.Descriptor instead.
func (*TunnelGroupNatsStreamingOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_tunnel_proto_rawDescGZIP(), []int{7}
}

func (x *TunnelGroupNatsStreamingOptions) GetXConn() *args.NatsStreamingConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *TunnelGroupNatsStreamingOptions) GetArgs() *args.NatsStreamingWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type TunnelGroupNSQOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.NSQConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.NSQWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *TunnelGroupNSQOptions) Reset() {
	*x = TunnelGroupNSQOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_tunnel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelGroupNSQOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelGroupNSQOptions) ProtoMessage() {}

func (x *TunnelGroupNSQOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_tunnel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelGroupNSQOptions.ProtoReflect.Descriptor instead.
func (*TunnelGroupNSQOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_tunnel_proto_rawDescGZIP(), []int{8}
}

func (x *TunnelGroupNSQOptions) GetXConn() *args.NSQConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *TunnelGroupNSQOptions) GetArgs() *args.NSQWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type TunnelGroupRabbitOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.RabbitConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.RabbitWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *TunnelGroupRabbitOptions) Reset() {
	*x = TunnelGroupRabbitOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_tunnel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelGroupRabbitOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelGroupRabbitOptions) ProtoMessage() {}

func (x *TunnelGroupRabbitOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_tunnel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelGroupRabbitOptions.ProtoReflect.Descriptor instead.
func (*TunnelGroupRabbitOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_tunnel_proto_rawDescGZIP(), []int{9}
}

func (x *TunnelGroupRabbitOptions) GetXConn() *args.RabbitConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *TunnelGroupRabbitOptions) GetArgs() *args.RabbitWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type TunnelGroupRabbitStreamsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.RabbitStreamsConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.RabbitStreamsWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *TunnelGroupRabbitStreamsOptions) Reset() {
	*x = TunnelGroupRabbitStreamsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_tunnel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelGroupRabbitStreamsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelGroupRabbitStreamsOptions) ProtoMessage() {}

func (x *TunnelGroupRabbitStreamsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_tunnel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelGroupRabbitStreamsOptions.ProtoReflect.Descriptor instead.
func (*TunnelGroupRabbitStreamsOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_tunnel_proto_rawDescGZIP(), []int{10}
}

func (x *TunnelGroupRabbitStreamsOptions) GetXConn() *args.RabbitStreamsConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *TunnelGroupRabbitStreamsOptions) GetArgs() *args.RabbitStreamsWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type TunnelGroupRedisPubSubOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.RedisPubSubConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.RedisPubSubWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *TunnelGroupRedisPubSubOptions) Reset() {
	*x = TunnelGroupRedisPubSubOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_tunnel_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelGroupRedisPubSubOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelGroupRedisPubSubOptions) ProtoMessage() {}

func (x *TunnelGroupRedisPubSubOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_tunnel_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelGroupRedisPubSubOptions.ProtoReflect.Descriptor instead.
func (*TunnelGroupRedisPubSubOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_tunnel_proto_rawDescGZIP(), []int{11}
}

func (x *TunnelGroupRedisPubSubOptions) GetXConn() *args.RedisPubSubConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *TunnelGroupRedisPubSubOptions) GetArgs() *args.RedisPubSubWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type TunnelGroupRedisStreamsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.RedisStreamsConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.RedisStreamsWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *TunnelGroupRedisStreamsOptions) Reset() {
	*x = TunnelGroupRedisStreamsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_tunnel_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelGroupRedisStreamsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelGroupRedisStreamsOptions) ProtoMessage() {}

func (x *TunnelGroupRedisStreamsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_tunnel_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelGroupRedisStreamsOptions.ProtoReflect.Descriptor instead.
func (*TunnelGroupRedisStreamsOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_tunnel_proto_rawDescGZIP(), []int{12}
}

func (x *TunnelGroupRedisStreamsOptions) GetXConn() *args.RedisStreamsConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *TunnelGroupRedisStreamsOptions) GetArgs() *args.RedisStreamsWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type TunnelGroupAzureEventHubOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.AzureEventHubConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.AzureEventHubWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *TunnelGroupAzureEventHubOptions) Reset() {
	*x = TunnelGroupAzureEventHubOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_tunnel_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelGroupAzureEventHubOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelGroupAzureEventHubOptions) ProtoMessage() {}

func (x *TunnelGroupAzureEventHubOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_tunnel_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelGroupAzureEventHubOptions.ProtoReflect.Descriptor instead.
func (*TunnelGroupAzureEventHubOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_tunnel_proto_rawDescGZIP(), []int{13}
}

func (x *TunnelGroupAzureEventHubOptions) GetXConn() *args.AzureEventHubConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *TunnelGroupAzureEventHubOptions) GetArgs() *args.AzureEventHubWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type TunnelGroupAzureServiceBusOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"{
	XConn *args.AzureServiceBusConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.AzureServiceBusWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *TunnelGroupAzureServiceBusOptions) Reset() {
	*x = TunnelGroupAzureServiceBusOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_tunnel_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelGroupAzureServiceBusOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelGroupAzureServiceBusOptions) ProtoMessage() {}

func (x *TunnelGroupAzureServiceBusOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_tunnel_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelGroupAzureServiceBusOptions.ProtoReflect.Descriptor instead.
func (*TunnelGroupAzureServiceBusOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_tunnel_proto_rawDescGZIP(), []int{14}
}

func (x *TunnelGroupAzureServiceBusOptions) GetXConn() *args.AzureServiceBusConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *TunnelGroupAzureServiceBusOptions) GetArgs() *args.AzureServiceBusWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type TunnelGroupMQTTOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.MQTTConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.MQTTWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *TunnelGroupMQTTOptions) Reset() {
	*x = TunnelGroupMQTTOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_tunnel_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelGroupMQTTOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelGroupMQTTOptions) ProtoMessage() {}

func (x *TunnelGroupMQTTOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_tunnel_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelGroupMQTTOptions.ProtoReflect.Descriptor instead.
func (*TunnelGroupMQTTOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_tunnel_proto_rawDescGZIP(), []int{15}
}

func (x *TunnelGroupMQTTOptions) GetXConn() *args.MQTTConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *TunnelGroupMQTTOptions) GetArgs() *args.MQTTWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type TunnelGroupGCPPubSubOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.GCPPubSubConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.GCPPubSubWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *TunnelGroupGCPPubSubOptions) Reset() {
	*x = TunnelGroupGCPPubSubOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_tunnel_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelGroupGCPPubSubOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelGroupGCPPubSubOptions) ProtoMessage() {}

func (x *TunnelGroupGCPPubSubOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_tunnel_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelGroupGCPPubSubOptions.ProtoReflect.Descriptor instead.
func (*TunnelGroupGCPPubSubOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_tunnel_proto_rawDescGZIP(), []int{16}
}

func (x *TunnelGroupGCPPubSubOptions) GetXConn() *args.GCPPubSubConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *TunnelGroupGCPPubSubOptions) GetArgs() *args.GCPPubSubWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type TunnelGroupKubeMQQueueOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.KubeMQQueueConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.KubeMQQueueWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *TunnelGroupKubeMQQueueOptions) Reset() {
	*x = TunnelGroupKubeMQQueueOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_tunnel_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelGroupKubeMQQueueOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelGroupKubeMQQueueOptions) ProtoMessage() {}

func (x *TunnelGroupKubeMQQueueOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_tunnel_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelGroupKubeMQQueueOptions.ProtoReflect.Descriptor instead.
func (*TunnelGroupKubeMQQueueOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_tunnel_proto_rawDescGZIP(), []int{17}
}

func (x *TunnelGroupKubeMQQueueOptions) GetXConn() *args.KubeMQQueueConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *TunnelGroupKubeMQQueueOptions) GetArgs() *args.KubeMQQueueWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type TunnelGroupPulsarOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.PulsarConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.PulsarWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *TunnelGroupPulsarOptions) Reset() {
	*x = TunnelGroupPulsarOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_tunnel_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelGroupPulsarOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelGroupPulsarOptions) ProtoMessage() {}

func (x *TunnelGroupPulsarOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_tunnel_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelGroupPulsarOptions.ProtoReflect.Descriptor instead.
func (*TunnelGroupPulsarOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_tunnel_proto_rawDescGZIP(), []int{18}
}

func (x *TunnelGroupPulsarOptions) GetXConn() *args.PulsarConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *TunnelGroupPulsarOptions) GetArgs() *args.PulsarWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type TunnelGroupAWSKinesisOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.AWSKinesisConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.AWSKinesisWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *TunnelGroupAWSKinesisOptions) Reset() {
	*x = TunnelGroupAWSKinesisOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_tunnel_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelGroupAWSKinesisOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelGroupAWSKinesisOptions) ProtoMessage() {}

func (x *TunnelGroupAWSKinesisOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_tunnel_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelGroupAWSKinesisOptions.ProtoReflect.Descriptor instead.
func (*TunnelGroupAWSKinesisOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_tunnel_proto_rawDescGZIP(), []int{19}
}

func (x *TunnelGroupAWSKinesisOptions) GetXConn() *args.AWSKinesisConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *TunnelGroupAWSKinesisOptions) GetArgs() *args.AWSKinesisWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type TunnelGroupMemphisOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.MemphisConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.MemphisWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *TunnelGroupMemphisOptions) Reset() {
	*x = TunnelGroupMemphisOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_tunnel_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelGroupMemphisOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelGroupMemphisOptions) ProtoMessage() {}

func (x *TunnelGroupMemphisOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_tunnel_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelGroupMemphisOptions.ProtoReflect.Descriptor instead.
func (*TunnelGroupMemphisOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_tunnel_proto_rawDescGZIP(), []int{20}
}

func (x *TunnelGroupMemphisOptions) GetXConn() *args.MemphisConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *TunnelGroupMemphisOptions) GetArgs() *args.MemphisWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

var File_opts_ps_opts_tunnel_proto protoreflect.FileDescriptor

var file_opts_ps_opts_tunnel_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6f, 0x70, 0x74, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x5f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x1a, 0x1b, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70,
	0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x71, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61,
	0x72, 0x67, 0x73, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61,
	0x72, 0x67, 0x73, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1a, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f,
	0x61, 0x77, 0x73, 0x5f, 0x73, 0x71, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x61,
	0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x24, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73,
	0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x67, 0x63, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f,
	0x61, 0x72, 0x67, 0x73, 0x5f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6b,
	0x75, 0x62, 0x65, 0x6d, 0x71, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1a, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f,
	0x6d, 0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61,
	0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6d, 0x71, 0x74, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f,
	0x61, 0x72, 0x67, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x21, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6e, 0x61,
	0x74, 0x73, 0x5f, 0x6a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x21, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73,
	0x5f, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61,
	0x72, 0x67, 0x73, 0x5f, 0x6e, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61,
	0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x70, 0x75, 0x6c, 0x73,
	0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70,
	0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67,
	0x73, 0x5f, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f,
	0x61, 0x72, 0x67, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73,
	0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x0d, 0x0a, 0x0d, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x70, 0x69, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x70, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x72, 0x70, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x31, 0x0a, 0x15, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x47, 0x72, 0x70, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x6e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x47, 0x72,
	0x70, 0x63, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0xe8, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x6f, 0x70, 0x74, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x12, 0x43, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x71, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f,
	0x70, 0x74, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x51, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x71, 0x12, 0x3e, 0x0a, 0x07, 0x61, 0x77, 0x73, 0x5f,
	0x73, 0x71, 0x73, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x57, 0x53, 0x53, 0x51, 0x53, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x06, 0x61, 0x77, 0x73, 0x53, 0x71, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x61, 0x77, 0x73, 0x5f,
	0x73, 0x6e, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x57, 0x53, 0x53, 0x4e, 0x53, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x06, 0x61, 0x77, 0x73, 0x53, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x74, 0x73,
	0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x6f, 0x70, 0x74, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x74, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x6e, 0x61, 0x74,
	0x73, 0x12, 0x53, 0x0a, 0x0e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x6e, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x03, 0x6e, 0x73, 0x71, 0x18, 0x6a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74,
	0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x53, 0x51,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x6e, 0x73, 0x71, 0x12, 0x3d, 0x0a, 0x06,
	0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x06, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x6d,
	0x71, 0x74, 0x74, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x51, 0x54, 0x54, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04,
	0x6d, 0x71, 0x74, 0x74, 0x12, 0x5a, 0x0a, 0x11, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x73,
	0x12, 0x54, 0x0a, 0x0f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x68, 0x75, 0x62, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x62,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x75, 0x62, 0x12, 0x47, 0x0a, 0x0a, 0x67, 0x63, 0x70, 0x5f, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x47, 0x43, 0x50, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x67, 0x63, 0x70, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x12,
	0x4d, 0x0a, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x6d, 0x71, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18,
	0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f,
	0x70, 0x74, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b,
	0x75, 0x62, 0x65, 0x4d, 0x51, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x6d, 0x71, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x4d,
	0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x18, 0x71,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70,
	0x74, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x73, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x12, 0x50, 0x0a,
	0x0d, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x72,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70,
	0x74, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12,
	0x3d, 0x0a, 0x06, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x12, 0x53,
	0x0a, 0x0e, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x6f, 0x70, 0x74, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x12, 0x53, 0x0a, 0x0e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x6a, 0x65, 0x74, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x6e, 0x61, 0x74, 0x73, 0x4a,
	0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x4a, 0x0a, 0x0b, 0x61, 0x77, 0x73, 0x5f,
	0x6b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x57, 0x53, 0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x4b, 0x69, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x18,
	0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f,
	0x70, 0x74, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6d,
	0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x22, 0x77, 0x0a, 0x17, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2b, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4b,
	0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x2f,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22,
	0x80, 0x01, 0x0a, 0x1a, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x51, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e,
	0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x4d, 0x51, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x32,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4d, 0x51, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x22, 0x7a, 0x0a, 0x18, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x57, 0x53, 0x53, 0x51, 0x53, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x53,
	0x51, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x30, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x53, 0x51, 0x53, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x7a,
	0x0a, 0x18, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x57, 0x53,
	0x53, 0x4e, 0x53, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x53, 0x4e, 0x53, 0x43, 0x6f,
	0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x53, 0x4e, 0x53, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x74, 0x0a, 0x16, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x74, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67,
	0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e,
	0x12, 0x2e, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x61, 0x74,
	0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x22, 0x8f, 0x01, 0x0a, 0x1f, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67,
	0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x1f, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61,
	0x72, 0x67, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x22, 0x71, 0x0a, 0x15, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x53, 0x51, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a,
	0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x53, 0x51, 0x43, 0x6f,
	0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x53, 0x51, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x7a, 0x0a, 0x18, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73,
	0x2e, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e,
	0x6e, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x61,
	0x62, 0x62, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x1f, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x37, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x1d, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x64, 0x69, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62,
	0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x50, 0x75, 0x62, 0x53,
	0x75, 0x62, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x22, 0x8c, 0x01, 0x0a, 0x1e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67,
	0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f,
	0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x22, 0x8f, 0x01, 0x0a, 0x1f, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x62, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67,
	0x73, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x62, 0x43,
	0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x75, 0x62, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x21, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x42, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12,
	0x39, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x7a, 0x75, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x74, 0x0a, 0x16, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x51, 0x54, 0x54, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67,
	0x73, 0x2e, 0x4d, 0x51, 0x54, 0x54, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e,
	0x12, 0x2e, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4d, 0x51, 0x54,
	0x54, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x22, 0x83, 0x01, 0x0a, 0x1b, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x47, 0x43, 0x50, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2f, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x47, 0x43,
	0x50, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e,
	0x6e, 0x12, 0x33, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x47, 0x43,
	0x50, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x1d, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x75, 0x62, 0x65, 0x4d, 0x51, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x4d, 0x51, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x4d, 0x51, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x22, 0x7a, 0x0a, 0x18, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x73,
	0x61, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x30, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x86,
	0x01, 0x0a, 0x1c, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x57,
	0x53, 0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x30, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x57, 0x53,
	0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e,
	0x6e, 0x12, 0x34, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x57,
	0x53, 0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x7d, 0x0a, 0x19, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67,
	0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43,
	0x6f, 0x6e, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e,
	0x4d, 0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x70,
	0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6f,
	0x70, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opts_ps_opts_tunnel_proto_rawDescOnce sync.Once
	file_opts_ps_opts_tunnel_proto_rawDescData = file_opts_ps_opts_tunnel_proto_rawDesc
)

func file_opts_ps_opts_tunnel_proto_rawDescGZIP() []byte {
	file_opts_ps_opts_tunnel_proto_rawDescOnce.Do(func() {
		file_opts_ps_opts_tunnel_proto_rawDescData = protoimpl.X.CompressGZIP(file_opts_ps_opts_tunnel_proto_rawDescData)
	})
	return file_opts_ps_opts_tunnel_proto_rawDescData
}

var file_opts_ps_opts_tunnel_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_opts_ps_opts_tunnel_proto_goTypes = []interface{}{
	(*TunnelOptions)(nil),                     // 0: protos.opts.TunnelOptions
	(*TunnelGroupKafkaOptions)(nil),           // 1: protos.opts.TunnelGroupKafkaOptions
	(*TunnelGroupActiveMQOptions)(nil),        // 2: protos.opts.TunnelGroupActiveMQOptions
	(*TunnelGroupAWSSQSOptions)(nil),          // 3: protos.opts.TunnelGroupAWSSQSOptions
	(*TunnelGroupAWSSNSOptions)(nil),          // 4: protos.opts.TunnelGroupAWSSNSOptions
	(*TunnelGroupNatsOptions)(nil),            // 5: protos.opts.TunnelGroupNatsOptions
	(*TunnelGroupNatsJetstreamOptions)(nil),   // 6: protos.opts.TunnelGroupNatsJetstreamOptions
	(*TunnelGroupNatsStreamingOptions)(nil),   // 7: protos.opts.TunnelGroupNatsStreamingOptions
	(*TunnelGroupNSQOptions)(nil),             // 8: protos.opts.TunnelGroupNSQOptions
	(*TunnelGroupRabbitOptions)(nil),          // 9: protos.opts.TunnelGroupRabbitOptions
	(*TunnelGroupRabbitStreamsOptions)(nil),   // 10: protos.opts.TunnelGroupRabbitStreamsOptions
	(*TunnelGroupRedisPubSubOptions)(nil),     // 11: protos.opts.TunnelGroupRedisPubSubOptions
	(*TunnelGroupRedisStreamsOptions)(nil),    // 12: protos.opts.TunnelGroupRedisStreamsOptions
	(*TunnelGroupAzureEventHubOptions)(nil),   // 13: protos.opts.TunnelGroupAzureEventHubOptions
	(*TunnelGroupAzureServiceBusOptions)(nil), // 14: protos.opts.TunnelGroupAzureServiceBusOptions
	(*TunnelGroupMQTTOptions)(nil),            // 15: protos.opts.TunnelGroupMQTTOptions
	(*TunnelGroupGCPPubSubOptions)(nil),       // 16: protos.opts.TunnelGroupGCPPubSubOptions
	(*TunnelGroupKubeMQQueueOptions)(nil),     // 17: protos.opts.TunnelGroupKubeMQQueueOptions
	(*TunnelGroupPulsarOptions)(nil),          // 18: protos.opts.TunnelGroupPulsarOptions
	(*TunnelGroupAWSKinesisOptions)(nil),      // 19: protos.opts.TunnelGroupAWSKinesisOptions
	(*TunnelGroupMemphisOptions)(nil),         // 20: protos.opts.TunnelGroupMemphisOptions
	(*args.KafkaConn)(nil),                    // 21: protos.args.KafkaConn
	(*args.KafkaWriteArgs)(nil),               // 22: protos.args.KafkaWriteArgs
	(*args.ActiveMQConn)(nil),                 // 23: protos.args.ActiveMQConn
	(*args.ActiveMQWriteArgs)(nil),            // 24: protos.args.ActiveMQWriteArgs
	(*args.AWSSQSConn)(nil),                   // 25: protos.args.AWSSQSConn
	(*args.AWSSQSWriteArgs)(nil),              // 26: protos.args.AWSSQSWriteArgs
	(*args.AWSSNSConn)(nil),                   // 27: protos.args.AWSSNSConn
	(*args.AWSSNSWriteArgs)(nil),              // 28: protos.args.AWSSNSWriteArgs
	(*args.NatsConn)(nil),                     // 29: protos.args.NatsConn
	(*args.NatsWriteArgs)(nil),                // 30: protos.args.NatsWriteArgs
	(*args.NatsJetstreamConn)(nil),            // 31: protos.args.NatsJetstreamConn
	(*args.NatsJetstreamWriteArgs)(nil),       // 32: protos.args.NatsJetstreamWriteArgs
	(*args.NatsStreamingConn)(nil),            // 33: protos.args.NatsStreamingConn
	(*args.NatsStreamingWriteArgs)(nil),       // 34: protos.args.NatsStreamingWriteArgs
	(*args.NSQConn)(nil),                      // 35: protos.args.NSQConn
	(*args.NSQWriteArgs)(nil),                 // 36: protos.args.NSQWriteArgs
	(*args.RabbitConn)(nil),                   // 37: protos.args.RabbitConn
	(*args.RabbitWriteArgs)(nil),              // 38: protos.args.RabbitWriteArgs
	(*args.RabbitStreamsConn)(nil),            // 39: protos.args.RabbitStreamsConn
	(*args.RabbitStreamsWriteArgs)(nil),       // 40: protos.args.RabbitStreamsWriteArgs
	(*args.RedisPubSubConn)(nil),              // 41: protos.args.RedisPubSubConn
	(*args.RedisPubSubWriteArgs)(nil),         // 42: protos.args.RedisPubSubWriteArgs
	(*args.RedisStreamsConn)(nil),             // 43: protos.args.RedisStreamsConn
	(*args.RedisStreamsWriteArgs)(nil),        // 44: protos.args.RedisStreamsWriteArgs
	(*args.AzureEventHubConn)(nil),            // 45: protos.args.AzureEventHubConn
	(*args.AzureEventHubWriteArgs)(nil),       // 46: protos.args.AzureEventHubWriteArgs
	(*args.AzureServiceBusConn)(nil),          // 47: protos.args.AzureServiceBusConn
	(*args.AzureServiceBusWriteArgs)(nil),     // 48: protos.args.AzureServiceBusWriteArgs
	(*args.MQTTConn)(nil),                     // 49: protos.args.MQTTConn
	(*args.MQTTWriteArgs)(nil),                // 50: protos.args.MQTTWriteArgs
	(*args.GCPPubSubConn)(nil),                // 51: protos.args.GCPPubSubConn
	(*args.GCPPubSubWriteArgs)(nil),           // 52: protos.args.GCPPubSubWriteArgs
	(*args.KubeMQQueueConn)(nil),              // 53: protos.args.KubeMQQueueConn
	(*args.KubeMQQueueWriteArgs)(nil),         // 54: protos.args.KubeMQQueueWriteArgs
	(*args.PulsarConn)(nil),                   // 55: protos.args.PulsarConn
	(*args.PulsarWriteArgs)(nil),              // 56: protos.args.PulsarWriteArgs
	(*args.AWSKinesisConn)(nil),               // 57: protos.args.AWSKinesisConn
	(*args.AWSKinesisWriteArgs)(nil),          // 58: protos.args.AWSKinesisWriteArgs
	(*args.MemphisConn)(nil),                  // 59: protos.args.MemphisConn
	(*args.MemphisWriteArgs)(nil),             // 60: protos.args.MemphisWriteArgs
}
var file_opts_ps_opts_tunnel_proto_depIdxs = []int32{
	1,  // 0: protos.opts.TunnelOptions.kafka:type_name -> protos.opts.TunnelGroupKafkaOptions
	2,  // 1: protos.opts.TunnelOptions.activemq:type_name -> protos.opts.TunnelGroupActiveMQOptions
	3,  // 2: protos.opts.TunnelOptions.aws_sqs:type_name -> protos.opts.TunnelGroupAWSSQSOptions
	4,  // 3: protos.opts.TunnelOptions.aws_sns:type_name -> protos.opts.TunnelGroupAWSSNSOptions
	5,  // 4: protos.opts.TunnelOptions.nats:type_name -> protos.opts.TunnelGroupNatsOptions
	7,  // 5: protos.opts.TunnelOptions.nats_streaming:type_name -> protos.opts.TunnelGroupNatsStreamingOptions
	8,  // 6: protos.opts.TunnelOptions.nsq:type_name -> protos.opts.TunnelGroupNSQOptions
	9,  // 7: protos.opts.TunnelOptions.rabbit:type_name -> protos.opts.TunnelGroupRabbitOptions
	15, // 8: protos.opts.TunnelOptions.mqtt:type_name -> protos.opts.TunnelGroupMQTTOptions
	14, // 9: protos.opts.TunnelOptions.azure_service_bus:type_name -> protos.opts.TunnelGroupAzureServiceBusOptions
	13, // 10: protos.opts.TunnelOptions.azure_event_hub:type_name -> protos.opts.TunnelGroupAzureEventHubOptions
	16, // 11: protos.opts.TunnelOptions.gcp_pubsub:type_name -> protos.opts.TunnelGroupGCPPubSubOptions
	17, // 12: protos.opts.TunnelOptions.kubemq_queue:type_name -> protos.opts.TunnelGroupKubeMQQueueOptions
	11, // 13: protos.opts.TunnelOptions.redis_pubsub:type_name -> protos.opts.TunnelGroupRedisPubSubOptions
	12, // 14: protos.opts.TunnelOptions.redis_streams:type_name -> protos.opts.TunnelGroupRedisStreamsOptions
	18, // 15: protos.opts.TunnelOptions.pulsar:type_name -> protos.opts.TunnelGroupPulsarOptions
	10, // 16: protos.opts.TunnelOptions.rabbit_streams:type_name -> protos.opts.TunnelGroupRabbitStreamsOptions
	6,  // 17: protos.opts.TunnelOptions.nats_jetstream:type_name -> protos.opts.TunnelGroupNatsJetstreamOptions
	19, // 18: protos.opts.TunnelOptions.aws_kinesis:type_name -> protos.opts.TunnelGroupAWSKinesisOptions
	20, // 19: protos.opts.TunnelOptions.memphis:type_name -> protos.opts.TunnelGroupMemphisOptions
	21, // 20: protos.opts.TunnelGroupKafkaOptions._conn:type_name -> protos.args.KafkaConn
	22, // 21: protos.opts.TunnelGroupKafkaOptions.args:type_name -> protos.args.KafkaWriteArgs
	23, // 22: protos.opts.TunnelGroupActiveMQOptions._conn:type_name -> protos.args.ActiveMQConn
	24, // 23: protos.opts.TunnelGroupActiveMQOptions.args:type_name -> protos.args.ActiveMQWriteArgs
	25, // 24: protos.opts.TunnelGroupAWSSQSOptions._conn:type_name -> protos.args.AWSSQSConn
	26, // 25: protos.opts.TunnelGroupAWSSQSOptions.args:type_name -> protos.args.AWSSQSWriteArgs
	27, // 26: protos.opts.TunnelGroupAWSSNSOptions._conn:type_name -> protos.args.AWSSNSConn
	28, // 27: protos.opts.TunnelGroupAWSSNSOptions.args:type_name -> protos.args.AWSSNSWriteArgs
	29, // 28: protos.opts.TunnelGroupNatsOptions._conn:type_name -> protos.args.NatsConn
	30, // 29: protos.opts.TunnelGroupNatsOptions.args:type_name -> protos.args.NatsWriteArgs
	31, // 30: protos.opts.TunnelGroupNatsJetstreamOptions._conn:type_name -> protos.args.NatsJetstreamConn
	32, // 31: protos.opts.TunnelGroupNatsJetstreamOptions.args:type_name -> protos.args.NatsJetstreamWriteArgs
	33, // 32: protos.opts.TunnelGroupNatsStreamingOptions._conn:type_name -> protos.args.NatsStreamingConn
	34, // 33: protos.opts.TunnelGroupNatsStreamingOptions.args:type_name -> protos.args.NatsStreamingWriteArgs
	35, // 34: protos.opts.TunnelGroupNSQOptions._conn:type_name -> protos.args.NSQConn
	36, // 35: protos.opts.TunnelGroupNSQOptions.args:type_name -> protos.args.NSQWriteArgs
	37, // 36: protos.opts.TunnelGroupRabbitOptions._conn:type_name -> protos.args.RabbitConn
	38, // 37: protos.opts.TunnelGroupRabbitOptions.args:type_name -> protos.args.RabbitWriteArgs
	39, // 38: protos.opts.TunnelGroupRabbitStreamsOptions._conn:type_name -> protos.args.RabbitStreamsConn
	40, // 39: protos.opts.TunnelGroupRabbitStreamsOptions.args:type_name -> protos.args.RabbitStreamsWriteArgs
	41, // 40: protos.opts.TunnelGroupRedisPubSubOptions._conn:type_name -> protos.args.RedisPubSubConn
	42, // 41: protos.opts.TunnelGroupRedisPubSubOptions.args:type_name -> protos.args.RedisPubSubWriteArgs
	43, // 42: protos.opts.TunnelGroupRedisStreamsOptions._conn:type_name -> protos.args.RedisStreamsConn
	44, // 43: protos.opts.TunnelGroupRedisStreamsOptions.args:type_name -> protos.args.RedisStreamsWriteArgs
	45, // 44: protos.opts.TunnelGroupAzureEventHubOptions._conn:type_name -> protos.args.AzureEventHubConn
	46, // 45: protos.opts.TunnelGroupAzureEventHubOptions.args:type_name -> protos.args.AzureEventHubWriteArgs
	47, // 46: protos.opts.TunnelGroupAzureServiceBusOptions._conn:type_name -> protos.args.AzureServiceBusConn
	48, // 47: protos.opts.TunnelGroupAzureServiceBusOptions.args:type_name -> protos.args.AzureServiceBusWriteArgs
	49, // 48: protos.opts.TunnelGroupMQTTOptions._conn:type_name -> protos.args.MQTTConn
	50, // 49: protos.opts.TunnelGroupMQTTOptions.args:type_name -> protos.args.MQTTWriteArgs
	51, // 50: protos.opts.TunnelGroupGCPPubSubOptions._conn:type_name -> protos.args.GCPPubSubConn
	52, // 51: protos.opts.TunnelGroupGCPPubSubOptions.args:type_name -> protos.args.GCPPubSubWriteArgs
	53, // 52: protos.opts.TunnelGroupKubeMQQueueOptions._conn:type_name -> protos.args.KubeMQQueueConn
	54, // 53: protos.opts.TunnelGroupKubeMQQueueOptions.args:type_name -> protos.args.KubeMQQueueWriteArgs
	55, // 54: protos.opts.TunnelGroupPulsarOptions._conn:type_name -> protos.args.PulsarConn
	56, // 55: protos.opts.TunnelGroupPulsarOptions.args:type_name -> protos.args.PulsarWriteArgs
	57, // 56: protos.opts.TunnelGroupAWSKinesisOptions._conn:type_name -> protos.args.AWSKinesisConn
	58, // 57: protos.opts.TunnelGroupAWSKinesisOptions.args:type_name -> protos.args.AWSKinesisWriteArgs
	59, // 58: protos.opts.TunnelGroupMemphisOptions._conn:type_name -> protos.args.MemphisConn
	60, // 59: protos.opts.TunnelGroupMemphisOptions.args:type_name -> protos.args.MemphisWriteArgs
	60, // [60:60] is the sub-list for method output_type
	60, // [60:60] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_opts_ps_opts_tunnel_proto_init() }
func file_opts_ps_opts_tunnel_proto_init() {
	if File_opts_ps_opts_tunnel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_opts_ps_opts_tunnel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_tunnel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelGroupKafkaOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_tunnel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelGroupActiveMQOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_tunnel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelGroupAWSSQSOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_tunnel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelGroupAWSSNSOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_tunnel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelGroupNatsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_tunnel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelGroupNatsJetstreamOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_tunnel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelGroupNatsStreamingOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_tunnel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelGroupNSQOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_tunnel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelGroupRabbitOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_tunnel_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelGroupRabbitStreamsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_tunnel_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelGroupRedisPubSubOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_tunnel_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelGroupRedisStreamsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_tunnel_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelGroupAzureEventHubOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_tunnel_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelGroupAzureServiceBusOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_tunnel_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelGroupMQTTOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_tunnel_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelGroupGCPPubSubOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_tunnel_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelGroupKubeMQQueueOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_tunnel_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelGroupPulsarOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_tunnel_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelGroupAWSKinesisOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_tunnel_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelGroupMemphisOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opts_ps_opts_tunnel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opts_ps_opts_tunnel_proto_goTypes,
		DependencyIndexes: file_opts_ps_opts_tunnel_proto_depIdxs,
		MessageInfos:      file_opts_ps_opts_tunnel_proto_msgTypes,
	}.Build()
	File_opts_ps_opts_tunnel_proto = out.File
	file_opts_ps_opts_tunnel_proto_rawDesc = nil
	file_opts_ps_opts_tunnel_proto_goTypes = nil
	file_opts_ps_opts_tunnel_proto_depIdxs = nil
}
