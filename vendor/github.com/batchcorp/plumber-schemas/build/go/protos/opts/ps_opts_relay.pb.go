// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: opts/ps_opts_relay.proto

package opts

import (
	args "github.com/batchcorp/plumber-schemas/build/go/protos/args"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RelayCLIOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='What address to bind the built-in HTTP server to',env='PLUMBER_RELAY_HTTP_LISTEN_ADDRESS',default='localhost:9191'"
	HttpListenAddress string `protobuf:"bytes,1,opt,name=http_listen_address,json=httpListenAddress,proto3" json:"http_listen_address,omitempty" kong:"help='What address to bind the built-in HTTP server to',env='PLUMBER_RELAY_HTTP_LISTEN_ADDRESS',default='localhost:9191'"`
}

func (x *RelayCLIOptions) Reset() {
	*x = RelayCLIOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_relay_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayCLIOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayCLIOptions) ProtoMessage() {}

func (x *RelayCLIOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_relay_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayCLIOptions.ProtoReflect.Descriptor instead.
func (*RelayCLIOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_relay_proto_rawDescGZIP(), []int{0}
}

func (x *RelayCLIOptions) GetHttpListenAddress() string {
	if x != nil {
		return x.HttpListenAddress
	}
	return ""
}

// Relay is the structure that backends accept for facilitating a relay.
// NOTE: _conn is only used by the CLI - desktop does not need to set it.
type RelayOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='Secret collection token',env='PLUMBER_RELAY_TOKEN',name=token,required"
	CollectionToken string `protobuf:"bytes,1,opt,name=collection_token,json=collectionToken,proto3" json:"collection_token,omitempty" kong:"help='Secret collection token',env='PLUMBER_RELAY_TOKEN',name=token,required"`
	// @gotags: kong:"help='How many messages to send in a single batch',env='PLUMBER_RELAY_BATCH_SIZE',default=1000"
	BatchSize int32 `protobuf:"varint,2,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty" kong:"help='How many messages to send in a single batch',env='PLUMBER_RELAY_BATCH_SIZE',default=1000"`
	// @gotags: kong:"help='How many times plumber will try re-sending a batch',env='PLUMBER_RELAY_BATCH_MAX_RETRY',default=3"
	BatchMaxRetry int32 `protobuf:"varint,3,opt,name=batch_max_retry,json=batchMaxRetry,proto3" json:"batch_max_retry,omitempty" kong:"help='How many times plumber will try re-sending a batch',env='PLUMBER_RELAY_BATCH_MAX_RETRY',default=3"`
	// Required for desktop; ignored in CLI.
	// @gotags: kong:"-"
	ConnectionId string `protobuf:"bytes,4,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" kong:"-"`
	// @gotags: kong:"help='How many workers to launch per relay',env='PLUMBER_RELAY_NUM_WORKERS',default=10"
	NumWorkers int32 `protobuf:"varint,5,opt,name=num_workers,json=numWorkers,proto3" json:"num_workers,omitempty" kong:"help='How many workers to launch per relay',env='PLUMBER_RELAY_NUM_WORKERS',default=10"`
	// @gotags: kong:"group=stats,help='Display periodic read stats'"
	StatsEnable bool `protobuf:"varint,6,opt,name=stats_enable,json=statsEnable,proto3" json:"stats_enable,omitempty" kong:"group=stats,help='Display periodic read stats'"`
	// @gotags: kong:"group=stats,help='How often to print stats',default=5"
	StatsReportIntervalSec int32 `protobuf:"varint,7,opt,name=stats_report_interval_sec,json=statsReportIntervalSec,proto3" json:"stats_report_interval_sec,omitempty" kong:"group=stats,help='How often to print stats',default=5"`
	// @gotags: kong:"help='Consumed messages are intended to be dead-lettered',env='PLUMBER_RELAY_DEAD_LETTER'"
	DeadLetter bool `protobuf:"varint,8,opt,name=dead_letter,json=deadLetter,proto3" json:"dead_letter,omitempty" kong:"help='Consumed messages are intended to be dead-lettered',env='PLUMBER_RELAY_DEAD_LETTER'"`
	// @gotags: kong:"help='Alternative collector to relay events to',name='grpc-address',env='PLUMBER_RELAY_GRPC_ADDRESS',default='grpc-collector.streamdal.com:9000'"
	XStreamdalGrpcAddress string `protobuf:"bytes,1000,opt,name=_streamdal_grpc_address,json=StreamdalGrpcAddress,proto3" json:"_streamdal_grpc_address,omitempty" kong:"help='Alternative collector to relay events to',name='grpc-address',env='PLUMBER_RELAY_GRPC_ADDRESS',default='grpc-collector.streamdal.com:9000'"`
	// @gotags: kong:"help='Whether to use TLS with collector',name=grpc-disable-tls,env='PLUMBER_RELAY_GRPC_DISABLE_TLS',default=false"
	XStreamdalGrpcDisableTls bool `protobuf:"varint,1001,opt,name=_streamdal_grpc_disable_tls,json=StreamdalGrpcDisableTls,proto3" json:"_streamdal_grpc_disable_tls,omitempty" kong:"help='Whether to use TLS with collector',name=grpc-disable-tls,env='PLUMBER_RELAY_GRPC_DISABLE_TLS',default=false"`
	// @gotags: kong:"help='How long to wait before giving up talking to the gRPC collector',name='grpc-timeout-seconds',env='PLUMBER_RELAY_GRPC_TIMEOUT',default=5"
	XStreamdalGrpcTimeoutSeconds int32 `protobuf:"varint,1002,opt,name=_streamdal_grpc_timeout_seconds,json=StreamdalGrpcTimeoutSeconds,proto3" json:"_streamdal_grpc_timeout_seconds,omitempty" kong:"help='How long to wait before giving up talking to the gRPC collector',name='grpc-timeout-seconds',env='PLUMBER_RELAY_GRPC_TIMEOUT',default=5"`
	// ID of the created relay entry; populated by plumber.
	// @gotags: kong:"-"
	XRelayId string `protobuf:"bytes,1003,opt,name=_relay_id,json=RelayId,proto3" json:"_relay_id,omitempty" kong:"-"`
	// @gotags: kong:"embed"
	XCliOptions *RelayCLIOptions `protobuf:"bytes,1004,opt,name=_cli_options,json=CliOptions,proto3" json:"_cli_options,omitempty" kong:"embed"`
	// Populated by plumber server during GetRelay* methods
	// @gotags: kong:"-"
	XActive bool `protobuf:"varint,1005,opt,name=_active,json=Active,proto3" json:"_active,omitempty" kong:"-"`
	// @gotags: kong:"cmd,help='Apache Kafka'"
	Kafka *RelayGroupKafkaOptions `protobuf:"bytes,100,opt,name=kafka,proto3" json:"kafka,omitempty" kong:"cmd,help='Apache Kafka'"`
	// @gotags: kong:"cmd,help='AWS Simple Queue System'"
	AwsSqs *RelayGroupAWSSQSOptions `protobuf:"bytes,101,opt,name=aws_sqs,json=awsSqs,proto3" json:"aws_sqs,omitempty" kong:"cmd,help='AWS Simple Queue System'"`
	// @gotags: kong:"cmd,help='MongoDB (CDC)'"
	Mongo *RelayGroupMongoOptions `protobuf:"bytes,102,opt,name=mongo,proto3" json:"mongo,omitempty" kong:"cmd,help='MongoDB (CDC)'"`
	// @gotags: kong:"cmd,help='NSQ'"
	Nsq *RelayGroupNSQOptions `protobuf:"bytes,103,opt,name=nsq,proto3" json:"nsq,omitempty" kong:"cmd,help='NSQ'"`
	// @gotags: kong:"cmd,help='MQTT'"
	Rabbit *RelayGroupRabbitOptions `protobuf:"bytes,104,opt,name=rabbit,proto3" json:"rabbit,omitempty" kong:"cmd,help='MQTT'"`
	// @gotags: kong:"cmd,help='MQTT'"
	Mqtt *RelayGroupMQTTOptions `protobuf:"bytes,105,opt,name=mqtt,proto3" json:"mqtt,omitempty" kong:"cmd,help='MQTT'"`
	// @gotags: kong:"cmd,help='Azure Service Bus'"
	AzureServiceBus *RelayGroupAzureServiceBusOptions `protobuf:"bytes,106,opt,name=azure_service_bus,json=azureServiceBus,proto3" json:"azure_service_bus,omitempty" kong:"cmd,help='Azure Service Bus'"`
	// @gotags: kong:"cmd,help='Google Cloud Platform Pub/Sub'"
	GcpPubsub *RelayGroupGCPPubSubOptions `protobuf:"bytes,107,opt,name=gcp_pubsub,json=gcpPubsub,proto3" json:"gcp_pubsub,omitempty" kong:"cmd,help='Google Cloud Platform Pub/Sub'"`
	// @gotags: kong:"cmd,help='KubeMQ Queue'"
	KubemqQueue *RelayGroupKubeMQQueueOptions `protobuf:"bytes,108,opt,name=kubemq_queue,json=kubemqQueue,proto3" json:"kubemq_queue,omitempty" kong:"cmd,help='KubeMQ Queue'"`
	// @gotags: kong:"cmd,help='Redis PubSub'"
	RedisPubsub *RelayGroupRedisPubSubOptions `protobuf:"bytes,109,opt,name=redis_pubsub,json=redisPubsub,proto3" json:"redis_pubsub,omitempty" kong:"cmd,help='Redis PubSub'"`
	// @gotags: kong:"cmd,help='Redis Streams'"
	RedisStreams *RelayGroupRedisStreamsOptions `protobuf:"bytes,111,opt,name=redis_streams,json=redisStreams,proto3" json:"redis_streams,omitempty" kong:"cmd,help='Redis Streams'"`
	// @gotags: kong:"cmd,help='PostgreSQL (CDC)'"
	Postgres *RelayGroupPostgresOptions `protobuf:"bytes,112,opt,name=postgres,proto3" json:"postgres,omitempty" kong:"cmd,help='PostgreSQL (CDC)'"`
	// @gotags: kong:"cmd,help='NATS'"
	Nats *RelayGroupNatsOptions `protobuf:"bytes,113,opt,name=nats,proto3" json:"nats,omitempty" kong:"cmd,help='NATS'"`
	// @gotags: kong:"cmd,help='NATS Streaming'"
	NatsStreaming *RelayGroupNatsStreamingOptions `protobuf:"bytes,114,opt,name=nats_streaming,json=natsStreaming,proto3" json:"nats_streaming,omitempty" kong:"cmd,help='NATS Streaming'"`
	// @gotags: kong:"cmd,help='NATS JetStream'"
	NatsJetstream *RelayGroupNatsJetStreamOptions `protobuf:"bytes,115,opt,name=nats_jetstream,json=natsJetstream,proto3" json:"nats_jetstream,omitempty" kong:"cmd,help='NATS JetStream'"`
}

func (x *RelayOptions) Reset() {
	*x = RelayOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_relay_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayOptions) ProtoMessage() {}

func (x *RelayOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_relay_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayOptions.ProtoReflect.Descriptor instead.
func (*RelayOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_relay_proto_rawDescGZIP(), []int{1}
}

func (x *RelayOptions) GetCollectionToken() string {
	if x != nil {
		return x.CollectionToken
	}
	return ""
}

func (x *RelayOptions) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *RelayOptions) GetBatchMaxRetry() int32 {
	if x != nil {
		return x.BatchMaxRetry
	}
	return 0
}

func (x *RelayOptions) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *RelayOptions) GetNumWorkers() int32 {
	if x != nil {
		return x.NumWorkers
	}
	return 0
}

func (x *RelayOptions) GetStatsEnable() bool {
	if x != nil {
		return x.StatsEnable
	}
	return false
}

func (x *RelayOptions) GetStatsReportIntervalSec() int32 {
	if x != nil {
		return x.StatsReportIntervalSec
	}
	return 0
}

func (x *RelayOptions) GetDeadLetter() bool {
	if x != nil {
		return x.DeadLetter
	}
	return false
}

func (x *RelayOptions) GetXStreamdalGrpcAddress() string {
	if x != nil {
		return x.XStreamdalGrpcAddress
	}
	return ""
}

func (x *RelayOptions) GetXStreamdalGrpcDisableTls() bool {
	if x != nil {
		return x.XStreamdalGrpcDisableTls
	}
	return false
}

func (x *RelayOptions) GetXStreamdalGrpcTimeoutSeconds() int32 {
	if x != nil {
		return x.XStreamdalGrpcTimeoutSeconds
	}
	return 0
}

func (x *RelayOptions) GetXRelayId() string {
	if x != nil {
		return x.XRelayId
	}
	return ""
}

func (x *RelayOptions) GetXCliOptions() *RelayCLIOptions {
	if x != nil {
		return x.XCliOptions
	}
	return nil
}

func (x *RelayOptions) GetXActive() bool {
	if x != nil {
		return x.XActive
	}
	return false
}

func (x *RelayOptions) GetKafka() *RelayGroupKafkaOptions {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *RelayOptions) GetAwsSqs() *RelayGroupAWSSQSOptions {
	if x != nil {
		return x.AwsSqs
	}
	return nil
}

func (x *RelayOptions) GetMongo() *RelayGroupMongoOptions {
	if x != nil {
		return x.Mongo
	}
	return nil
}

func (x *RelayOptions) GetNsq() *RelayGroupNSQOptions {
	if x != nil {
		return x.Nsq
	}
	return nil
}

func (x *RelayOptions) GetRabbit() *RelayGroupRabbitOptions {
	if x != nil {
		return x.Rabbit
	}
	return nil
}

func (x *RelayOptions) GetMqtt() *RelayGroupMQTTOptions {
	if x != nil {
		return x.Mqtt
	}
	return nil
}

func (x *RelayOptions) GetAzureServiceBus() *RelayGroupAzureServiceBusOptions {
	if x != nil {
		return x.AzureServiceBus
	}
	return nil
}

func (x *RelayOptions) GetGcpPubsub() *RelayGroupGCPPubSubOptions {
	if x != nil {
		return x.GcpPubsub
	}
	return nil
}

func (x *RelayOptions) GetKubemqQueue() *RelayGroupKubeMQQueueOptions {
	if x != nil {
		return x.KubemqQueue
	}
	return nil
}

func (x *RelayOptions) GetRedisPubsub() *RelayGroupRedisPubSubOptions {
	if x != nil {
		return x.RedisPubsub
	}
	return nil
}

func (x *RelayOptions) GetRedisStreams() *RelayGroupRedisStreamsOptions {
	if x != nil {
		return x.RedisStreams
	}
	return nil
}

func (x *RelayOptions) GetPostgres() *RelayGroupPostgresOptions {
	if x != nil {
		return x.Postgres
	}
	return nil
}

func (x *RelayOptions) GetNats() *RelayGroupNatsOptions {
	if x != nil {
		return x.Nats
	}
	return nil
}

func (x *RelayOptions) GetNatsStreaming() *RelayGroupNatsStreamingOptions {
	if x != nil {
		return x.NatsStreaming
	}
	return nil
}

func (x *RelayOptions) GetNatsJetstream() *RelayGroupNatsJetStreamOptions {
	if x != nil {
		return x.NatsJetstream
	}
	return nil
}

type RelayGroupKafkaOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.KafkaConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.KafkaRelayArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *RelayGroupKafkaOptions) Reset() {
	*x = RelayGroupKafkaOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_relay_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayGroupKafkaOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayGroupKafkaOptions) ProtoMessage() {}

func (x *RelayGroupKafkaOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_relay_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayGroupKafkaOptions.ProtoReflect.Descriptor instead.
func (*RelayGroupKafkaOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_relay_proto_rawDescGZIP(), []int{2}
}

func (x *RelayGroupKafkaOptions) GetXConn() *args.KafkaConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *RelayGroupKafkaOptions) GetArgs() *args.KafkaRelayArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type RelayGroupAWSSQSOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.AWSSQSConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.AWSSQSRelayArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *RelayGroupAWSSQSOptions) Reset() {
	*x = RelayGroupAWSSQSOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_relay_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayGroupAWSSQSOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayGroupAWSSQSOptions) ProtoMessage() {}

func (x *RelayGroupAWSSQSOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_relay_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayGroupAWSSQSOptions.ProtoReflect.Descriptor instead.
func (*RelayGroupAWSSQSOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_relay_proto_rawDescGZIP(), []int{3}
}

func (x *RelayGroupAWSSQSOptions) GetXConn() *args.AWSSQSConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *RelayGroupAWSSQSOptions) GetArgs() *args.AWSSQSRelayArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type RelayGroupMongoOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.MongoConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.MongoReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *RelayGroupMongoOptions) Reset() {
	*x = RelayGroupMongoOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_relay_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayGroupMongoOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayGroupMongoOptions) ProtoMessage() {}

func (x *RelayGroupMongoOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_relay_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayGroupMongoOptions.ProtoReflect.Descriptor instead.
func (*RelayGroupMongoOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_relay_proto_rawDescGZIP(), []int{4}
}

func (x *RelayGroupMongoOptions) GetXConn() *args.MongoConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *RelayGroupMongoOptions) GetArgs() *args.MongoReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type RelayGroupNSQOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.NSQConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.NSQReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *RelayGroupNSQOptions) Reset() {
	*x = RelayGroupNSQOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_relay_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayGroupNSQOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayGroupNSQOptions) ProtoMessage() {}

func (x *RelayGroupNSQOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_relay_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayGroupNSQOptions.ProtoReflect.Descriptor instead.
func (*RelayGroupNSQOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_relay_proto_rawDescGZIP(), []int{5}
}

func (x *RelayGroupNSQOptions) GetXConn() *args.NSQConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *RelayGroupNSQOptions) GetArgs() *args.NSQReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type RelayGroupPostgresOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.PostgresConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.PostgresReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *RelayGroupPostgresOptions) Reset() {
	*x = RelayGroupPostgresOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_relay_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayGroupPostgresOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayGroupPostgresOptions) ProtoMessage() {}

func (x *RelayGroupPostgresOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_relay_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayGroupPostgresOptions.ProtoReflect.Descriptor instead.
func (*RelayGroupPostgresOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_relay_proto_rawDescGZIP(), []int{6}
}

func (x *RelayGroupPostgresOptions) GetXConn() *args.PostgresConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *RelayGroupPostgresOptions) GetArgs() *args.PostgresReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type RelayGroupRabbitOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.RabbitConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.RabbitReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *RelayGroupRabbitOptions) Reset() {
	*x = RelayGroupRabbitOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_relay_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayGroupRabbitOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayGroupRabbitOptions) ProtoMessage() {}

func (x *RelayGroupRabbitOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_relay_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayGroupRabbitOptions.ProtoReflect.Descriptor instead.
func (*RelayGroupRabbitOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_relay_proto_rawDescGZIP(), []int{7}
}

func (x *RelayGroupRabbitOptions) GetXConn() *args.RabbitConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *RelayGroupRabbitOptions) GetArgs() *args.RabbitReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type RelayGroupRedisPubSubOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.RedisPubSubConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.RedisPubSubReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *RelayGroupRedisPubSubOptions) Reset() {
	*x = RelayGroupRedisPubSubOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_relay_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayGroupRedisPubSubOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayGroupRedisPubSubOptions) ProtoMessage() {}

func (x *RelayGroupRedisPubSubOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_relay_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayGroupRedisPubSubOptions.ProtoReflect.Descriptor instead.
func (*RelayGroupRedisPubSubOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_relay_proto_rawDescGZIP(), []int{8}
}

func (x *RelayGroupRedisPubSubOptions) GetXConn() *args.RedisPubSubConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *RelayGroupRedisPubSubOptions) GetArgs() *args.RedisPubSubReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type RelayGroupRedisStreamsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.RedisStreamsConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.RedisStreamsReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *RelayGroupRedisStreamsOptions) Reset() {
	*x = RelayGroupRedisStreamsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_relay_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayGroupRedisStreamsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayGroupRedisStreamsOptions) ProtoMessage() {}

func (x *RelayGroupRedisStreamsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_relay_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayGroupRedisStreamsOptions.ProtoReflect.Descriptor instead.
func (*RelayGroupRedisStreamsOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_relay_proto_rawDescGZIP(), []int{9}
}

func (x *RelayGroupRedisStreamsOptions) GetXConn() *args.RedisStreamsConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *RelayGroupRedisStreamsOptions) GetArgs() *args.RedisStreamsReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type RelayGroupAzureServiceBusOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.AzureServiceBusConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.AzureServiceBusReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *RelayGroupAzureServiceBusOptions) Reset() {
	*x = RelayGroupAzureServiceBusOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_relay_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayGroupAzureServiceBusOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayGroupAzureServiceBusOptions) ProtoMessage() {}

func (x *RelayGroupAzureServiceBusOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_relay_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayGroupAzureServiceBusOptions.ProtoReflect.Descriptor instead.
func (*RelayGroupAzureServiceBusOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_relay_proto_rawDescGZIP(), []int{10}
}

func (x *RelayGroupAzureServiceBusOptions) GetXConn() *args.AzureServiceBusConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *RelayGroupAzureServiceBusOptions) GetArgs() *args.AzureServiceBusReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type RelayGroupMQTTOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.MQTTConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.MQTTReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *RelayGroupMQTTOptions) Reset() {
	*x = RelayGroupMQTTOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_relay_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayGroupMQTTOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayGroupMQTTOptions) ProtoMessage() {}

func (x *RelayGroupMQTTOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_relay_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayGroupMQTTOptions.ProtoReflect.Descriptor instead.
func (*RelayGroupMQTTOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_relay_proto_rawDescGZIP(), []int{11}
}

func (x *RelayGroupMQTTOptions) GetXConn() *args.MQTTConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *RelayGroupMQTTOptions) GetArgs() *args.MQTTReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type RelayGroupGCPPubSubOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.GCPPubSubConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.GCPPubSubReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *RelayGroupGCPPubSubOptions) Reset() {
	*x = RelayGroupGCPPubSubOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_relay_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayGroupGCPPubSubOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayGroupGCPPubSubOptions) ProtoMessage() {}

func (x *RelayGroupGCPPubSubOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_relay_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayGroupGCPPubSubOptions.ProtoReflect.Descriptor instead.
func (*RelayGroupGCPPubSubOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_relay_proto_rawDescGZIP(), []int{12}
}

func (x *RelayGroupGCPPubSubOptions) GetXConn() *args.GCPPubSubConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *RelayGroupGCPPubSubOptions) GetArgs() *args.GCPPubSubReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type RelayGroupKubeMQQueueOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.KubeMQQueueConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.KubeMQQueueReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *RelayGroupKubeMQQueueOptions) Reset() {
	*x = RelayGroupKubeMQQueueOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_relay_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayGroupKubeMQQueueOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayGroupKubeMQQueueOptions) ProtoMessage() {}

func (x *RelayGroupKubeMQQueueOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_relay_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayGroupKubeMQQueueOptions.ProtoReflect.Descriptor instead.
func (*RelayGroupKubeMQQueueOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_relay_proto_rawDescGZIP(), []int{13}
}

func (x *RelayGroupKubeMQQueueOptions) GetXConn() *args.KubeMQQueueConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *RelayGroupKubeMQQueueOptions) GetArgs() *args.KubeMQQueueReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type RelayGroupNatsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.NatsConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.NatsReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *RelayGroupNatsOptions) Reset() {
	*x = RelayGroupNatsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_relay_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayGroupNatsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayGroupNatsOptions) ProtoMessage() {}

func (x *RelayGroupNatsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_relay_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayGroupNatsOptions.ProtoReflect.Descriptor instead.
func (*RelayGroupNatsOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_relay_proto_rawDescGZIP(), []int{14}
}

func (x *RelayGroupNatsOptions) GetXConn() *args.NatsConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *RelayGroupNatsOptions) GetArgs() *args.NatsReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type RelayGroupNatsStreamingOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.NatsStreamingConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.NatsStreamingReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *RelayGroupNatsStreamingOptions) Reset() {
	*x = RelayGroupNatsStreamingOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_relay_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayGroupNatsStreamingOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayGroupNatsStreamingOptions) ProtoMessage() {}

func (x *RelayGroupNatsStreamingOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_relay_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayGroupNatsStreamingOptions.ProtoReflect.Descriptor instead.
func (*RelayGroupNatsStreamingOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_relay_proto_rawDescGZIP(), []int{15}
}

func (x *RelayGroupNatsStreamingOptions) GetXConn() *args.NatsStreamingConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *RelayGroupNatsStreamingOptions) GetArgs() *args.NatsStreamingReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type RelayGroupNatsJetStreamOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.NatsJetstreamConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.NatsJetstreamReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *RelayGroupNatsJetStreamOptions) Reset() {
	*x = RelayGroupNatsJetStreamOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_relay_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayGroupNatsJetStreamOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayGroupNatsJetStreamOptions) ProtoMessage() {}

func (x *RelayGroupNatsJetStreamOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_relay_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayGroupNatsJetStreamOptions.ProtoReflect.Descriptor instead.
func (*RelayGroupNatsJetStreamOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_relay_proto_rawDescGZIP(), []int{16}
}

func (x *RelayGroupNatsJetStreamOptions) GetXConn() *args.NatsJetstreamConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *RelayGroupNatsJetStreamOptions) GetArgs() *args.NatsJetstreamReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

var File_opts_ps_opts_relay_proto protoreflect.FileDescriptor

var file_opts_ps_opts_relay_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6f, 0x70, 0x74, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x1a, 0x1a, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73,
	0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x71, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67,
	0x73, 0x5f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x62, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x61, 0x72, 0x67, 0x73, 0x2f,
	0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x67, 0x63, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70,
	0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73,
	0x5f, 0x6b, 0x75, 0x62, 0x65, 0x6d, 0x71, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67,
	0x73, 0x5f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61,
	0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6d, 0x71, 0x74, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f,
	0x61, 0x72, 0x67, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x21, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6e, 0x61,
	0x74, 0x73, 0x5f, 0x6a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x21, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73,
	0x5f, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61,
	0x72, 0x67, 0x73, 0x5f, 0x6e, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61,
	0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x72, 0x67, 0x73,
	0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61,
	0x72, 0x67, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f,
	0x61, 0x72, 0x67, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x43, 0x4c, 0x49, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x68, 0x74, 0x74, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8f, 0x0d, 0x0a, 0x0c,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53,
	0x65, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61,
	0x6c, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xe8,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x47, 0x72, 0x70, 0x63,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xea, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x47,
	0x72, 0x70, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0xeb,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12, 0x3f,
	0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xec,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f,
	0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x4c, 0x49, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x12, 0x3d, 0x0a, 0x07, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x71, 0x73, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f,
	0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x57,
	0x53, 0x53, 0x51, 0x53, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x61, 0x77, 0x73,
	0x53, 0x71, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x6e, 0x67, 0x6f,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x12, 0x33,
	0x0a, 0x03, 0x6e, 0x73, 0x71, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x53, 0x51, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03,
	0x6e, 0x73, 0x71, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x62, 0x62,
	0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x72, 0x61, 0x62, 0x62, 0x69,
	0x74, 0x12, 0x36, 0x0a, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x51, 0x54, 0x54, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x12, 0x59, 0x0a, 0x11, 0x61, 0x7a, 0x75,
	0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x18, 0x6a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x7a, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x67, 0x63, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x47, 0x43, 0x50, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x09, 0x67, 0x63, 0x70, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x12, 0x4c, 0x0a, 0x0c,
	0x6b, 0x75, 0x62, 0x65, 0x6d, 0x71, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x6c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x75, 0x62, 0x65, 0x4d,
	0x51, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x6b,
	0x75, 0x62, 0x65, 0x6d, 0x71, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x64, 0x69, 0x73, 0x50, 0x75,
	0x62, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x12, 0x4f, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69,
	0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x42, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x36, 0x0a,
	0x04, 0x6e, 0x61, 0x74, 0x73, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x74, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x04, 0x6e, 0x61, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x6e, 0x61, 0x74, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x0e, 0x6e, 0x61, 0x74,
	0x73, 0x5f, 0x6a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x73, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x74, 0x73, 0x4a, 0x65,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d,
	0x6e, 0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x76, 0x0a,
	0x16, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x72, 0x67, 0x73, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04,
	0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73,
	0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x67, 0x73, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x79, 0x0a, 0x17, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x57, 0x53, 0x53, 0x51, 0x53, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x57,
	0x53, 0x53, 0x51, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x30,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x53, 0x51,
	0x53, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x22, 0x75, 0x0a, 0x16, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f,
	0x6e, 0x67, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x43, 0x6f, 0x6e,
	0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61,
	0x72, 0x67, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67,
	0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x6f, 0x0a, 0x14, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x53, 0x51, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x29, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x53, 0x51,
	0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x53, 0x51, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72,
	0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x7e, 0x0a, 0x19, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72,
	0x67, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x52,
	0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67,
	0x73, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72,
	0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x78, 0x0a, 0x17, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73,
	0x2e, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e,
	0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x61,
	0x62, 0x62, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x64, 0x69, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73,
	0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x6e,
	0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72,
	0x67, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x52, 0x65,
	0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x8a, 0x01, 0x0a,
	0x1d, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32,
	0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f,
	0x6e, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x61, 0x64, 0x41,
	0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x20, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35,
	0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x7a, 0x75, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x52,
	0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67,
	0x73, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22,
	0x72, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x51, 0x54,
	0x54, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4d, 0x51, 0x54, 0x54, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04,
	0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73,
	0x2e, 0x4d, 0x51, 0x54, 0x54, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x47, 0x43, 0x50, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e,
	0x47, 0x43, 0x50, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43,
	0x6f, 0x6e, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e,
	0x47, 0x43, 0x50, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67,
	0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x75, 0x62, 0x65, 0x4d, 0x51, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x4d, 0x51, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x4d, 0x51, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x22, 0x72, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x74, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x6e,
	0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72,
	0x67, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x36, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x36, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x4a, 0x65,
	0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x70, 0x6c,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6f, 0x70,
	0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opts_ps_opts_relay_proto_rawDescOnce sync.Once
	file_opts_ps_opts_relay_proto_rawDescData = file_opts_ps_opts_relay_proto_rawDesc
)

func file_opts_ps_opts_relay_proto_rawDescGZIP() []byte {
	file_opts_ps_opts_relay_proto_rawDescOnce.Do(func() {
		file_opts_ps_opts_relay_proto_rawDescData = protoimpl.X.CompressGZIP(file_opts_ps_opts_relay_proto_rawDescData)
	})
	return file_opts_ps_opts_relay_proto_rawDescData
}

var file_opts_ps_opts_relay_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_opts_ps_opts_relay_proto_goTypes = []interface{}{
	(*RelayCLIOptions)(nil),                  // 0: protos.opts.RelayCLIOptions
	(*RelayOptions)(nil),                     // 1: protos.opts.RelayOptions
	(*RelayGroupKafkaOptions)(nil),           // 2: protos.opts.RelayGroupKafkaOptions
	(*RelayGroupAWSSQSOptions)(nil),          // 3: protos.opts.RelayGroupAWSSQSOptions
	(*RelayGroupMongoOptions)(nil),           // 4: protos.opts.RelayGroupMongoOptions
	(*RelayGroupNSQOptions)(nil),             // 5: protos.opts.RelayGroupNSQOptions
	(*RelayGroupPostgresOptions)(nil),        // 6: protos.opts.RelayGroupPostgresOptions
	(*RelayGroupRabbitOptions)(nil),          // 7: protos.opts.RelayGroupRabbitOptions
	(*RelayGroupRedisPubSubOptions)(nil),     // 8: protos.opts.RelayGroupRedisPubSubOptions
	(*RelayGroupRedisStreamsOptions)(nil),    // 9: protos.opts.RelayGroupRedisStreamsOptions
	(*RelayGroupAzureServiceBusOptions)(nil), // 10: protos.opts.RelayGroupAzureServiceBusOptions
	(*RelayGroupMQTTOptions)(nil),            // 11: protos.opts.RelayGroupMQTTOptions
	(*RelayGroupGCPPubSubOptions)(nil),       // 12: protos.opts.RelayGroupGCPPubSubOptions
	(*RelayGroupKubeMQQueueOptions)(nil),     // 13: protos.opts.RelayGroupKubeMQQueueOptions
	(*RelayGroupNatsOptions)(nil),            // 14: protos.opts.RelayGroupNatsOptions
	(*RelayGroupNatsStreamingOptions)(nil),   // 15: protos.opts.RelayGroupNatsStreamingOptions
	(*RelayGroupNatsJetStreamOptions)(nil),   // 16: protos.opts.RelayGroupNatsJetStreamOptions
	(*args.KafkaConn)(nil),                   // 17: protos.args.KafkaConn
	(*args.KafkaRelayArgs)(nil),              // 18: protos.args.KafkaRelayArgs
	(*args.AWSSQSConn)(nil),                  // 19: protos.args.AWSSQSConn
	(*args.AWSSQSRelayArgs)(nil),             // 20: protos.args.AWSSQSRelayArgs
	(*args.MongoConn)(nil),                   // 21: protos.args.MongoConn
	(*args.MongoReadArgs)(nil),               // 22: protos.args.MongoReadArgs
	(*args.NSQConn)(nil),                     // 23: protos.args.NSQConn
	(*args.NSQReadArgs)(nil),                 // 24: protos.args.NSQReadArgs
	(*args.PostgresConn)(nil),                // 25: protos.args.PostgresConn
	(*args.PostgresReadArgs)(nil),            // 26: protos.args.PostgresReadArgs
	(*args.RabbitConn)(nil),                  // 27: protos.args.RabbitConn
	(*args.RabbitReadArgs)(nil),              // 28: protos.args.RabbitReadArgs
	(*args.RedisPubSubConn)(nil),             // 29: protos.args.RedisPubSubConn
	(*args.RedisPubSubReadArgs)(nil),         // 30: protos.args.RedisPubSubReadArgs
	(*args.RedisStreamsConn)(nil),            // 31: protos.args.RedisStreamsConn
	(*args.RedisStreamsReadArgs)(nil),        // 32: protos.args.RedisStreamsReadArgs
	(*args.AzureServiceBusConn)(nil),         // 33: protos.args.AzureServiceBusConn
	(*args.AzureServiceBusReadArgs)(nil),     // 34: protos.args.AzureServiceBusReadArgs
	(*args.MQTTConn)(nil),                    // 35: protos.args.MQTTConn
	(*args.MQTTReadArgs)(nil),                // 36: protos.args.MQTTReadArgs
	(*args.GCPPubSubConn)(nil),               // 37: protos.args.GCPPubSubConn
	(*args.GCPPubSubReadArgs)(nil),           // 38: protos.args.GCPPubSubReadArgs
	(*args.KubeMQQueueConn)(nil),             // 39: protos.args.KubeMQQueueConn
	(*args.KubeMQQueueReadArgs)(nil),         // 40: protos.args.KubeMQQueueReadArgs
	(*args.NatsConn)(nil),                    // 41: protos.args.NatsConn
	(*args.NatsReadArgs)(nil),                // 42: protos.args.NatsReadArgs
	(*args.NatsStreamingConn)(nil),           // 43: protos.args.NatsStreamingConn
	(*args.NatsStreamingReadArgs)(nil),       // 44: protos.args.NatsStreamingReadArgs
	(*args.NatsJetstreamConn)(nil),           // 45: protos.args.NatsJetstreamConn
	(*args.NatsJetstreamReadArgs)(nil),       // 46: protos.args.NatsJetstreamReadArgs
}
var file_opts_ps_opts_relay_proto_depIdxs = []int32{
	0,  // 0: protos.opts.RelayOptions._cli_options:type_name -> protos.opts.RelayCLIOptions
	2,  // 1: protos.opts.RelayOptions.kafka:type_name -> protos.opts.RelayGroupKafkaOptions
	3,  // 2: protos.opts.RelayOptions.aws_sqs:type_name -> protos.opts.RelayGroupAWSSQSOptions
	4,  // 3: protos.opts.RelayOptions.mongo:type_name -> protos.opts.RelayGroupMongoOptions
	5,  // 4: protos.opts.RelayOptions.nsq:type_name -> protos.opts.RelayGroupNSQOptions
	7,  // 5: protos.opts.RelayOptions.rabbit:type_name -> protos.opts.RelayGroupRabbitOptions
	11, // 6: protos.opts.RelayOptions.mqtt:type_name -> protos.opts.RelayGroupMQTTOptions
	10, // 7: protos.opts.RelayOptions.azure_service_bus:type_name -> protos.opts.RelayGroupAzureServiceBusOptions
	12, // 8: protos.opts.RelayOptions.gcp_pubsub:type_name -> protos.opts.RelayGroupGCPPubSubOptions
	13, // 9: protos.opts.RelayOptions.kubemq_queue:type_name -> protos.opts.RelayGroupKubeMQQueueOptions
	8,  // 10: protos.opts.RelayOptions.redis_pubsub:type_name -> protos.opts.RelayGroupRedisPubSubOptions
	9,  // 11: protos.opts.RelayOptions.redis_streams:type_name -> protos.opts.RelayGroupRedisStreamsOptions
	6,  // 12: protos.opts.RelayOptions.postgres:type_name -> protos.opts.RelayGroupPostgresOptions
	14, // 13: protos.opts.RelayOptions.nats:type_name -> protos.opts.RelayGroupNatsOptions
	15, // 14: protos.opts.RelayOptions.nats_streaming:type_name -> protos.opts.RelayGroupNatsStreamingOptions
	16, // 15: protos.opts.RelayOptions.nats_jetstream:type_name -> protos.opts.RelayGroupNatsJetStreamOptions
	17, // 16: protos.opts.RelayGroupKafkaOptions._conn:type_name -> protos.args.KafkaConn
	18, // 17: protos.opts.RelayGroupKafkaOptions.args:type_name -> protos.args.KafkaRelayArgs
	19, // 18: protos.opts.RelayGroupAWSSQSOptions._conn:type_name -> protos.args.AWSSQSConn
	20, // 19: protos.opts.RelayGroupAWSSQSOptions.args:type_name -> protos.args.AWSSQSRelayArgs
	21, // 20: protos.opts.RelayGroupMongoOptions._conn:type_name -> protos.args.MongoConn
	22, // 21: protos.opts.RelayGroupMongoOptions.args:type_name -> protos.args.MongoReadArgs
	23, // 22: protos.opts.RelayGroupNSQOptions._conn:type_name -> protos.args.NSQConn
	24, // 23: protos.opts.RelayGroupNSQOptions.args:type_name -> protos.args.NSQReadArgs
	25, // 24: protos.opts.RelayGroupPostgresOptions._conn:type_name -> protos.args.PostgresConn
	26, // 25: protos.opts.RelayGroupPostgresOptions.args:type_name -> protos.args.PostgresReadArgs
	27, // 26: protos.opts.RelayGroupRabbitOptions._conn:type_name -> protos.args.RabbitConn
	28, // 27: protos.opts.RelayGroupRabbitOptions.args:type_name -> protos.args.RabbitReadArgs
	29, // 28: protos.opts.RelayGroupRedisPubSubOptions._conn:type_name -> protos.args.RedisPubSubConn
	30, // 29: protos.opts.RelayGroupRedisPubSubOptions.args:type_name -> protos.args.RedisPubSubReadArgs
	31, // 30: protos.opts.RelayGroupRedisStreamsOptions._conn:type_name -> protos.args.RedisStreamsConn
	32, // 31: protos.opts.RelayGroupRedisStreamsOptions.args:type_name -> protos.args.RedisStreamsReadArgs
	33, // 32: protos.opts.RelayGroupAzureServiceBusOptions._conn:type_name -> protos.args.AzureServiceBusConn
	34, // 33: protos.opts.RelayGroupAzureServiceBusOptions.args:type_name -> protos.args.AzureServiceBusReadArgs
	35, // 34: protos.opts.RelayGroupMQTTOptions._conn:type_name -> protos.args.MQTTConn
	36, // 35: protos.opts.RelayGroupMQTTOptions.args:type_name -> protos.args.MQTTReadArgs
	37, // 36: protos.opts.RelayGroupGCPPubSubOptions._conn:type_name -> protos.args.GCPPubSubConn
	38, // 37: protos.opts.RelayGroupGCPPubSubOptions.args:type_name -> protos.args.GCPPubSubReadArgs
	39, // 38: protos.opts.RelayGroupKubeMQQueueOptions._conn:type_name -> protos.args.KubeMQQueueConn
	40, // 39: protos.opts.RelayGroupKubeMQQueueOptions.args:type_name -> protos.args.KubeMQQueueReadArgs
	41, // 40: protos.opts.RelayGroupNatsOptions._conn:type_name -> protos.args.NatsConn
	42, // 41: protos.opts.RelayGroupNatsOptions.args:type_name -> protos.args.NatsReadArgs
	43, // 42: protos.opts.RelayGroupNatsStreamingOptions._conn:type_name -> protos.args.NatsStreamingConn
	44, // 43: protos.opts.RelayGroupNatsStreamingOptions.args:type_name -> protos.args.NatsStreamingReadArgs
	45, // 44: protos.opts.RelayGroupNatsJetStreamOptions._conn:type_name -> protos.args.NatsJetstreamConn
	46, // 45: protos.opts.RelayGroupNatsJetStreamOptions.args:type_name -> protos.args.NatsJetstreamReadArgs
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_opts_ps_opts_relay_proto_init() }
func file_opts_ps_opts_relay_proto_init() {
	if File_opts_ps_opts_relay_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_opts_ps_opts_relay_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayCLIOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_relay_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_relay_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayGroupKafkaOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_relay_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayGroupAWSSQSOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_relay_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayGroupMongoOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_relay_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayGroupNSQOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_relay_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayGroupPostgresOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_relay_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayGroupRabbitOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_relay_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayGroupRedisPubSubOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_relay_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayGroupRedisStreamsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_relay_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayGroupAzureServiceBusOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_relay_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayGroupMQTTOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_relay_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayGroupGCPPubSubOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_relay_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayGroupKubeMQQueueOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_relay_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayGroupNatsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_relay_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayGroupNatsStreamingOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_relay_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayGroupNatsJetStreamOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opts_ps_opts_relay_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opts_ps_opts_relay_proto_goTypes,
		DependencyIndexes: file_opts_ps_opts_relay_proto_depIdxs,
		MessageInfos:      file_opts_ps_opts_relay_proto_msgTypes,
	}.Build()
	File_opts_ps_opts_relay_proto = out.File
	file_opts_ps_opts_relay_proto_rawDesc = nil
	file_opts_ps_opts_relay_proto_goTypes = nil
	file_opts_ps_opts_relay_proto_depIdxs = nil
}
