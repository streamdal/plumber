// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: opts/ps_opts_write.proto

package opts

import (
	args "github.com/batchcorp/plumber-schemas/build/go/protos/args"
	encoding "github.com/batchcorp/plumber-schemas/build/go/protos/encoding"
	records "github.com/batchcorp/plumber-schemas/build/go/protos/records"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WriteCLIOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='Write data from input file',existingfile,xor=input"
	InputFile string `protobuf:"bytes,1,opt,name=input_file,json=inputFile,proto3" json:"input_file,omitempty" kong:"help='Write data from input file',existingfile,xor=input"`
	// @gotags: kong:"help='Treat input as JSON array - each array element will be written as a separate message'"
	InputAsJsonArray bool `protobuf:"varint,2,opt,name=input_as_json_array,json=inputAsJsonArray,proto3" json:"input_as_json_array,omitempty" kong:"help='Treat input as JSON array - each array element will be written as a separate message'"`
	// @gotags: kong:"-"
	InputStdin []string `protobuf:"bytes,3,rep,name=input_stdin,json=inputStdin,proto3" json:"input_stdin,omitempty" kong:"-"`
}

func (x *WriteCLIOptions) Reset() {
	*x = WriteCLIOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_write_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteCLIOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteCLIOptions) ProtoMessage() {}

func (x *WriteCLIOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_write_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteCLIOptions.ProtoReflect.Descriptor instead.
func (*WriteCLIOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_write_proto_rawDescGZIP(), []int{0}
}

func (x *WriteCLIOptions) GetInputFile() string {
	if x != nil {
		return x.InputFile
	}
	return ""
}

func (x *WriteCLIOptions) GetInputAsJsonArray() bool {
	if x != nil {
		return x.InputAsJsonArray
	}
	return false
}

func (x *WriteCLIOptions) GetInputStdin() []string {
	if x != nil {
		return x.InputStdin
	}
	return nil
}

// Write is the structure that backends accept for facilitating a write.
// NOTE: _conn is only used by the CLI - desktop does not need to set it.
type WriteOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required for desktop; ignored in CLI.
	// @gotags: kong:"-"
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" kong:"-"`
	// @gotags: kong:"embed"
	Record *records.WriteRecord `protobuf:"bytes,2,opt,name=record,proto3" json:"record,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	EncodeOptions *encoding.EncodeOptions `protobuf:"bytes,3,opt,name=encode_options,json=encodeOptions,proto3" json:"encode_options,omitempty" kong:"embed"`
	// Optional; CLI-specific and non-backend-specific options
	// @gotags: kong:"embed"
	XCliOptions *WriteCLIOptions `protobuf:"bytes,1000,opt,name=_cli_options,json=CliOptions,proto3" json:"_cli_options,omitempty" kong:"embed"`
	// @gotags: kong:"cmd,help='Apache Kafka'"
	Kafka *WriteGroupKafkaOptions `protobuf:"bytes,100,opt,name=kafka,proto3" json:"kafka,omitempty" kong:"cmd,help='Apache Kafka'"`
	// @gotags: kong:"cmd,help='Apache ActiveMQ'"
	Activemq *WriteGroupActiveMQOptions `protobuf:"bytes,101,opt,name=activemq,proto3" json:"activemq,omitempty" kong:"cmd,help='Apache ActiveMQ'"`
	// @gotags: kong:"cmd,help='AWS Simple Queue System'"
	AwsSqs *WriteGroupAWSSQSOptions `protobuf:"bytes,102,opt,name=aws_sqs,json=awsSqs,proto3" json:"aws_sqs,omitempty" kong:"cmd,help='AWS Simple Queue System'"`
	// @gotags: kong:"cmd,help='AWS Simple Notification System'"
	AwsSns *WriteGroupAWSSNSOptions `protobuf:"bytes,103,opt,name=aws_sns,json=awsSns,proto3" json:"aws_sns,omitempty" kong:"cmd,help='AWS Simple Notification System'"`
	// @gotags: kong:"cmd,help='NATS'"
	Nats *WriteGroupNatsOptions `protobuf:"bytes,104,opt,name=nats,proto3" json:"nats,omitempty" kong:"cmd,help='NATS'"`
	// @gotags: kong:"cmd,help='NATS Streaming'"
	NatsStreaming *WriteGroupNatsStreamingOptions `protobuf:"bytes,105,opt,name=nats_streaming,json=natsStreaming,proto3" json:"nats_streaming,omitempty" kong:"cmd,help='NATS Streaming'"`
	// @gotags: kong:"cmd,help='NSQ'"
	Nsq *WriteGroupNSQOptions `protobuf:"bytes,106,opt,name=nsq,proto3" json:"nsq,omitempty" kong:"cmd,help='NSQ'"`
	// @gotags: kong:"cmd,help='Apache Pulsar'"
	Pulsar *WriteGroupPulsarOptions `protobuf:"bytes,107,opt,name=pulsar,proto3" json:"pulsar,omitempty" kong:"cmd,help='Apache Pulsar'"`
	// @gotags: kong:"cmd,help='RabbitMQ'"
	Rabbit *WriteGroupRabbitOptions `protobuf:"bytes,108,opt,name=rabbit,proto3" json:"rabbit,omitempty" kong:"cmd,help='RabbitMQ'"`
	// @gotags: kong:"cmd,help='RabbitMQ Streams'"
	RabbitStreams *WriteGroupRabbitStreamsOptions `protobuf:"bytes,109,opt,name=rabbit_streams,json=rabbitStreams,proto3" json:"rabbit_streams,omitempty" kong:"cmd,help='RabbitMQ Streams'"`
	// @gotags: kong:"cmd,help='MQTT'"
	Mqtt *WriteGroupMQTTOptions `protobuf:"bytes,110,opt,name=mqtt,proto3" json:"mqtt,omitempty" kong:"cmd,help='MQTT'"`
	// @gotags: kong:"cmd,help='Azure Service Bus'"
	AzureServiceBus *WriteGroupAzureServiceBusOptions `protobuf:"bytes,111,opt,name=azure_service_bus,json=azureServiceBus,proto3" json:"azure_service_bus,omitempty" kong:"cmd,help='Azure Service Bus'"`
	// @gotags: kong:"cmd,help='Azure Event Hub'"
	AzureEventHub *WriteGroupAzureEventHubOptions `protobuf:"bytes,112,opt,name=azure_event_hub,json=azureEventHub,proto3" json:"azure_event_hub,omitempty" kong:"cmd,help='Azure Event Hub'"`
	// @gotags: kong:"cmd,help='Google Cloud Platform Pub/Sub'"
	GcpPubsub *WriteGroupGCPPubSubOptions `protobuf:"bytes,113,opt,name=gcp_pubsub,json=gcpPubsub,proto3" json:"gcp_pubsub,omitempty" kong:"cmd,help='Google Cloud Platform Pub/Sub'"`
	// @gotags: kong:"cmd,help='KubeMQ Queue'"
	KubemqQueue *WriteGroupKubeMQQueueOptions `protobuf:"bytes,114,opt,name=kubemq_queue,json=kubemqQueue,proto3" json:"kubemq_queue,omitempty" kong:"cmd,help='KubeMQ Queue'"`
	// @gotags: kong:"cmd,help='Redis PubSub'"
	RedisPubsub *WriteGroupRedisPubSubOptions `protobuf:"bytes,115,opt,name=redis_pubsub,json=redisPubsub,proto3" json:"redis_pubsub,omitempty" kong:"cmd,help='Redis PubSub'"`
	// @gotags: kong:"cmd,help='Redis Streams'"
	RedisStreams *WriteGroupRedisStreamsOptions `protobuf:"bytes,116,opt,name=redis_streams,json=redisStreams,proto3" json:"redis_streams,omitempty" kong:"cmd,help='Redis Streams'"`
	// @gotags: kong:"cmd,help='NATS JetStream'"
	NatsJetstream *WriteGroupNatsJetstreamOptions `protobuf:"bytes,117,opt,name=nats_jetstream,json=natsJetstream,proto3" json:"nats_jetstream,omitempty" kong:"cmd,help='NATS JetStream'"`
	// @gotags: kong:"cmd,help='AWS Kinesis Streams'"
	AwsKinesis *WriteGroupAWSKinesisOptions `protobuf:"bytes,118,opt,name=aws_kinesis,json=awsKinesis,proto3" json:"aws_kinesis,omitempty" kong:"cmd,help='AWS Kinesis Streams'"`
	// @gotags: kong:"cmd,help='Memphis'"
	Memphis *WriteGroupMemphisOptions `protobuf:"bytes,119,opt,name=memphis,proto3" json:"memphis,omitempty" kong:"cmd,help='Memphis'"`
}

func (x *WriteOptions) Reset() {
	*x = WriteOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_write_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteOptions) ProtoMessage() {}

func (x *WriteOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_write_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteOptions.ProtoReflect.Descriptor instead.
func (*WriteOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_write_proto_rawDescGZIP(), []int{1}
}

func (x *WriteOptions) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *WriteOptions) GetRecord() *records.WriteRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *WriteOptions) GetEncodeOptions() *encoding.EncodeOptions {
	if x != nil {
		return x.EncodeOptions
	}
	return nil
}

func (x *WriteOptions) GetXCliOptions() *WriteCLIOptions {
	if x != nil {
		return x.XCliOptions
	}
	return nil
}

func (x *WriteOptions) GetKafka() *WriteGroupKafkaOptions {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *WriteOptions) GetActivemq() *WriteGroupActiveMQOptions {
	if x != nil {
		return x.Activemq
	}
	return nil
}

func (x *WriteOptions) GetAwsSqs() *WriteGroupAWSSQSOptions {
	if x != nil {
		return x.AwsSqs
	}
	return nil
}

func (x *WriteOptions) GetAwsSns() *WriteGroupAWSSNSOptions {
	if x != nil {
		return x.AwsSns
	}
	return nil
}

func (x *WriteOptions) GetNats() *WriteGroupNatsOptions {
	if x != nil {
		return x.Nats
	}
	return nil
}

func (x *WriteOptions) GetNatsStreaming() *WriteGroupNatsStreamingOptions {
	if x != nil {
		return x.NatsStreaming
	}
	return nil
}

func (x *WriteOptions) GetNsq() *WriteGroupNSQOptions {
	if x != nil {
		return x.Nsq
	}
	return nil
}

func (x *WriteOptions) GetPulsar() *WriteGroupPulsarOptions {
	if x != nil {
		return x.Pulsar
	}
	return nil
}

func (x *WriteOptions) GetRabbit() *WriteGroupRabbitOptions {
	if x != nil {
		return x.Rabbit
	}
	return nil
}

func (x *WriteOptions) GetRabbitStreams() *WriteGroupRabbitStreamsOptions {
	if x != nil {
		return x.RabbitStreams
	}
	return nil
}

func (x *WriteOptions) GetMqtt() *WriteGroupMQTTOptions {
	if x != nil {
		return x.Mqtt
	}
	return nil
}

func (x *WriteOptions) GetAzureServiceBus() *WriteGroupAzureServiceBusOptions {
	if x != nil {
		return x.AzureServiceBus
	}
	return nil
}

func (x *WriteOptions) GetAzureEventHub() *WriteGroupAzureEventHubOptions {
	if x != nil {
		return x.AzureEventHub
	}
	return nil
}

func (x *WriteOptions) GetGcpPubsub() *WriteGroupGCPPubSubOptions {
	if x != nil {
		return x.GcpPubsub
	}
	return nil
}

func (x *WriteOptions) GetKubemqQueue() *WriteGroupKubeMQQueueOptions {
	if x != nil {
		return x.KubemqQueue
	}
	return nil
}

func (x *WriteOptions) GetRedisPubsub() *WriteGroupRedisPubSubOptions {
	if x != nil {
		return x.RedisPubsub
	}
	return nil
}

func (x *WriteOptions) GetRedisStreams() *WriteGroupRedisStreamsOptions {
	if x != nil {
		return x.RedisStreams
	}
	return nil
}

func (x *WriteOptions) GetNatsJetstream() *WriteGroupNatsJetstreamOptions {
	if x != nil {
		return x.NatsJetstream
	}
	return nil
}

func (x *WriteOptions) GetAwsKinesis() *WriteGroupAWSKinesisOptions {
	if x != nil {
		return x.AwsKinesis
	}
	return nil
}

func (x *WriteOptions) GetMemphis() *WriteGroupMemphisOptions {
	if x != nil {
		return x.Memphis
	}
	return nil
}

type WriteGroupKafkaOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.KafkaConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.KafkaWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *WriteGroupKafkaOptions) Reset() {
	*x = WriteGroupKafkaOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_write_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteGroupKafkaOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGroupKafkaOptions) ProtoMessage() {}

func (x *WriteGroupKafkaOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_write_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGroupKafkaOptions.ProtoReflect.Descriptor instead.
func (*WriteGroupKafkaOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_write_proto_rawDescGZIP(), []int{2}
}

func (x *WriteGroupKafkaOptions) GetXConn() *args.KafkaConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *WriteGroupKafkaOptions) GetArgs() *args.KafkaWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type WriteGroupActiveMQOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.ActiveMQConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.ActiveMQWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *WriteGroupActiveMQOptions) Reset() {
	*x = WriteGroupActiveMQOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_write_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteGroupActiveMQOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGroupActiveMQOptions) ProtoMessage() {}

func (x *WriteGroupActiveMQOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_write_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGroupActiveMQOptions.ProtoReflect.Descriptor instead.
func (*WriteGroupActiveMQOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_write_proto_rawDescGZIP(), []int{3}
}

func (x *WriteGroupActiveMQOptions) GetXConn() *args.ActiveMQConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *WriteGroupActiveMQOptions) GetArgs() *args.ActiveMQWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type WriteGroupAWSSQSOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.AWSSQSConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.AWSSQSWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *WriteGroupAWSSQSOptions) Reset() {
	*x = WriteGroupAWSSQSOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_write_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteGroupAWSSQSOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGroupAWSSQSOptions) ProtoMessage() {}

func (x *WriteGroupAWSSQSOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_write_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGroupAWSSQSOptions.ProtoReflect.Descriptor instead.
func (*WriteGroupAWSSQSOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_write_proto_rawDescGZIP(), []int{4}
}

func (x *WriteGroupAWSSQSOptions) GetXConn() *args.AWSSQSConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *WriteGroupAWSSQSOptions) GetArgs() *args.AWSSQSWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type WriteGroupAWSSNSOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.AWSSNSConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.AWSSNSWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *WriteGroupAWSSNSOptions) Reset() {
	*x = WriteGroupAWSSNSOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_write_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteGroupAWSSNSOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGroupAWSSNSOptions) ProtoMessage() {}

func (x *WriteGroupAWSSNSOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_write_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGroupAWSSNSOptions.ProtoReflect.Descriptor instead.
func (*WriteGroupAWSSNSOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_write_proto_rawDescGZIP(), []int{5}
}

func (x *WriteGroupAWSSNSOptions) GetXConn() *args.AWSSNSConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *WriteGroupAWSSNSOptions) GetArgs() *args.AWSSNSWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type WriteGroupNatsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.NatsConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.NatsWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *WriteGroupNatsOptions) Reset() {
	*x = WriteGroupNatsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_write_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteGroupNatsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGroupNatsOptions) ProtoMessage() {}

func (x *WriteGroupNatsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_write_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGroupNatsOptions.ProtoReflect.Descriptor instead.
func (*WriteGroupNatsOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_write_proto_rawDescGZIP(), []int{6}
}

func (x *WriteGroupNatsOptions) GetXConn() *args.NatsConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *WriteGroupNatsOptions) GetArgs() *args.NatsWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type WriteGroupNatsJetstreamOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.NatsJetstreamConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.NatsJetstreamWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *WriteGroupNatsJetstreamOptions) Reset() {
	*x = WriteGroupNatsJetstreamOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_write_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteGroupNatsJetstreamOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGroupNatsJetstreamOptions) ProtoMessage() {}

func (x *WriteGroupNatsJetstreamOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_write_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGroupNatsJetstreamOptions.ProtoReflect.Descriptor instead.
func (*WriteGroupNatsJetstreamOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_write_proto_rawDescGZIP(), []int{7}
}

func (x *WriteGroupNatsJetstreamOptions) GetXConn() *args.NatsJetstreamConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *WriteGroupNatsJetstreamOptions) GetArgs() *args.NatsJetstreamWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type WriteGroupNatsStreamingOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.NatsStreamingConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.NatsStreamingWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *WriteGroupNatsStreamingOptions) Reset() {
	*x = WriteGroupNatsStreamingOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_write_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteGroupNatsStreamingOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGroupNatsStreamingOptions) ProtoMessage() {}

func (x *WriteGroupNatsStreamingOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_write_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGroupNatsStreamingOptions.ProtoReflect.Descriptor instead.
func (*WriteGroupNatsStreamingOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_write_proto_rawDescGZIP(), []int{8}
}

func (x *WriteGroupNatsStreamingOptions) GetXConn() *args.NatsStreamingConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *WriteGroupNatsStreamingOptions) GetArgs() *args.NatsStreamingWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type WriteGroupNSQOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.NSQConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.NSQWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *WriteGroupNSQOptions) Reset() {
	*x = WriteGroupNSQOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_write_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteGroupNSQOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGroupNSQOptions) ProtoMessage() {}

func (x *WriteGroupNSQOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_write_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGroupNSQOptions.ProtoReflect.Descriptor instead.
func (*WriteGroupNSQOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_write_proto_rawDescGZIP(), []int{9}
}

func (x *WriteGroupNSQOptions) GetXConn() *args.NSQConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *WriteGroupNSQOptions) GetArgs() *args.NSQWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type WriteGroupPulsarOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.PulsarConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.PulsarWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *WriteGroupPulsarOptions) Reset() {
	*x = WriteGroupPulsarOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_write_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteGroupPulsarOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGroupPulsarOptions) ProtoMessage() {}

func (x *WriteGroupPulsarOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_write_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGroupPulsarOptions.ProtoReflect.Descriptor instead.
func (*WriteGroupPulsarOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_write_proto_rawDescGZIP(), []int{10}
}

func (x *WriteGroupPulsarOptions) GetXConn() *args.PulsarConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *WriteGroupPulsarOptions) GetArgs() *args.PulsarWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type WriteGroupRabbitOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.RabbitConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.RabbitWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *WriteGroupRabbitOptions) Reset() {
	*x = WriteGroupRabbitOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_write_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteGroupRabbitOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGroupRabbitOptions) ProtoMessage() {}

func (x *WriteGroupRabbitOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_write_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGroupRabbitOptions.ProtoReflect.Descriptor instead.
func (*WriteGroupRabbitOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_write_proto_rawDescGZIP(), []int{11}
}

func (x *WriteGroupRabbitOptions) GetXConn() *args.RabbitConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *WriteGroupRabbitOptions) GetArgs() *args.RabbitWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type WriteGroupRabbitStreamsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.RabbitStreamsConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.RabbitStreamsWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *WriteGroupRabbitStreamsOptions) Reset() {
	*x = WriteGroupRabbitStreamsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_write_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteGroupRabbitStreamsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGroupRabbitStreamsOptions) ProtoMessage() {}

func (x *WriteGroupRabbitStreamsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_write_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGroupRabbitStreamsOptions.ProtoReflect.Descriptor instead.
func (*WriteGroupRabbitStreamsOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_write_proto_rawDescGZIP(), []int{12}
}

func (x *WriteGroupRabbitStreamsOptions) GetXConn() *args.RabbitStreamsConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *WriteGroupRabbitStreamsOptions) GetArgs() *args.RabbitStreamsWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type WriteGroupRedisPubSubOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.RedisPubSubConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.RedisPubSubWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *WriteGroupRedisPubSubOptions) Reset() {
	*x = WriteGroupRedisPubSubOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_write_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteGroupRedisPubSubOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGroupRedisPubSubOptions) ProtoMessage() {}

func (x *WriteGroupRedisPubSubOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_write_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGroupRedisPubSubOptions.ProtoReflect.Descriptor instead.
func (*WriteGroupRedisPubSubOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_write_proto_rawDescGZIP(), []int{13}
}

func (x *WriteGroupRedisPubSubOptions) GetXConn() *args.RedisPubSubConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *WriteGroupRedisPubSubOptions) GetArgs() *args.RedisPubSubWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type WriteGroupRedisStreamsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.RedisStreamsConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.RedisStreamsWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *WriteGroupRedisStreamsOptions) Reset() {
	*x = WriteGroupRedisStreamsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_write_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteGroupRedisStreamsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGroupRedisStreamsOptions) ProtoMessage() {}

func (x *WriteGroupRedisStreamsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_write_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGroupRedisStreamsOptions.ProtoReflect.Descriptor instead.
func (*WriteGroupRedisStreamsOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_write_proto_rawDescGZIP(), []int{14}
}

func (x *WriteGroupRedisStreamsOptions) GetXConn() *args.RedisStreamsConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *WriteGroupRedisStreamsOptions) GetArgs() *args.RedisStreamsWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type WriteGroupAzureEventHubOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.AzureEventHubConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.AzureEventHubWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *WriteGroupAzureEventHubOptions) Reset() {
	*x = WriteGroupAzureEventHubOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_write_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteGroupAzureEventHubOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGroupAzureEventHubOptions) ProtoMessage() {}

func (x *WriteGroupAzureEventHubOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_write_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGroupAzureEventHubOptions.ProtoReflect.Descriptor instead.
func (*WriteGroupAzureEventHubOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_write_proto_rawDescGZIP(), []int{15}
}

func (x *WriteGroupAzureEventHubOptions) GetXConn() *args.AzureEventHubConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *WriteGroupAzureEventHubOptions) GetArgs() *args.AzureEventHubWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type WriteGroupAzureServiceBusOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"{
	XConn *args.AzureServiceBusConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.AzureServiceBusWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *WriteGroupAzureServiceBusOptions) Reset() {
	*x = WriteGroupAzureServiceBusOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_write_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteGroupAzureServiceBusOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGroupAzureServiceBusOptions) ProtoMessage() {}

func (x *WriteGroupAzureServiceBusOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_write_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGroupAzureServiceBusOptions.ProtoReflect.Descriptor instead.
func (*WriteGroupAzureServiceBusOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_write_proto_rawDescGZIP(), []int{16}
}

func (x *WriteGroupAzureServiceBusOptions) GetXConn() *args.AzureServiceBusConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *WriteGroupAzureServiceBusOptions) GetArgs() *args.AzureServiceBusWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type WriteGroupMQTTOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.MQTTConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.MQTTWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *WriteGroupMQTTOptions) Reset() {
	*x = WriteGroupMQTTOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_write_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteGroupMQTTOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGroupMQTTOptions) ProtoMessage() {}

func (x *WriteGroupMQTTOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_write_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGroupMQTTOptions.ProtoReflect.Descriptor instead.
func (*WriteGroupMQTTOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_write_proto_rawDescGZIP(), []int{17}
}

func (x *WriteGroupMQTTOptions) GetXConn() *args.MQTTConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *WriteGroupMQTTOptions) GetArgs() *args.MQTTWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type WriteGroupGCPPubSubOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.GCPPubSubConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.GCPPubSubWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *WriteGroupGCPPubSubOptions) Reset() {
	*x = WriteGroupGCPPubSubOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_write_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteGroupGCPPubSubOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGroupGCPPubSubOptions) ProtoMessage() {}

func (x *WriteGroupGCPPubSubOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_write_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGroupGCPPubSubOptions.ProtoReflect.Descriptor instead.
func (*WriteGroupGCPPubSubOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_write_proto_rawDescGZIP(), []int{18}
}

func (x *WriteGroupGCPPubSubOptions) GetXConn() *args.GCPPubSubConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *WriteGroupGCPPubSubOptions) GetArgs() *args.GCPPubSubWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type WriteGroupKubeMQQueueOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.KubeMQQueueConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.KubeMQQueueWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *WriteGroupKubeMQQueueOptions) Reset() {
	*x = WriteGroupKubeMQQueueOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_write_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteGroupKubeMQQueueOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGroupKubeMQQueueOptions) ProtoMessage() {}

func (x *WriteGroupKubeMQQueueOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_write_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGroupKubeMQQueueOptions.ProtoReflect.Descriptor instead.
func (*WriteGroupKubeMQQueueOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_write_proto_rawDescGZIP(), []int{19}
}

func (x *WriteGroupKubeMQQueueOptions) GetXConn() *args.KubeMQQueueConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *WriteGroupKubeMQQueueOptions) GetArgs() *args.KubeMQQueueWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type WriteGroupAWSKinesisOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.AWSKinesisConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.AWSKinesisWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *WriteGroupAWSKinesisOptions) Reset() {
	*x = WriteGroupAWSKinesisOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_write_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteGroupAWSKinesisOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGroupAWSKinesisOptions) ProtoMessage() {}

func (x *WriteGroupAWSKinesisOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_write_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGroupAWSKinesisOptions.ProtoReflect.Descriptor instead.
func (*WriteGroupAWSKinesisOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_write_proto_rawDescGZIP(), []int{20}
}

func (x *WriteGroupAWSKinesisOptions) GetXConn() *args.AWSKinesisConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *WriteGroupAWSKinesisOptions) GetArgs() *args.AWSKinesisWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type WriteGroupMemphisOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.MemphisConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.MemphisWriteArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *WriteGroupMemphisOptions) Reset() {
	*x = WriteGroupMemphisOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_write_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteGroupMemphisOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGroupMemphisOptions) ProtoMessage() {}

func (x *WriteGroupMemphisOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_write_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGroupMemphisOptions.ProtoReflect.Descriptor instead.
func (*WriteGroupMemphisOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_write_proto_rawDescGZIP(), []int{21}
}

func (x *WriteGroupMemphisOptions) GetXConn() *args.MemphisConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *WriteGroupMemphisOptions) GetArgs() *args.MemphisWriteArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

var File_opts_ps_opts_write_proto protoreflect.FileDescriptor

var file_opts_ps_opts_write_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6f, 0x70, 0x74, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x1a, 0x1b, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73,
	0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x71, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x61,
	0x77, 0x73, 0x5f, 0x73, 0x71, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x61, 0x72,
	0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f,
	0x61, 0x72, 0x67, 0x73, 0x5f, 0x67, 0x63, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61,
	0x72, 0x67, 0x73, 0x5f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6b, 0x75,
	0x62, 0x65, 0x6d, 0x71, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6d,
	0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x72,
	0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61,
	0x72, 0x67, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6e, 0x61, 0x74,
	0x73, 0x5f, 0x6a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x21, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f,
	0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x5f, 0x6e, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x72,
	0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x70, 0x75, 0x6c, 0x73, 0x61,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73,
	0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x21, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73,
	0x5f, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61,
	0x72, 0x67, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f,
	0x61, 0x72, 0x67, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x2f, 0x70, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x0f,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x4c, 0x49, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2d,
	0x0a, 0x13, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x41, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x64, 0x69, 0x6e, 0x22, 0xfb,
	0x0c, 0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3f, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x4c, 0x49, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x39, 0x0a, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x12, 0x42, 0x0a, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x71, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x51, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x71,
	0x12, 0x3d, 0x0a, 0x07, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x71, 0x73, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x57, 0x53, 0x53, 0x51, 0x53,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x61, 0x77, 0x73, 0x53, 0x71, 0x73, 0x12,
	0x3d, 0x0a, 0x07, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x6e, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x57, 0x53, 0x53, 0x4e, 0x53, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x61, 0x77, 0x73, 0x53, 0x6e, 0x73, 0x12, 0x36,
	0x0a, 0x04, 0x6e, 0x61, 0x74, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x74, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x04, 0x6e, 0x61, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x6e, 0x61, 0x74,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x03, 0x6e, 0x73,
	0x71, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x53, 0x51, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x6e, 0x73, 0x71, 0x12,
	0x3c, 0x0a, 0x06, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x12, 0x3c, 0x0a,
	0x06, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x06, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x12, 0x52, 0x0a, 0x0e, 0x72,
	0x61, 0x62, 0x62, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x6d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74,
	0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x62, 0x62,
	0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0d, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12,
	0x36, 0x0a, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x51, 0x54, 0x54, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x12, 0x59, 0x0a, 0x11, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x18, 0x6f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x75, 0x73, 0x12, 0x53, 0x0a, 0x0f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x75, 0x62, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x75,
	0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x62, 0x12, 0x46, 0x0a, 0x0a, 0x67, 0x63, 0x70, 0x5f, 0x70,
	0x75, 0x62, 0x73, 0x75, 0x62, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x47, 0x43, 0x50, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x67, 0x63, 0x70, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x12,
	0x4c, 0x0a, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x6d, 0x71, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18,
	0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f,
	0x70, 0x74, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x75,
	0x62, 0x65, 0x4d, 0x51, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x6d, 0x71, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x4c, 0x0a,
	0x0c, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x18, 0x73, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74,
	0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x12, 0x4f, 0x0a, 0x0d, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x74, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x52, 0x0a, 0x0e,
	0x6e, 0x61, 0x74, 0x73, 0x5f, 0x6a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x75,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70,
	0x74, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x74,
	0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0d, 0x6e, 0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x49, 0x0a, 0x0b, 0x61, 0x77, 0x73, 0x5f, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x18,
	0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f,
	0x70, 0x74, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x57,
	0x53, 0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0a, 0x61, 0x77, 0x73, 0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x6d,
	0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x22, 0x76, 0x0a, 0x16,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61,
	0x72, 0x67, 0x73, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43,
	0x6f, 0x6e, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e,
	0x4b, 0x61, 0x66, 0x6b, 0x61, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x22, 0x7f, 0x0a, 0x19, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x51, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2e, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x51, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e,
	0x6e, 0x12, 0x32, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x4d, 0x51, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x79, 0x0a, 0x17, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x57, 0x53, 0x53, 0x51, 0x53, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x57,
	0x53, 0x53, 0x51, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x30,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x53, 0x51,
	0x53, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x22, 0x79, 0x0a, 0x17, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x57,
	0x53, 0x53, 0x4e, 0x53, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x53, 0x4e, 0x53, 0x43,
	0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x53, 0x4e, 0x53, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x73, 0x0a, 0x15, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x74, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67,
	0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e,
	0x12, 0x2e, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x61, 0x74,
	0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x22, 0x8e, 0x01, 0x0a, 0x1e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73,
	0x2e, 0x4e, 0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x22, 0x8e, 0x01, 0x0a, 0x1e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67,
	0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x22, 0x70, 0x0a, 0x14, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x53, 0x51, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x53, 0x51, 0x43, 0x6f, 0x6e, 0x6e, 0x52,
	0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67,
	0x73, 0x2e, 0x4e, 0x53, 0x51, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x22, 0x79, 0x0a, 0x17, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x50, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2c, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x50, 0x75, 0x6c,
	0x73, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x30, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x73, 0x61, 0x72,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22,
	0x79, 0x0a, 0x17, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x62,
	0x62, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x1e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a,
	0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x61, 0x62, 0x62, 0x69,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f,
	0x6e, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x52,
	0x61, 0x62, 0x62, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x1c,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x64, 0x69, 0x73, 0x50,
	0x75, 0x62, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x05,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x50,
	0x75, 0x62, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12,
	0x35, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x1d, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x36, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x1e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x62,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x75, 0x62, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x37, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x75, 0x62, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x20, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x42, 0x75, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e,
	0x6e, 0x12, 0x39, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x73, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x73, 0x0a, 0x15,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x51, 0x54, 0x54, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72,
	0x67, 0x73, 0x2e, 0x4d, 0x51, 0x54, 0x54, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e,
	0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4d, 0x51,
	0x54, 0x54, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x22, 0x82, 0x01, 0x0a, 0x1a, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x47, 0x43, 0x50, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2f, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x47, 0x43,
	0x50, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e,
	0x6e, 0x12, 0x33, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x47, 0x43,
	0x50, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x1c, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x75, 0x62, 0x65, 0x4d, 0x51, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x72, 0x67, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x4d, 0x51, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x4d, 0x51, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x22, 0x85, 0x01, 0x0a, 0x1b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x57, 0x53, 0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x30, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41,
	0x57, 0x53, 0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43,
	0x6f, 0x6e, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e,
	0x41, 0x57, 0x53, 0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41,
	0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x7c, 0x0a, 0x18, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72,
	0x67, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04,
	0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73,
	0x2e, 0x4d, 0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x63, 0x6f, 0x72, 0x70, 0x2f,
	0x70, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x6f, 0x70, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opts_ps_opts_write_proto_rawDescOnce sync.Once
	file_opts_ps_opts_write_proto_rawDescData = file_opts_ps_opts_write_proto_rawDesc
)

func file_opts_ps_opts_write_proto_rawDescGZIP() []byte {
	file_opts_ps_opts_write_proto_rawDescOnce.Do(func() {
		file_opts_ps_opts_write_proto_rawDescData = protoimpl.X.CompressGZIP(file_opts_ps_opts_write_proto_rawDescData)
	})
	return file_opts_ps_opts_write_proto_rawDescData
}

var file_opts_ps_opts_write_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_opts_ps_opts_write_proto_goTypes = []interface{}{
	(*WriteCLIOptions)(nil),                  // 0: protos.opts.WriteCLIOptions
	(*WriteOptions)(nil),                     // 1: protos.opts.WriteOptions
	(*WriteGroupKafkaOptions)(nil),           // 2: protos.opts.WriteGroupKafkaOptions
	(*WriteGroupActiveMQOptions)(nil),        // 3: protos.opts.WriteGroupActiveMQOptions
	(*WriteGroupAWSSQSOptions)(nil),          // 4: protos.opts.WriteGroupAWSSQSOptions
	(*WriteGroupAWSSNSOptions)(nil),          // 5: protos.opts.WriteGroupAWSSNSOptions
	(*WriteGroupNatsOptions)(nil),            // 6: protos.opts.WriteGroupNatsOptions
	(*WriteGroupNatsJetstreamOptions)(nil),   // 7: protos.opts.WriteGroupNatsJetstreamOptions
	(*WriteGroupNatsStreamingOptions)(nil),   // 8: protos.opts.WriteGroupNatsStreamingOptions
	(*WriteGroupNSQOptions)(nil),             // 9: protos.opts.WriteGroupNSQOptions
	(*WriteGroupPulsarOptions)(nil),          // 10: protos.opts.WriteGroupPulsarOptions
	(*WriteGroupRabbitOptions)(nil),          // 11: protos.opts.WriteGroupRabbitOptions
	(*WriteGroupRabbitStreamsOptions)(nil),   // 12: protos.opts.WriteGroupRabbitStreamsOptions
	(*WriteGroupRedisPubSubOptions)(nil),     // 13: protos.opts.WriteGroupRedisPubSubOptions
	(*WriteGroupRedisStreamsOptions)(nil),    // 14: protos.opts.WriteGroupRedisStreamsOptions
	(*WriteGroupAzureEventHubOptions)(nil),   // 15: protos.opts.WriteGroupAzureEventHubOptions
	(*WriteGroupAzureServiceBusOptions)(nil), // 16: protos.opts.WriteGroupAzureServiceBusOptions
	(*WriteGroupMQTTOptions)(nil),            // 17: protos.opts.WriteGroupMQTTOptions
	(*WriteGroupGCPPubSubOptions)(nil),       // 18: protos.opts.WriteGroupGCPPubSubOptions
	(*WriteGroupKubeMQQueueOptions)(nil),     // 19: protos.opts.WriteGroupKubeMQQueueOptions
	(*WriteGroupAWSKinesisOptions)(nil),      // 20: protos.opts.WriteGroupAWSKinesisOptions
	(*WriteGroupMemphisOptions)(nil),         // 21: protos.opts.WriteGroupMemphisOptions
	(*records.WriteRecord)(nil),              // 22: protos.records.WriteRecord
	(*encoding.EncodeOptions)(nil),           // 23: protos.encoding.EncodeOptions
	(*args.KafkaConn)(nil),                   // 24: protos.args.KafkaConn
	(*args.KafkaWriteArgs)(nil),              // 25: protos.args.KafkaWriteArgs
	(*args.ActiveMQConn)(nil),                // 26: protos.args.ActiveMQConn
	(*args.ActiveMQWriteArgs)(nil),           // 27: protos.args.ActiveMQWriteArgs
	(*args.AWSSQSConn)(nil),                  // 28: protos.args.AWSSQSConn
	(*args.AWSSQSWriteArgs)(nil),             // 29: protos.args.AWSSQSWriteArgs
	(*args.AWSSNSConn)(nil),                  // 30: protos.args.AWSSNSConn
	(*args.AWSSNSWriteArgs)(nil),             // 31: protos.args.AWSSNSWriteArgs
	(*args.NatsConn)(nil),                    // 32: protos.args.NatsConn
	(*args.NatsWriteArgs)(nil),               // 33: protos.args.NatsWriteArgs
	(*args.NatsJetstreamConn)(nil),           // 34: protos.args.NatsJetstreamConn
	(*args.NatsJetstreamWriteArgs)(nil),      // 35: protos.args.NatsJetstreamWriteArgs
	(*args.NatsStreamingConn)(nil),           // 36: protos.args.NatsStreamingConn
	(*args.NatsStreamingWriteArgs)(nil),      // 37: protos.args.NatsStreamingWriteArgs
	(*args.NSQConn)(nil),                     // 38: protos.args.NSQConn
	(*args.NSQWriteArgs)(nil),                // 39: protos.args.NSQWriteArgs
	(*args.PulsarConn)(nil),                  // 40: protos.args.PulsarConn
	(*args.PulsarWriteArgs)(nil),             // 41: protos.args.PulsarWriteArgs
	(*args.RabbitConn)(nil),                  // 42: protos.args.RabbitConn
	(*args.RabbitWriteArgs)(nil),             // 43: protos.args.RabbitWriteArgs
	(*args.RabbitStreamsConn)(nil),           // 44: protos.args.RabbitStreamsConn
	(*args.RabbitStreamsWriteArgs)(nil),      // 45: protos.args.RabbitStreamsWriteArgs
	(*args.RedisPubSubConn)(nil),             // 46: protos.args.RedisPubSubConn
	(*args.RedisPubSubWriteArgs)(nil),        // 47: protos.args.RedisPubSubWriteArgs
	(*args.RedisStreamsConn)(nil),            // 48: protos.args.RedisStreamsConn
	(*args.RedisStreamsWriteArgs)(nil),       // 49: protos.args.RedisStreamsWriteArgs
	(*args.AzureEventHubConn)(nil),           // 50: protos.args.AzureEventHubConn
	(*args.AzureEventHubWriteArgs)(nil),      // 51: protos.args.AzureEventHubWriteArgs
	(*args.AzureServiceBusConn)(nil),         // 52: protos.args.AzureServiceBusConn
	(*args.AzureServiceBusWriteArgs)(nil),    // 53: protos.args.AzureServiceBusWriteArgs
	(*args.MQTTConn)(nil),                    // 54: protos.args.MQTTConn
	(*args.MQTTWriteArgs)(nil),               // 55: protos.args.MQTTWriteArgs
	(*args.GCPPubSubConn)(nil),               // 56: protos.args.GCPPubSubConn
	(*args.GCPPubSubWriteArgs)(nil),          // 57: protos.args.GCPPubSubWriteArgs
	(*args.KubeMQQueueConn)(nil),             // 58: protos.args.KubeMQQueueConn
	(*args.KubeMQQueueWriteArgs)(nil),        // 59: protos.args.KubeMQQueueWriteArgs
	(*args.AWSKinesisConn)(nil),              // 60: protos.args.AWSKinesisConn
	(*args.AWSKinesisWriteArgs)(nil),         // 61: protos.args.AWSKinesisWriteArgs
	(*args.MemphisConn)(nil),                 // 62: protos.args.MemphisConn
	(*args.MemphisWriteArgs)(nil),            // 63: protos.args.MemphisWriteArgs
}
var file_opts_ps_opts_write_proto_depIdxs = []int32{
	22, // 0: protos.opts.WriteOptions.record:type_name -> protos.records.WriteRecord
	23, // 1: protos.opts.WriteOptions.encode_options:type_name -> protos.encoding.EncodeOptions
	0,  // 2: protos.opts.WriteOptions._cli_options:type_name -> protos.opts.WriteCLIOptions
	2,  // 3: protos.opts.WriteOptions.kafka:type_name -> protos.opts.WriteGroupKafkaOptions
	3,  // 4: protos.opts.WriteOptions.activemq:type_name -> protos.opts.WriteGroupActiveMQOptions
	4,  // 5: protos.opts.WriteOptions.aws_sqs:type_name -> protos.opts.WriteGroupAWSSQSOptions
	5,  // 6: protos.opts.WriteOptions.aws_sns:type_name -> protos.opts.WriteGroupAWSSNSOptions
	6,  // 7: protos.opts.WriteOptions.nats:type_name -> protos.opts.WriteGroupNatsOptions
	8,  // 8: protos.opts.WriteOptions.nats_streaming:type_name -> protos.opts.WriteGroupNatsStreamingOptions
	9,  // 9: protos.opts.WriteOptions.nsq:type_name -> protos.opts.WriteGroupNSQOptions
	10, // 10: protos.opts.WriteOptions.pulsar:type_name -> protos.opts.WriteGroupPulsarOptions
	11, // 11: protos.opts.WriteOptions.rabbit:type_name -> protos.opts.WriteGroupRabbitOptions
	12, // 12: protos.opts.WriteOptions.rabbit_streams:type_name -> protos.opts.WriteGroupRabbitStreamsOptions
	17, // 13: protos.opts.WriteOptions.mqtt:type_name -> protos.opts.WriteGroupMQTTOptions
	16, // 14: protos.opts.WriteOptions.azure_service_bus:type_name -> protos.opts.WriteGroupAzureServiceBusOptions
	15, // 15: protos.opts.WriteOptions.azure_event_hub:type_name -> protos.opts.WriteGroupAzureEventHubOptions
	18, // 16: protos.opts.WriteOptions.gcp_pubsub:type_name -> protos.opts.WriteGroupGCPPubSubOptions
	19, // 17: protos.opts.WriteOptions.kubemq_queue:type_name -> protos.opts.WriteGroupKubeMQQueueOptions
	13, // 18: protos.opts.WriteOptions.redis_pubsub:type_name -> protos.opts.WriteGroupRedisPubSubOptions
	14, // 19: protos.opts.WriteOptions.redis_streams:type_name -> protos.opts.WriteGroupRedisStreamsOptions
	7,  // 20: protos.opts.WriteOptions.nats_jetstream:type_name -> protos.opts.WriteGroupNatsJetstreamOptions
	20, // 21: protos.opts.WriteOptions.aws_kinesis:type_name -> protos.opts.WriteGroupAWSKinesisOptions
	21, // 22: protos.opts.WriteOptions.memphis:type_name -> protos.opts.WriteGroupMemphisOptions
	24, // 23: protos.opts.WriteGroupKafkaOptions._conn:type_name -> protos.args.KafkaConn
	25, // 24: protos.opts.WriteGroupKafkaOptions.args:type_name -> protos.args.KafkaWriteArgs
	26, // 25: protos.opts.WriteGroupActiveMQOptions._conn:type_name -> protos.args.ActiveMQConn
	27, // 26: protos.opts.WriteGroupActiveMQOptions.args:type_name -> protos.args.ActiveMQWriteArgs
	28, // 27: protos.opts.WriteGroupAWSSQSOptions._conn:type_name -> protos.args.AWSSQSConn
	29, // 28: protos.opts.WriteGroupAWSSQSOptions.args:type_name -> protos.args.AWSSQSWriteArgs
	30, // 29: protos.opts.WriteGroupAWSSNSOptions._conn:type_name -> protos.args.AWSSNSConn
	31, // 30: protos.opts.WriteGroupAWSSNSOptions.args:type_name -> protos.args.AWSSNSWriteArgs
	32, // 31: protos.opts.WriteGroupNatsOptions._conn:type_name -> protos.args.NatsConn
	33, // 32: protos.opts.WriteGroupNatsOptions.args:type_name -> protos.args.NatsWriteArgs
	34, // 33: protos.opts.WriteGroupNatsJetstreamOptions._conn:type_name -> protos.args.NatsJetstreamConn
	35, // 34: protos.opts.WriteGroupNatsJetstreamOptions.args:type_name -> protos.args.NatsJetstreamWriteArgs
	36, // 35: protos.opts.WriteGroupNatsStreamingOptions._conn:type_name -> protos.args.NatsStreamingConn
	37, // 36: protos.opts.WriteGroupNatsStreamingOptions.args:type_name -> protos.args.NatsStreamingWriteArgs
	38, // 37: protos.opts.WriteGroupNSQOptions._conn:type_name -> protos.args.NSQConn
	39, // 38: protos.opts.WriteGroupNSQOptions.args:type_name -> protos.args.NSQWriteArgs
	40, // 39: protos.opts.WriteGroupPulsarOptions._conn:type_name -> protos.args.PulsarConn
	41, // 40: protos.opts.WriteGroupPulsarOptions.args:type_name -> protos.args.PulsarWriteArgs
	42, // 41: protos.opts.WriteGroupRabbitOptions._conn:type_name -> protos.args.RabbitConn
	43, // 42: protos.opts.WriteGroupRabbitOptions.args:type_name -> protos.args.RabbitWriteArgs
	44, // 43: protos.opts.WriteGroupRabbitStreamsOptions._conn:type_name -> protos.args.RabbitStreamsConn
	45, // 44: protos.opts.WriteGroupRabbitStreamsOptions.args:type_name -> protos.args.RabbitStreamsWriteArgs
	46, // 45: protos.opts.WriteGroupRedisPubSubOptions._conn:type_name -> protos.args.RedisPubSubConn
	47, // 46: protos.opts.WriteGroupRedisPubSubOptions.args:type_name -> protos.args.RedisPubSubWriteArgs
	48, // 47: protos.opts.WriteGroupRedisStreamsOptions._conn:type_name -> protos.args.RedisStreamsConn
	49, // 48: protos.opts.WriteGroupRedisStreamsOptions.args:type_name -> protos.args.RedisStreamsWriteArgs
	50, // 49: protos.opts.WriteGroupAzureEventHubOptions._conn:type_name -> protos.args.AzureEventHubConn
	51, // 50: protos.opts.WriteGroupAzureEventHubOptions.args:type_name -> protos.args.AzureEventHubWriteArgs
	52, // 51: protos.opts.WriteGroupAzureServiceBusOptions._conn:type_name -> protos.args.AzureServiceBusConn
	53, // 52: protos.opts.WriteGroupAzureServiceBusOptions.args:type_name -> protos.args.AzureServiceBusWriteArgs
	54, // 53: protos.opts.WriteGroupMQTTOptions._conn:type_name -> protos.args.MQTTConn
	55, // 54: protos.opts.WriteGroupMQTTOptions.args:type_name -> protos.args.MQTTWriteArgs
	56, // 55: protos.opts.WriteGroupGCPPubSubOptions._conn:type_name -> protos.args.GCPPubSubConn
	57, // 56: protos.opts.WriteGroupGCPPubSubOptions.args:type_name -> protos.args.GCPPubSubWriteArgs
	58, // 57: protos.opts.WriteGroupKubeMQQueueOptions._conn:type_name -> protos.args.KubeMQQueueConn
	59, // 58: protos.opts.WriteGroupKubeMQQueueOptions.args:type_name -> protos.args.KubeMQQueueWriteArgs
	60, // 59: protos.opts.WriteGroupAWSKinesisOptions._conn:type_name -> protos.args.AWSKinesisConn
	61, // 60: protos.opts.WriteGroupAWSKinesisOptions.args:type_name -> protos.args.AWSKinesisWriteArgs
	62, // 61: protos.opts.WriteGroupMemphisOptions._conn:type_name -> protos.args.MemphisConn
	63, // 62: protos.opts.WriteGroupMemphisOptions.args:type_name -> protos.args.MemphisWriteArgs
	63, // [63:63] is the sub-list for method output_type
	63, // [63:63] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_opts_ps_opts_write_proto_init() }
func file_opts_ps_opts_write_proto_init() {
	if File_opts_ps_opts_write_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_opts_ps_opts_write_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteCLIOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_write_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_write_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteGroupKafkaOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_write_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteGroupActiveMQOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_write_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteGroupAWSSQSOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_write_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteGroupAWSSNSOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_write_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteGroupNatsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_write_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteGroupNatsJetstreamOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_write_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteGroupNatsStreamingOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_write_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteGroupNSQOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_write_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteGroupPulsarOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_write_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteGroupRabbitOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_write_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteGroupRabbitStreamsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_write_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteGroupRedisPubSubOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_write_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteGroupRedisStreamsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_write_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteGroupAzureEventHubOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_write_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteGroupAzureServiceBusOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_write_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteGroupMQTTOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_write_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteGroupGCPPubSubOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_write_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteGroupKubeMQQueueOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_write_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteGroupAWSKinesisOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_write_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteGroupMemphisOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opts_ps_opts_write_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opts_ps_opts_write_proto_goTypes,
		DependencyIndexes: file_opts_ps_opts_write_proto_depIdxs,
		MessageInfos:      file_opts_ps_opts_write_proto_msgTypes,
	}.Build()
	File_opts_ps_opts_write_proto = out.File
	file_opts_ps_opts_write_proto_rawDesc = nil
	file_opts_ps_opts_write_proto_goTypes = nil
	file_opts_ps_opts_write_proto_depIdxs = nil
}
