// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: opts/ps_opts_read.proto

package opts

import (
	args "github.com/batchcorp/plumber-schemas/build/go/protos/args"
	encoding "github.com/batchcorp/plumber-schemas/build/go/protos/encoding"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConvertOption int32

const (
	ConvertOption_CONVERT_OPTION_UNSET  ConvertOption = 0
	ConvertOption_CONVERT_OPTION_BASE64 ConvertOption = 1
	ConvertOption_CONVERT_OPTION_GZIP   ConvertOption = 2
)

// Enum value maps for ConvertOption.
var (
	ConvertOption_name = map[int32]string{
		0: "CONVERT_OPTION_UNSET",
		1: "CONVERT_OPTION_BASE64",
		2: "CONVERT_OPTION_GZIP",
	}
	ConvertOption_value = map[string]int32{
		"CONVERT_OPTION_UNSET":  0,
		"CONVERT_OPTION_BASE64": 1,
		"CONVERT_OPTION_GZIP":   2,
	}
)

func (x ConvertOption) Enum() *ConvertOption {
	p := new(ConvertOption)
	*p = x
	return p
}

func (x ConvertOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConvertOption) Descriptor() protoreflect.EnumDescriptor {
	return file_opts_ps_opts_read_proto_enumTypes[0].Descriptor()
}

func (ConvertOption) Type() protoreflect.EnumType {
	return &file_opts_ps_opts_read_proto_enumTypes[0]
}

func (x ConvertOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConvertOption.Descriptor instead.
func (ConvertOption) EnumDescriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{0}
}

type InferSchemaOptions_Type int32

const (
	InferSchemaOptions_UNSET      InferSchemaOptions_Type = 0
	InferSchemaOptions_JSONSCHEMA InferSchemaOptions_Type = 1 // TODO: expand with other types when we support them
)

// Enum value maps for InferSchemaOptions_Type.
var (
	InferSchemaOptions_Type_name = map[int32]string{
		0: "UNSET",
		1: "JSONSCHEMA",
	}
	InferSchemaOptions_Type_value = map[string]int32{
		"UNSET":      0,
		"JSONSCHEMA": 1,
	}
)

func (x InferSchemaOptions_Type) Enum() *InferSchemaOptions_Type {
	p := new(InferSchemaOptions_Type)
	*p = x
	return p
}

func (x InferSchemaOptions_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InferSchemaOptions_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_opts_ps_opts_read_proto_enumTypes[1].Descriptor()
}

func (InferSchemaOptions_Type) Type() protoreflect.EnumType {
	return &file_opts_ps_opts_read_proto_enumTypes[1]
}

func (x InferSchemaOptions_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InferSchemaOptions_Type.Descriptor instead.
func (InferSchemaOptions_Type) EnumDescriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{25, 0}
}

type ReadCLIOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='Display more verbose information during reads (varies by backend)'"
	VerboseOutput bool `protobuf:"varint,1,opt,name=verbose_output,json=verboseOutput,proto3" json:"verbose_output,omitempty" kong:"help='Display more verbose information during reads (varies by backend)'"`
	// @gotags: kong:"help='Pretty (colorized) output'"
	Pretty bool `protobuf:"varint,2,opt,name=pretty,proto3" json:"pretty,omitempty" kong:"help='Pretty (colorized) output'"`
	// @gotags: kong:"help='Display all output as JSON (including tabular metadata)'"
	Json bool `protobuf:"varint,3,opt,name=json,proto3" json:"json,omitempty" kong:"help='Display all output as JSON (including tabular metadata)'"`
}

func (x *ReadCLIOptions) Reset() {
	*x = ReadCLIOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadCLIOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCLIOptions) ProtoMessage() {}

func (x *ReadCLIOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCLIOptions.ProtoReflect.Descriptor instead.
func (*ReadCLIOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{0}
}

func (x *ReadCLIOptions) GetVerboseOutput() bool {
	if x != nil {
		return x.VerboseOutput
	}
	return false
}

func (x *ReadCLIOptions) GetPretty() bool {
	if x != nil {
		return x.Pretty
	}
	return false
}

func (x *ReadCLIOptions) GetJson() bool {
	if x != nil {
		return x.Json
	}
	return false
}

type ReadSampleOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='How many events to fetch during a sample interval',default=100"
	SampleRate uint32 `protobuf:"varint,1,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty" kong:"help='How many events to fetch during a sample interval',default=100"`
	// @gotags: kong:"help='Sample interval seconds',enum:'1,60',default=60"
	SampleIntervalSeconds uint32 `protobuf:"varint,2,opt,name=sample_interval_seconds,json=sampleIntervalSeconds,proto3" json:"sample_interval_seconds,omitempty" kong:"help='Sample interval seconds',enum:'1,60',default=60"`
}

func (x *ReadSampleOptions) Reset() {
	*x = ReadSampleOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadSampleOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadSampleOptions) ProtoMessage() {}

func (x *ReadSampleOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadSampleOptions.ProtoReflect.Descriptor instead.
func (*ReadSampleOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{1}
}

func (x *ReadSampleOptions) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *ReadSampleOptions) GetSampleIntervalSeconds() uint32 {
	if x != nil {
		return x.SampleIntervalSeconds
	}
	return 0
}

type ReadFilterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"-"
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty" kong:"-"`
}

func (x *ReadFilterOptions) Reset() {
	*x = ReadFilterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadFilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFilterOptions) ProtoMessage() {}

func (x *ReadFilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFilterOptions.ProtoReflect.Descriptor instead.
func (*ReadFilterOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{2}
}

func (x *ReadFilterOptions) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// Relay is the structure that backends accept for facilitating a relay.
type ReadOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required; friendly name for the read
	// @gotags: kong:"-"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" kong:"-"`
	// Required for desktop; ignored in CLI.
	// @gotags: kong:"-"
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty" kong:"-"`
	// Required; specify if a read is continuous or not (default: false)
	// @gotags: kong:"help='Follow/read continuously',short=f"
	Continuous bool `protobuf:"varint,3,opt,name=continuous,proto3" json:"continuous,omitempty" kong:"help='Follow/read continuously',short=f"`
	// Optional; specify if reading should utilize sampling
	// @gotags: kong:"embed,group=sampling"
	SampleOptions *ReadSampleOptions `protobuf:"bytes,4,opt,name=sample_options,json=sampleOptions,proto3" json:"sample_options,omitempty" kong:"embed,group=sampling"`
	// Optional; decode_options specify how to decode the _value_ in a message.
	// If left unset, plumber will still populate records.ReadRecord.Decoded
	// with the (untouched) value.
	// @gotags: kong:"embed,group=decode"
	DecodeOptions *encoding.DecodeOptions `protobuf:"bytes,5,opt,name=decode_options,json=decodeOptions,proto3" json:"decode_options,omitempty" kong:"embed,group=decode"`
	// @gotags: kong:"help='Convert output before it is printed to STDOUT (options: unset; base64; gzip)',type=pbenum,pbenum_strip_prefix=CONVERT_OPTION_,pbenum_lowercase,default=unset"
	ConvertOutput ConvertOption `protobuf:"varint,6,opt,name=convert_output,json=convertOutput,proto3,enum=protos.opts.ConvertOption" json:"convert_output,omitempty" kong:"help='Convert output before it is printed to STDOUT (options: unset; base64; gzip)',type=pbenum,pbenum_strip_prefix=CONVERT_OPTION_,pbenum_lowercase,default=unset"`
	// @gotags: kong:"-"
	Filter *ReadFilterOptions `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty" kong:"-"`
	// Whether to infer a JSON schema from this read. Ignored if schema_id is populated. Desktop use only
	// @gotags: kong:"-"
	InferSchemaOptions *InferSchemaOptions `protobuf:"bytes,8,opt,name=infer_schema_options,json=inferSchemaOptions,proto3" json:"infer_schema_options,omitempty" kong:"-"`
	// Automatically set by plumber when a new read is created
	// @gotags: kong:"-"
	XId string `protobuf:"bytes,1000,opt,name=_id,json=Id,proto3" json:"_id,omitempty" kong:"-"`
	// Used by plumber to set read state
	// @gotags: kong:"-"
	XActive bool `protobuf:"varint,1001,opt,name=_active,json=Active,proto3" json:"_active,omitempty" kong:"-"`
	// Contains options/fields specific to the CLI
	// @gotags: kong:"embed"
	XCliOptions *ReadCLIOptions `protobuf:"bytes,1002,opt,name=_cli_options,json=CliOptions,proto3" json:"_cli_options,omitempty" kong:"embed"`
	// @gotags: kong:"cmd,help='Apache Kafka'"
	Kafka *ReadGroupKafkaOptions `protobuf:"bytes,100,opt,name=kafka,proto3" json:"kafka,omitempty" kong:"cmd,help='Apache Kafka'"`
	// @gotags: kong:"cmd,help='Apache ActiveMQ (STOMP)'"
	Activemq *ReadGroupActiveMQOptions `protobuf:"bytes,101,opt,name=activemq,proto3" json:"activemq,omitempty" kong:"cmd,help='Apache ActiveMQ (STOMP)'"`
	// @gotags: kong:"cmd,help='AWS Simple Queue System'"
	AwsSqs *ReadGroupAWSSQSOptions `protobuf:"bytes,102,opt,name=aws_sqs,json=awsSqs,proto3" json:"aws_sqs,omitempty" kong:"cmd,help='AWS Simple Queue System'"`
	// @gotags: kong:"cmd,help='MongoDB'"
	Mongo *ReadGroupMongoOptions `protobuf:"bytes,103,opt,name=mongo,proto3" json:"mongo,omitempty" kong:"cmd,help='MongoDB'"`
	// @gotags: kong:"cmd,help='NATS'"
	Nats *ReadGroupNatsOptions `protobuf:"bytes,104,opt,name=nats,proto3" json:"nats,omitempty" kong:"cmd,help='NATS'"`
	// @gotags: kong:"cmd,help='NATS Streaming'"
	NatsStreaming *ReadGroupNatsStreamingOptions `protobuf:"bytes,105,opt,name=nats_streaming,json=natsStreaming,proto3" json:"nats_streaming,omitempty" kong:"cmd,help='NATS Streaming'"`
	// @gotags: kong:"cmd,help='NSQ'"
	Nsq *ReadGroupNSQOptions `protobuf:"bytes,106,opt,name=nsq,proto3" json:"nsq,omitempty" kong:"cmd,help='NSQ'"`
	// @gotags: kong:"cmd,help='Apache Pulsar'"
	Pulsar *ReadGroupPulsarOptions `protobuf:"bytes,107,opt,name=pulsar,proto3" json:"pulsar,omitempty" kong:"cmd,help='Apache Pulsar'"`
	// @gotags: kong:"cmd,help='RabbitMQ'"
	Rabbit *ReadGroupRabbitOptions `protobuf:"bytes,108,opt,name=rabbit,proto3" json:"rabbit,omitempty" kong:"cmd,help='RabbitMQ'"`
	// @gotags: kong:"cmd,help='RabbitMQ Streams'"
	RabbitStreams *ReadGroupRabbitStreamsOptions `protobuf:"bytes,109,opt,name=rabbit_streams,json=rabbitStreams,proto3" json:"rabbit_streams,omitempty" kong:"cmd,help='RabbitMQ Streams'"`
	// @gotags: kong:"cmd,help='MQTT'"
	Mqtt *ReadGroupMQTTOptions `protobuf:"bytes,110,opt,name=mqtt,proto3" json:"mqtt,omitempty" kong:"cmd,help='MQTT'"`
	// @gotags: kong:"cmd,help='Azure Service Bus'"
	AzureServiceBus *ReadGroupAzureServiceBusOptions `protobuf:"bytes,111,opt,name=azure_service_bus,json=azureServiceBus,proto3" json:"azure_service_bus,omitempty" kong:"cmd,help='Azure Service Bus'"`
	// @gotags: kong:"cmd,help='Azure Event Hub'"
	AzureEventHub *ReadGroupAzureEventHubOptions `protobuf:"bytes,112,opt,name=azure_event_hub,json=azureEventHub,proto3" json:"azure_event_hub,omitempty" kong:"cmd,help='Azure Event Hub'"`
	// @gotags: kong:"cmd,help='Google Cloud Platform Pub/Sub'"
	GcpPubsub *ReadGroupGCPPubSubOptions `protobuf:"bytes,113,opt,name=gcp_pubsub,json=gcpPubsub,proto3" json:"gcp_pubsub,omitempty" kong:"cmd,help='Google Cloud Platform Pub/Sub'"`
	// @gotags: kong:"cmd,help='KubeMQ Queue'"
	KubemqQueue *ReadGroupKubeMQQueueOptions `protobuf:"bytes,114,opt,name=kubemq_queue,json=kubemqQueue,proto3" json:"kubemq_queue,omitempty" kong:"cmd,help='KubeMQ Queue'"`
	// @gotags: kong:"cmd,help='Redis PubSub'"
	RedisPubsub *ReadGroupRedisPubSubOptions `protobuf:"bytes,115,opt,name=redis_pubsub,json=redisPubsub,proto3" json:"redis_pubsub,omitempty" kong:"cmd,help='Redis PubSub'"`
	// @gotags: kong:"cmd,help='Redis Streams'"
	RedisStreams *ReadGroupRedisStreamsOptions `protobuf:"bytes,116,opt,name=redis_streams,json=redisStreams,proto3" json:"redis_streams,omitempty" kong:"cmd,help='Redis Streams'"`
	// @gotags: kong:"cmd,help='PostgreSQL'"
	Postgres *ReadGroupPostgresOptions `protobuf:"bytes,117,opt,name=postgres,proto3" json:"postgres,omitempty" kong:"cmd,help='PostgreSQL'"`
	// @gotags: kong:"cmd,help='NATS Jetstream'"
	NatsJetstream *ReadGroupNatsJetstreamOptions `protobuf:"bytes,118,opt,name=nats_jetstream,json=natsJetstream,proto3" json:"nats_jetstream,omitempty" kong:"cmd,help='NATS Jetstream'"`
	// @gotags: kong:"cmd,help='AWS Kinesis Streams'"
	AwsKinesis *ReadGroupAWSKinesisOptions `protobuf:"bytes,119,opt,name=aws_kinesis,json=awsKinesis,proto3" json:"aws_kinesis,omitempty" kong:"cmd,help='AWS Kinesis Streams'"`
	// @gotags: kong:"cmd,help='Memphis'"
	Memphis *ReadGroupMemphisOptions `protobuf:"bytes,120,opt,name=memphis,proto3" json:"memphis,omitempty" kong:"cmd,help='Memphis'"`
}

func (x *ReadOptions) Reset() {
	*x = ReadOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadOptions) ProtoMessage() {}

func (x *ReadOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadOptions.ProtoReflect.Descriptor instead.
func (*ReadOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{3}
}

func (x *ReadOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReadOptions) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *ReadOptions) GetContinuous() bool {
	if x != nil {
		return x.Continuous
	}
	return false
}

func (x *ReadOptions) GetSampleOptions() *ReadSampleOptions {
	if x != nil {
		return x.SampleOptions
	}
	return nil
}

func (x *ReadOptions) GetDecodeOptions() *encoding.DecodeOptions {
	if x != nil {
		return x.DecodeOptions
	}
	return nil
}

func (x *ReadOptions) GetConvertOutput() ConvertOption {
	if x != nil {
		return x.ConvertOutput
	}
	return ConvertOption_CONVERT_OPTION_UNSET
}

func (x *ReadOptions) GetFilter() *ReadFilterOptions {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ReadOptions) GetInferSchemaOptions() *InferSchemaOptions {
	if x != nil {
		return x.InferSchemaOptions
	}
	return nil
}

func (x *ReadOptions) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

func (x *ReadOptions) GetXActive() bool {
	if x != nil {
		return x.XActive
	}
	return false
}

func (x *ReadOptions) GetXCliOptions() *ReadCLIOptions {
	if x != nil {
		return x.XCliOptions
	}
	return nil
}

func (x *ReadOptions) GetKafka() *ReadGroupKafkaOptions {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *ReadOptions) GetActivemq() *ReadGroupActiveMQOptions {
	if x != nil {
		return x.Activemq
	}
	return nil
}

func (x *ReadOptions) GetAwsSqs() *ReadGroupAWSSQSOptions {
	if x != nil {
		return x.AwsSqs
	}
	return nil
}

func (x *ReadOptions) GetMongo() *ReadGroupMongoOptions {
	if x != nil {
		return x.Mongo
	}
	return nil
}

func (x *ReadOptions) GetNats() *ReadGroupNatsOptions {
	if x != nil {
		return x.Nats
	}
	return nil
}

func (x *ReadOptions) GetNatsStreaming() *ReadGroupNatsStreamingOptions {
	if x != nil {
		return x.NatsStreaming
	}
	return nil
}

func (x *ReadOptions) GetNsq() *ReadGroupNSQOptions {
	if x != nil {
		return x.Nsq
	}
	return nil
}

func (x *ReadOptions) GetPulsar() *ReadGroupPulsarOptions {
	if x != nil {
		return x.Pulsar
	}
	return nil
}

func (x *ReadOptions) GetRabbit() *ReadGroupRabbitOptions {
	if x != nil {
		return x.Rabbit
	}
	return nil
}

func (x *ReadOptions) GetRabbitStreams() *ReadGroupRabbitStreamsOptions {
	if x != nil {
		return x.RabbitStreams
	}
	return nil
}

func (x *ReadOptions) GetMqtt() *ReadGroupMQTTOptions {
	if x != nil {
		return x.Mqtt
	}
	return nil
}

func (x *ReadOptions) GetAzureServiceBus() *ReadGroupAzureServiceBusOptions {
	if x != nil {
		return x.AzureServiceBus
	}
	return nil
}

func (x *ReadOptions) GetAzureEventHub() *ReadGroupAzureEventHubOptions {
	if x != nil {
		return x.AzureEventHub
	}
	return nil
}

func (x *ReadOptions) GetGcpPubsub() *ReadGroupGCPPubSubOptions {
	if x != nil {
		return x.GcpPubsub
	}
	return nil
}

func (x *ReadOptions) GetKubemqQueue() *ReadGroupKubeMQQueueOptions {
	if x != nil {
		return x.KubemqQueue
	}
	return nil
}

func (x *ReadOptions) GetRedisPubsub() *ReadGroupRedisPubSubOptions {
	if x != nil {
		return x.RedisPubsub
	}
	return nil
}

func (x *ReadOptions) GetRedisStreams() *ReadGroupRedisStreamsOptions {
	if x != nil {
		return x.RedisStreams
	}
	return nil
}

func (x *ReadOptions) GetPostgres() *ReadGroupPostgresOptions {
	if x != nil {
		return x.Postgres
	}
	return nil
}

func (x *ReadOptions) GetNatsJetstream() *ReadGroupNatsJetstreamOptions {
	if x != nil {
		return x.NatsJetstream
	}
	return nil
}

func (x *ReadOptions) GetAwsKinesis() *ReadGroupAWSKinesisOptions {
	if x != nil {
		return x.AwsKinesis
	}
	return nil
}

func (x *ReadOptions) GetMemphis() *ReadGroupMemphisOptions {
	if x != nil {
		return x.Memphis
	}
	return nil
}

type ReadGroupKafkaOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.KafkaConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.KafkaReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *ReadGroupKafkaOptions) Reset() {
	*x = ReadGroupKafkaOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadGroupKafkaOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGroupKafkaOptions) ProtoMessage() {}

func (x *ReadGroupKafkaOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGroupKafkaOptions.ProtoReflect.Descriptor instead.
func (*ReadGroupKafkaOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{4}
}

func (x *ReadGroupKafkaOptions) GetXConn() *args.KafkaConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *ReadGroupKafkaOptions) GetArgs() *args.KafkaReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ReadGroupActiveMQOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.ActiveMQConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.ActiveMQReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *ReadGroupActiveMQOptions) Reset() {
	*x = ReadGroupActiveMQOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadGroupActiveMQOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGroupActiveMQOptions) ProtoMessage() {}

func (x *ReadGroupActiveMQOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGroupActiveMQOptions.ProtoReflect.Descriptor instead.
func (*ReadGroupActiveMQOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{5}
}

func (x *ReadGroupActiveMQOptions) GetXConn() *args.ActiveMQConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *ReadGroupActiveMQOptions) GetArgs() *args.ActiveMQReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ReadGroupAWSSQSOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.AWSSQSConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.AWSSQSReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *ReadGroupAWSSQSOptions) Reset() {
	*x = ReadGroupAWSSQSOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadGroupAWSSQSOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGroupAWSSQSOptions) ProtoMessage() {}

func (x *ReadGroupAWSSQSOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGroupAWSSQSOptions.ProtoReflect.Descriptor instead.
func (*ReadGroupAWSSQSOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{6}
}

func (x *ReadGroupAWSSQSOptions) GetXConn() *args.AWSSQSConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *ReadGroupAWSSQSOptions) GetArgs() *args.AWSSQSReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ReadGroupMongoOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.MongoConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.MongoReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *ReadGroupMongoOptions) Reset() {
	*x = ReadGroupMongoOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadGroupMongoOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGroupMongoOptions) ProtoMessage() {}

func (x *ReadGroupMongoOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGroupMongoOptions.ProtoReflect.Descriptor instead.
func (*ReadGroupMongoOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{7}
}

func (x *ReadGroupMongoOptions) GetXConn() *args.MongoConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *ReadGroupMongoOptions) GetArgs() *args.MongoReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ReadGroupNatsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.NatsConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.NatsReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *ReadGroupNatsOptions) Reset() {
	*x = ReadGroupNatsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadGroupNatsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGroupNatsOptions) ProtoMessage() {}

func (x *ReadGroupNatsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGroupNatsOptions.ProtoReflect.Descriptor instead.
func (*ReadGroupNatsOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{8}
}

func (x *ReadGroupNatsOptions) GetXConn() *args.NatsConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *ReadGroupNatsOptions) GetArgs() *args.NatsReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ReadGroupNatsStreamingOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.NatsStreamingConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.NatsStreamingReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *ReadGroupNatsStreamingOptions) Reset() {
	*x = ReadGroupNatsStreamingOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadGroupNatsStreamingOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGroupNatsStreamingOptions) ProtoMessage() {}

func (x *ReadGroupNatsStreamingOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGroupNatsStreamingOptions.ProtoReflect.Descriptor instead.
func (*ReadGroupNatsStreamingOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{9}
}

func (x *ReadGroupNatsStreamingOptions) GetXConn() *args.NatsStreamingConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *ReadGroupNatsStreamingOptions) GetArgs() *args.NatsStreamingReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ReadGroupNatsJetstreamOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.NatsJetstreamConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.NatsJetstreamReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *ReadGroupNatsJetstreamOptions) Reset() {
	*x = ReadGroupNatsJetstreamOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadGroupNatsJetstreamOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGroupNatsJetstreamOptions) ProtoMessage() {}

func (x *ReadGroupNatsJetstreamOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGroupNatsJetstreamOptions.ProtoReflect.Descriptor instead.
func (*ReadGroupNatsJetstreamOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{10}
}

func (x *ReadGroupNatsJetstreamOptions) GetXConn() *args.NatsJetstreamConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *ReadGroupNatsJetstreamOptions) GetArgs() *args.NatsJetstreamReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ReadGroupNSQOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.NSQConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.NSQReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *ReadGroupNSQOptions) Reset() {
	*x = ReadGroupNSQOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadGroupNSQOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGroupNSQOptions) ProtoMessage() {}

func (x *ReadGroupNSQOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGroupNSQOptions.ProtoReflect.Descriptor instead.
func (*ReadGroupNSQOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{11}
}

func (x *ReadGroupNSQOptions) GetXConn() *args.NSQConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *ReadGroupNSQOptions) GetArgs() *args.NSQReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ReadGroupPostgresOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.PostgresConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.PostgresReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *ReadGroupPostgresOptions) Reset() {
	*x = ReadGroupPostgresOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadGroupPostgresOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGroupPostgresOptions) ProtoMessage() {}

func (x *ReadGroupPostgresOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGroupPostgresOptions.ProtoReflect.Descriptor instead.
func (*ReadGroupPostgresOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{12}
}

func (x *ReadGroupPostgresOptions) GetXConn() *args.PostgresConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *ReadGroupPostgresOptions) GetArgs() *args.PostgresReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ReadGroupPulsarOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.PulsarConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.PulsarReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *ReadGroupPulsarOptions) Reset() {
	*x = ReadGroupPulsarOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadGroupPulsarOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGroupPulsarOptions) ProtoMessage() {}

func (x *ReadGroupPulsarOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGroupPulsarOptions.ProtoReflect.Descriptor instead.
func (*ReadGroupPulsarOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{13}
}

func (x *ReadGroupPulsarOptions) GetXConn() *args.PulsarConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *ReadGroupPulsarOptions) GetArgs() *args.PulsarReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ReadGroupRabbitOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.RabbitConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.RabbitReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *ReadGroupRabbitOptions) Reset() {
	*x = ReadGroupRabbitOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadGroupRabbitOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGroupRabbitOptions) ProtoMessage() {}

func (x *ReadGroupRabbitOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGroupRabbitOptions.ProtoReflect.Descriptor instead.
func (*ReadGroupRabbitOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{14}
}

func (x *ReadGroupRabbitOptions) GetXConn() *args.RabbitConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *ReadGroupRabbitOptions) GetArgs() *args.RabbitReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ReadGroupRabbitStreamsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.RabbitStreamsConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.RabbitStreamsReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *ReadGroupRabbitStreamsOptions) Reset() {
	*x = ReadGroupRabbitStreamsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadGroupRabbitStreamsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGroupRabbitStreamsOptions) ProtoMessage() {}

func (x *ReadGroupRabbitStreamsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGroupRabbitStreamsOptions.ProtoReflect.Descriptor instead.
func (*ReadGroupRabbitStreamsOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{15}
}

func (x *ReadGroupRabbitStreamsOptions) GetXConn() *args.RabbitStreamsConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *ReadGroupRabbitStreamsOptions) GetArgs() *args.RabbitStreamsReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ReadGroupRedisPubSubOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.RedisPubSubConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.RedisPubSubReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *ReadGroupRedisPubSubOptions) Reset() {
	*x = ReadGroupRedisPubSubOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadGroupRedisPubSubOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGroupRedisPubSubOptions) ProtoMessage() {}

func (x *ReadGroupRedisPubSubOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGroupRedisPubSubOptions.ProtoReflect.Descriptor instead.
func (*ReadGroupRedisPubSubOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{16}
}

func (x *ReadGroupRedisPubSubOptions) GetXConn() *args.RedisPubSubConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *ReadGroupRedisPubSubOptions) GetArgs() *args.RedisPubSubReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ReadGroupRedisStreamsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.RedisStreamsConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.RedisStreamsReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *ReadGroupRedisStreamsOptions) Reset() {
	*x = ReadGroupRedisStreamsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadGroupRedisStreamsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGroupRedisStreamsOptions) ProtoMessage() {}

func (x *ReadGroupRedisStreamsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGroupRedisStreamsOptions.ProtoReflect.Descriptor instead.
func (*ReadGroupRedisStreamsOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{17}
}

func (x *ReadGroupRedisStreamsOptions) GetXConn() *args.RedisStreamsConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *ReadGroupRedisStreamsOptions) GetArgs() *args.RedisStreamsReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ReadGroupAzureEventHubOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.AzureEventHubConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.AzureEventHubReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *ReadGroupAzureEventHubOptions) Reset() {
	*x = ReadGroupAzureEventHubOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadGroupAzureEventHubOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGroupAzureEventHubOptions) ProtoMessage() {}

func (x *ReadGroupAzureEventHubOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGroupAzureEventHubOptions.ProtoReflect.Descriptor instead.
func (*ReadGroupAzureEventHubOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{18}
}

func (x *ReadGroupAzureEventHubOptions) GetXConn() *args.AzureEventHubConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *ReadGroupAzureEventHubOptions) GetArgs() *args.AzureEventHubReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ReadGroupAzureServiceBusOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.AzureServiceBusConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.AzureServiceBusReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *ReadGroupAzureServiceBusOptions) Reset() {
	*x = ReadGroupAzureServiceBusOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadGroupAzureServiceBusOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGroupAzureServiceBusOptions) ProtoMessage() {}

func (x *ReadGroupAzureServiceBusOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGroupAzureServiceBusOptions.ProtoReflect.Descriptor instead.
func (*ReadGroupAzureServiceBusOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{19}
}

func (x *ReadGroupAzureServiceBusOptions) GetXConn() *args.AzureServiceBusConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *ReadGroupAzureServiceBusOptions) GetArgs() *args.AzureServiceBusReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ReadGroupMQTTOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.MQTTConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.MQTTReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *ReadGroupMQTTOptions) Reset() {
	*x = ReadGroupMQTTOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadGroupMQTTOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGroupMQTTOptions) ProtoMessage() {}

func (x *ReadGroupMQTTOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGroupMQTTOptions.ProtoReflect.Descriptor instead.
func (*ReadGroupMQTTOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{20}
}

func (x *ReadGroupMQTTOptions) GetXConn() *args.MQTTConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *ReadGroupMQTTOptions) GetArgs() *args.MQTTReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ReadGroupGCPPubSubOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.GCPPubSubConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.GCPPubSubReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *ReadGroupGCPPubSubOptions) Reset() {
	*x = ReadGroupGCPPubSubOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadGroupGCPPubSubOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGroupGCPPubSubOptions) ProtoMessage() {}

func (x *ReadGroupGCPPubSubOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGroupGCPPubSubOptions.ProtoReflect.Descriptor instead.
func (*ReadGroupGCPPubSubOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{21}
}

func (x *ReadGroupGCPPubSubOptions) GetXConn() *args.GCPPubSubConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *ReadGroupGCPPubSubOptions) GetArgs() *args.GCPPubSubReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ReadGroupKubeMQQueueOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.KubeMQQueueConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.KubeMQQueueReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *ReadGroupKubeMQQueueOptions) Reset() {
	*x = ReadGroupKubeMQQueueOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadGroupKubeMQQueueOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGroupKubeMQQueueOptions) ProtoMessage() {}

func (x *ReadGroupKubeMQQueueOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGroupKubeMQQueueOptions.ProtoReflect.Descriptor instead.
func (*ReadGroupKubeMQQueueOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{22}
}

func (x *ReadGroupKubeMQQueueOptions) GetXConn() *args.KubeMQQueueConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *ReadGroupKubeMQQueueOptions) GetArgs() *args.KubeMQQueueReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ReadGroupAWSKinesisOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.AWSKinesisConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.AWSKinesisReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *ReadGroupAWSKinesisOptions) Reset() {
	*x = ReadGroupAWSKinesisOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadGroupAWSKinesisOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGroupAWSKinesisOptions) ProtoMessage() {}

func (x *ReadGroupAWSKinesisOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGroupAWSKinesisOptions.ProtoReflect.Descriptor instead.
func (*ReadGroupAWSKinesisOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{23}
}

func (x *ReadGroupAWSKinesisOptions) GetXConn() *args.AWSKinesisConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *ReadGroupAWSKinesisOptions) GetArgs() *args.AWSKinesisReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type ReadGroupMemphisOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"embed"
	XConn *args.MemphisConn `protobuf:"bytes,1,opt,name=_conn,json=Conn,proto3" json:"_conn,omitempty" kong:"embed"`
	// @gotags: kong:"embed"
	Args *args.MemphisReadArgs `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty" kong:"embed"`
}

func (x *ReadGroupMemphisOptions) Reset() {
	*x = ReadGroupMemphisOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadGroupMemphisOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGroupMemphisOptions) ProtoMessage() {}

func (x *ReadGroupMemphisOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGroupMemphisOptions.ProtoReflect.Descriptor instead.
func (*ReadGroupMemphisOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{24}
}

func (x *ReadGroupMemphisOptions) GetXConn() *args.MemphisConn {
	if x != nil {
		return x.XConn
	}
	return nil
}

func (x *ReadGroupMemphisOptions) GetArgs() *args.MemphisReadArgs {
	if x != nil {
		return x.Args
	}
	return nil
}

type InferSchemaOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of schema to infer from the data
	// @gotags: kong:"-"
	Type InferSchemaOptions_Type `protobuf:"varint,1,opt,name=type,proto3,enum=protos.opts.InferSchemaOptions_Type" json:"type,omitempty" kong:"-"`
	// Existing schema ID. Can be filled out by end user, or by plumber
	// If filled out by end user, plumber will pull the schema and evolve from it
	// If empty, plumber will make a new schema, save and publish to other instances, and then evolve from it
	// @gotags: kong:"-"
	SchemaId string `protobuf:"bytes,2,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty" kong:"-"`
}

func (x *InferSchemaOptions) Reset() {
	*x = InferSchemaOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_read_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferSchemaOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferSchemaOptions) ProtoMessage() {}

func (x *InferSchemaOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_read_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferSchemaOptions.ProtoReflect.Descriptor instead.
func (*InferSchemaOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_read_proto_rawDescGZIP(), []int{25}
}

func (x *InferSchemaOptions) GetType() InferSchemaOptions_Type {
	if x != nil {
		return x.Type
	}
	return InferSchemaOptions_UNSET
}

func (x *InferSchemaOptions) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

var File_opts_ps_opts_read_proto protoreflect.FileDescriptor

var file_opts_ps_opts_read_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6f, 0x70, 0x74, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x1a, 0x1b, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f,
	0x61, 0x72, 0x67, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67,
	0x73, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67,
	0x73, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x71, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x22, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x61, 0x7a,
	0x75, 0x72, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67,
	0x73, 0x5f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x62, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x61, 0x72, 0x67, 0x73, 0x2f,
	0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x67, 0x63, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70,
	0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73,
	0x5f, 0x6b, 0x75, 0x62, 0x65, 0x6d, 0x71, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67,
	0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6d, 0x6f,
	0x6e, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x72, 0x67, 0x73, 0x2f,
	0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73,
	0x5f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x61, 0x72, 0x67,
	0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x6a,
	0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6e, 0x61, 0x74,
	0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f,
	0x6e, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61, 0x72, 0x67, 0x73, 0x2f,
	0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f,
	0x61, 0x72, 0x67, 0x73, 0x5f, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f,
	0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x61, 0x72,
	0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x72, 0x61, 0x62, 0x62, 0x69,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x22, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x73, 0x5f,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x63, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x4c,
	0x49, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x74, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x74, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x6c, 0x0a, 0x11, 0x52,
	0x65, 0x61, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x29, 0x0a, 0x11, 0x52, 0x65, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x22, 0xe4, 0x0f, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x12, 0x45, 0x0a,
	0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f,
	0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x44,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x64, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x36,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x14, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70,
	0x74, 0x73, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43,
	0x4c, 0x49, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x12,
	0x41, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6d, 0x71, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d,
	0x51, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x6d, 0x71, 0x12, 0x3c, 0x0a, 0x07, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x71, 0x73, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x57, 0x53, 0x53, 0x51,
	0x53, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x61, 0x77, 0x73, 0x53, 0x71, 0x73,
	0x12, 0x38, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61,
	0x74, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x74, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x6e, 0x61, 0x74,
	0x73, 0x12, 0x51, 0x0a, 0x0e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x6e, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x03, 0x6e, 0x73, 0x71, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e,
	0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x53, 0x51, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x03, 0x6e, 0x73, 0x71, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x75, 0x6c, 0x73,
	0x61, 0x72, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x70,
	0x75, 0x6c, 0x73, 0x61, 0x72, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x18,
	0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f,
	0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x62,
	0x62, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x72, 0x61, 0x62, 0x62,
	0x69, 0x74, 0x12, 0x51, 0x0a, 0x0e, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x18, 0x6e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x51, 0x54, 0x54, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x12, 0x58, 0x0a, 0x11,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x75,
	0x73, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x7a, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x75, 0x62, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x61, 0x7a, 0x75,
	0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x62, 0x12, 0x45, 0x0a, 0x0a, 0x67, 0x63,
	0x70, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x43, 0x50, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x67, 0x63, 0x70, 0x50, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x12, 0x4b, 0x0a, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x6d, 0x71, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b,
	0x75, 0x62, 0x65, 0x4d, 0x51, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x6d, 0x71, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x4b,
	0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x18, 0x73,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70,
	0x74, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x12, 0x4e, 0x0a, 0x0d, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x74, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x51,
	0x0a, 0x0e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x6a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x0d, 0x6e, 0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x48, 0x0a, 0x0b, 0x61, 0x77, 0x73, 0x5f, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73,
	0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x57,
	0x53, 0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0a, 0x61, 0x77, 0x73, 0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x6d,
	0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x22, 0x74, 0x0a, 0x15, 0x52,
	0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67,
	0x73, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e,
	0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4b, 0x61,
	0x66, 0x6b, 0x61, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x22, 0x7d, 0x0a, 0x18, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x4d, 0x51, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a,
	0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4d, 0x51, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x31, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4d, 0x51, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x22, 0x77, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x57, 0x53,
	0x53, 0x51, 0x53, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x53, 0x51, 0x53, 0x43, 0x6f,
	0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x53, 0x51, 0x53, 0x52, 0x65, 0x61, 0x64, 0x41,
	0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x74, 0x0a, 0x15, 0x52, 0x65, 0x61,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e,
	0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12,
	0x2e, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x67,
	0x6f, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22,
	0x71, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x74, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43,
	0x6f, 0x6e, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e,
	0x4e, 0x61, 0x74, 0x73, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67,
	0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x22, 0x8c, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e,
	0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73,
	0x2e, 0x4e, 0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f,
	0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x22, 0x6e, 0x0a, 0x13, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x53, 0x51,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x53, 0x51, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f,
	0x6e, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e,
	0x53, 0x51, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x22, 0x7d, 0x0a, 0x18, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x05,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x31, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22,
	0x77, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x75, 0x6c, 0x73,
	0x61, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x43, 0x6f, 0x6e,
	0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61,
	0x72, 0x67, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72,
	0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x77, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e,
	0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e,
	0x12, 0x2f, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x61, 0x62,
	0x62, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x22, 0x8c, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x61, 0x62, 0x62, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73,
	0x2e, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f,
	0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x36, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x22, 0x86, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x31, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x65,
	0x64, 0x69, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43,
	0x6f, 0x6e, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x52, 0x65, 0x61, 0x64, 0x41,
	0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x1c, 0x52, 0x65,
	0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x35,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x62,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x75, 0x62, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x36, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x75, 0x62, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x42, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12,
	0x38, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x7a, 0x75, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x73, 0x52, 0x65, 0x61, 0x64, 0x41,
	0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x71, 0x0a, 0x14, 0x52, 0x65, 0x61,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x51, 0x54, 0x54, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2a, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4d,
	0x51, 0x54, 0x54, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x2d, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4d, 0x51, 0x54, 0x54, 0x52, 0x65,
	0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x80, 0x01, 0x0a,
	0x19, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x43, 0x50, 0x50, 0x75, 0x62,
	0x53, 0x75, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x47, 0x43, 0x50, 0x50, 0x75, 0x62, 0x53, 0x75,
	0x62, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x47, 0x43, 0x50, 0x50, 0x75, 0x62, 0x53, 0x75,
	0x62, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22,
	0x86, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x75, 0x62,
	0x65, 0x4d, 0x51, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x31, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4b, 0x75, 0x62,
	0x65, 0x4d, 0x51, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f,
	0x6e, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x4d, 0x51, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72,
	0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x61,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x57, 0x53, 0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x43,
	0x6f, 0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x7a,
	0x0a, 0x17, 0x52, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x70, 0x68,
	0x69, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x43, 0x6f,
	0x6e, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x72, 0x67, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4a,
	0x53, 0x4f, 0x4e, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x10, 0x01, 0x2a, 0x5d, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x14,
	0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52,
	0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x36, 0x34, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x5a, 0x49, 0x50, 0x10, 0x02, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x63, 0x6f,
	0x72, 0x70, 0x2f, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opts_ps_opts_read_proto_rawDescOnce sync.Once
	file_opts_ps_opts_read_proto_rawDescData = file_opts_ps_opts_read_proto_rawDesc
)

func file_opts_ps_opts_read_proto_rawDescGZIP() []byte {
	file_opts_ps_opts_read_proto_rawDescOnce.Do(func() {
		file_opts_ps_opts_read_proto_rawDescData = protoimpl.X.CompressGZIP(file_opts_ps_opts_read_proto_rawDescData)
	})
	return file_opts_ps_opts_read_proto_rawDescData
}

var file_opts_ps_opts_read_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_opts_ps_opts_read_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_opts_ps_opts_read_proto_goTypes = []interface{}{
	(ConvertOption)(0),                      // 0: protos.opts.ConvertOption
	(InferSchemaOptions_Type)(0),            // 1: protos.opts.InferSchemaOptions.Type
	(*ReadCLIOptions)(nil),                  // 2: protos.opts.ReadCLIOptions
	(*ReadSampleOptions)(nil),               // 3: protos.opts.ReadSampleOptions
	(*ReadFilterOptions)(nil),               // 4: protos.opts.ReadFilterOptions
	(*ReadOptions)(nil),                     // 5: protos.opts.ReadOptions
	(*ReadGroupKafkaOptions)(nil),           // 6: protos.opts.ReadGroupKafkaOptions
	(*ReadGroupActiveMQOptions)(nil),        // 7: protos.opts.ReadGroupActiveMQOptions
	(*ReadGroupAWSSQSOptions)(nil),          // 8: protos.opts.ReadGroupAWSSQSOptions
	(*ReadGroupMongoOptions)(nil),           // 9: protos.opts.ReadGroupMongoOptions
	(*ReadGroupNatsOptions)(nil),            // 10: protos.opts.ReadGroupNatsOptions
	(*ReadGroupNatsStreamingOptions)(nil),   // 11: protos.opts.ReadGroupNatsStreamingOptions
	(*ReadGroupNatsJetstreamOptions)(nil),   // 12: protos.opts.ReadGroupNatsJetstreamOptions
	(*ReadGroupNSQOptions)(nil),             // 13: protos.opts.ReadGroupNSQOptions
	(*ReadGroupPostgresOptions)(nil),        // 14: protos.opts.ReadGroupPostgresOptions
	(*ReadGroupPulsarOptions)(nil),          // 15: protos.opts.ReadGroupPulsarOptions
	(*ReadGroupRabbitOptions)(nil),          // 16: protos.opts.ReadGroupRabbitOptions
	(*ReadGroupRabbitStreamsOptions)(nil),   // 17: protos.opts.ReadGroupRabbitStreamsOptions
	(*ReadGroupRedisPubSubOptions)(nil),     // 18: protos.opts.ReadGroupRedisPubSubOptions
	(*ReadGroupRedisStreamsOptions)(nil),    // 19: protos.opts.ReadGroupRedisStreamsOptions
	(*ReadGroupAzureEventHubOptions)(nil),   // 20: protos.opts.ReadGroupAzureEventHubOptions
	(*ReadGroupAzureServiceBusOptions)(nil), // 21: protos.opts.ReadGroupAzureServiceBusOptions
	(*ReadGroupMQTTOptions)(nil),            // 22: protos.opts.ReadGroupMQTTOptions
	(*ReadGroupGCPPubSubOptions)(nil),       // 23: protos.opts.ReadGroupGCPPubSubOptions
	(*ReadGroupKubeMQQueueOptions)(nil),     // 24: protos.opts.ReadGroupKubeMQQueueOptions
	(*ReadGroupAWSKinesisOptions)(nil),      // 25: protos.opts.ReadGroupAWSKinesisOptions
	(*ReadGroupMemphisOptions)(nil),         // 26: protos.opts.ReadGroupMemphisOptions
	(*InferSchemaOptions)(nil),              // 27: protos.opts.InferSchemaOptions
	(*encoding.DecodeOptions)(nil),          // 28: protos.encoding.DecodeOptions
	(*args.KafkaConn)(nil),                  // 29: protos.args.KafkaConn
	(*args.KafkaReadArgs)(nil),              // 30: protos.args.KafkaReadArgs
	(*args.ActiveMQConn)(nil),               // 31: protos.args.ActiveMQConn
	(*args.ActiveMQReadArgs)(nil),           // 32: protos.args.ActiveMQReadArgs
	(*args.AWSSQSConn)(nil),                 // 33: protos.args.AWSSQSConn
	(*args.AWSSQSReadArgs)(nil),             // 34: protos.args.AWSSQSReadArgs
	(*args.MongoConn)(nil),                  // 35: protos.args.MongoConn
	(*args.MongoReadArgs)(nil),              // 36: protos.args.MongoReadArgs
	(*args.NatsConn)(nil),                   // 37: protos.args.NatsConn
	(*args.NatsReadArgs)(nil),               // 38: protos.args.NatsReadArgs
	(*args.NatsStreamingConn)(nil),          // 39: protos.args.NatsStreamingConn
	(*args.NatsStreamingReadArgs)(nil),      // 40: protos.args.NatsStreamingReadArgs
	(*args.NatsJetstreamConn)(nil),          // 41: protos.args.NatsJetstreamConn
	(*args.NatsJetstreamReadArgs)(nil),      // 42: protos.args.NatsJetstreamReadArgs
	(*args.NSQConn)(nil),                    // 43: protos.args.NSQConn
	(*args.NSQReadArgs)(nil),                // 44: protos.args.NSQReadArgs
	(*args.PostgresConn)(nil),               // 45: protos.args.PostgresConn
	(*args.PostgresReadArgs)(nil),           // 46: protos.args.PostgresReadArgs
	(*args.PulsarConn)(nil),                 // 47: protos.args.PulsarConn
	(*args.PulsarReadArgs)(nil),             // 48: protos.args.PulsarReadArgs
	(*args.RabbitConn)(nil),                 // 49: protos.args.RabbitConn
	(*args.RabbitReadArgs)(nil),             // 50: protos.args.RabbitReadArgs
	(*args.RabbitStreamsConn)(nil),          // 51: protos.args.RabbitStreamsConn
	(*args.RabbitStreamsReadArgs)(nil),      // 52: protos.args.RabbitStreamsReadArgs
	(*args.RedisPubSubConn)(nil),            // 53: protos.args.RedisPubSubConn
	(*args.RedisPubSubReadArgs)(nil),        // 54: protos.args.RedisPubSubReadArgs
	(*args.RedisStreamsConn)(nil),           // 55: protos.args.RedisStreamsConn
	(*args.RedisStreamsReadArgs)(nil),       // 56: protos.args.RedisStreamsReadArgs
	(*args.AzureEventHubConn)(nil),          // 57: protos.args.AzureEventHubConn
	(*args.AzureEventHubReadArgs)(nil),      // 58: protos.args.AzureEventHubReadArgs
	(*args.AzureServiceBusConn)(nil),        // 59: protos.args.AzureServiceBusConn
	(*args.AzureServiceBusReadArgs)(nil),    // 60: protos.args.AzureServiceBusReadArgs
	(*args.MQTTConn)(nil),                   // 61: protos.args.MQTTConn
	(*args.MQTTReadArgs)(nil),               // 62: protos.args.MQTTReadArgs
	(*args.GCPPubSubConn)(nil),              // 63: protos.args.GCPPubSubConn
	(*args.GCPPubSubReadArgs)(nil),          // 64: protos.args.GCPPubSubReadArgs
	(*args.KubeMQQueueConn)(nil),            // 65: protos.args.KubeMQQueueConn
	(*args.KubeMQQueueReadArgs)(nil),        // 66: protos.args.KubeMQQueueReadArgs
	(*args.AWSKinesisConn)(nil),             // 67: protos.args.AWSKinesisConn
	(*args.AWSKinesisReadArgs)(nil),         // 68: protos.args.AWSKinesisReadArgs
	(*args.MemphisConn)(nil),                // 69: protos.args.MemphisConn
	(*args.MemphisReadArgs)(nil),            // 70: protos.args.MemphisReadArgs
}
var file_opts_ps_opts_read_proto_depIdxs = []int32{
	3,  // 0: protos.opts.ReadOptions.sample_options:type_name -> protos.opts.ReadSampleOptions
	28, // 1: protos.opts.ReadOptions.decode_options:type_name -> protos.encoding.DecodeOptions
	0,  // 2: protos.opts.ReadOptions.convert_output:type_name -> protos.opts.ConvertOption
	4,  // 3: protos.opts.ReadOptions.filter:type_name -> protos.opts.ReadFilterOptions
	27, // 4: protos.opts.ReadOptions.infer_schema_options:type_name -> protos.opts.InferSchemaOptions
	2,  // 5: protos.opts.ReadOptions._cli_options:type_name -> protos.opts.ReadCLIOptions
	6,  // 6: protos.opts.ReadOptions.kafka:type_name -> protos.opts.ReadGroupKafkaOptions
	7,  // 7: protos.opts.ReadOptions.activemq:type_name -> protos.opts.ReadGroupActiveMQOptions
	8,  // 8: protos.opts.ReadOptions.aws_sqs:type_name -> protos.opts.ReadGroupAWSSQSOptions
	9,  // 9: protos.opts.ReadOptions.mongo:type_name -> protos.opts.ReadGroupMongoOptions
	10, // 10: protos.opts.ReadOptions.nats:type_name -> protos.opts.ReadGroupNatsOptions
	11, // 11: protos.opts.ReadOptions.nats_streaming:type_name -> protos.opts.ReadGroupNatsStreamingOptions
	13, // 12: protos.opts.ReadOptions.nsq:type_name -> protos.opts.ReadGroupNSQOptions
	15, // 13: protos.opts.ReadOptions.pulsar:type_name -> protos.opts.ReadGroupPulsarOptions
	16, // 14: protos.opts.ReadOptions.rabbit:type_name -> protos.opts.ReadGroupRabbitOptions
	17, // 15: protos.opts.ReadOptions.rabbit_streams:type_name -> protos.opts.ReadGroupRabbitStreamsOptions
	22, // 16: protos.opts.ReadOptions.mqtt:type_name -> protos.opts.ReadGroupMQTTOptions
	21, // 17: protos.opts.ReadOptions.azure_service_bus:type_name -> protos.opts.ReadGroupAzureServiceBusOptions
	20, // 18: protos.opts.ReadOptions.azure_event_hub:type_name -> protos.opts.ReadGroupAzureEventHubOptions
	23, // 19: protos.opts.ReadOptions.gcp_pubsub:type_name -> protos.opts.ReadGroupGCPPubSubOptions
	24, // 20: protos.opts.ReadOptions.kubemq_queue:type_name -> protos.opts.ReadGroupKubeMQQueueOptions
	18, // 21: protos.opts.ReadOptions.redis_pubsub:type_name -> protos.opts.ReadGroupRedisPubSubOptions
	19, // 22: protos.opts.ReadOptions.redis_streams:type_name -> protos.opts.ReadGroupRedisStreamsOptions
	14, // 23: protos.opts.ReadOptions.postgres:type_name -> protos.opts.ReadGroupPostgresOptions
	12, // 24: protos.opts.ReadOptions.nats_jetstream:type_name -> protos.opts.ReadGroupNatsJetstreamOptions
	25, // 25: protos.opts.ReadOptions.aws_kinesis:type_name -> protos.opts.ReadGroupAWSKinesisOptions
	26, // 26: protos.opts.ReadOptions.memphis:type_name -> protos.opts.ReadGroupMemphisOptions
	29, // 27: protos.opts.ReadGroupKafkaOptions._conn:type_name -> protos.args.KafkaConn
	30, // 28: protos.opts.ReadGroupKafkaOptions.args:type_name -> protos.args.KafkaReadArgs
	31, // 29: protos.opts.ReadGroupActiveMQOptions._conn:type_name -> protos.args.ActiveMQConn
	32, // 30: protos.opts.ReadGroupActiveMQOptions.args:type_name -> protos.args.ActiveMQReadArgs
	33, // 31: protos.opts.ReadGroupAWSSQSOptions._conn:type_name -> protos.args.AWSSQSConn
	34, // 32: protos.opts.ReadGroupAWSSQSOptions.args:type_name -> protos.args.AWSSQSReadArgs
	35, // 33: protos.opts.ReadGroupMongoOptions._conn:type_name -> protos.args.MongoConn
	36, // 34: protos.opts.ReadGroupMongoOptions.args:type_name -> protos.args.MongoReadArgs
	37, // 35: protos.opts.ReadGroupNatsOptions._conn:type_name -> protos.args.NatsConn
	38, // 36: protos.opts.ReadGroupNatsOptions.args:type_name -> protos.args.NatsReadArgs
	39, // 37: protos.opts.ReadGroupNatsStreamingOptions._conn:type_name -> protos.args.NatsStreamingConn
	40, // 38: protos.opts.ReadGroupNatsStreamingOptions.args:type_name -> protos.args.NatsStreamingReadArgs
	41, // 39: protos.opts.ReadGroupNatsJetstreamOptions._conn:type_name -> protos.args.NatsJetstreamConn
	42, // 40: protos.opts.ReadGroupNatsJetstreamOptions.args:type_name -> protos.args.NatsJetstreamReadArgs
	43, // 41: protos.opts.ReadGroupNSQOptions._conn:type_name -> protos.args.NSQConn
	44, // 42: protos.opts.ReadGroupNSQOptions.args:type_name -> protos.args.NSQReadArgs
	45, // 43: protos.opts.ReadGroupPostgresOptions._conn:type_name -> protos.args.PostgresConn
	46, // 44: protos.opts.ReadGroupPostgresOptions.args:type_name -> protos.args.PostgresReadArgs
	47, // 45: protos.opts.ReadGroupPulsarOptions._conn:type_name -> protos.args.PulsarConn
	48, // 46: protos.opts.ReadGroupPulsarOptions.args:type_name -> protos.args.PulsarReadArgs
	49, // 47: protos.opts.ReadGroupRabbitOptions._conn:type_name -> protos.args.RabbitConn
	50, // 48: protos.opts.ReadGroupRabbitOptions.args:type_name -> protos.args.RabbitReadArgs
	51, // 49: protos.opts.ReadGroupRabbitStreamsOptions._conn:type_name -> protos.args.RabbitStreamsConn
	52, // 50: protos.opts.ReadGroupRabbitStreamsOptions.args:type_name -> protos.args.RabbitStreamsReadArgs
	53, // 51: protos.opts.ReadGroupRedisPubSubOptions._conn:type_name -> protos.args.RedisPubSubConn
	54, // 52: protos.opts.ReadGroupRedisPubSubOptions.args:type_name -> protos.args.RedisPubSubReadArgs
	55, // 53: protos.opts.ReadGroupRedisStreamsOptions._conn:type_name -> protos.args.RedisStreamsConn
	56, // 54: protos.opts.ReadGroupRedisStreamsOptions.args:type_name -> protos.args.RedisStreamsReadArgs
	57, // 55: protos.opts.ReadGroupAzureEventHubOptions._conn:type_name -> protos.args.AzureEventHubConn
	58, // 56: protos.opts.ReadGroupAzureEventHubOptions.args:type_name -> protos.args.AzureEventHubReadArgs
	59, // 57: protos.opts.ReadGroupAzureServiceBusOptions._conn:type_name -> protos.args.AzureServiceBusConn
	60, // 58: protos.opts.ReadGroupAzureServiceBusOptions.args:type_name -> protos.args.AzureServiceBusReadArgs
	61, // 59: protos.opts.ReadGroupMQTTOptions._conn:type_name -> protos.args.MQTTConn
	62, // 60: protos.opts.ReadGroupMQTTOptions.args:type_name -> protos.args.MQTTReadArgs
	63, // 61: protos.opts.ReadGroupGCPPubSubOptions._conn:type_name -> protos.args.GCPPubSubConn
	64, // 62: protos.opts.ReadGroupGCPPubSubOptions.args:type_name -> protos.args.GCPPubSubReadArgs
	65, // 63: protos.opts.ReadGroupKubeMQQueueOptions._conn:type_name -> protos.args.KubeMQQueueConn
	66, // 64: protos.opts.ReadGroupKubeMQQueueOptions.args:type_name -> protos.args.KubeMQQueueReadArgs
	67, // 65: protos.opts.ReadGroupAWSKinesisOptions._conn:type_name -> protos.args.AWSKinesisConn
	68, // 66: protos.opts.ReadGroupAWSKinesisOptions.args:type_name -> protos.args.AWSKinesisReadArgs
	69, // 67: protos.opts.ReadGroupMemphisOptions._conn:type_name -> protos.args.MemphisConn
	70, // 68: protos.opts.ReadGroupMemphisOptions.args:type_name -> protos.args.MemphisReadArgs
	1,  // 69: protos.opts.InferSchemaOptions.type:type_name -> protos.opts.InferSchemaOptions.Type
	70, // [70:70] is the sub-list for method output_type
	70, // [70:70] is the sub-list for method input_type
	70, // [70:70] is the sub-list for extension type_name
	70, // [70:70] is the sub-list for extension extendee
	0,  // [0:70] is the sub-list for field type_name
}

func init() { file_opts_ps_opts_read_proto_init() }
func file_opts_ps_opts_read_proto_init() {
	if File_opts_ps_opts_read_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_opts_ps_opts_read_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadCLIOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadSampleOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadFilterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadGroupKafkaOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadGroupActiveMQOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadGroupAWSSQSOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadGroupMongoOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadGroupNatsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadGroupNatsStreamingOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadGroupNatsJetstreamOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadGroupNSQOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadGroupPostgresOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadGroupPulsarOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadGroupRabbitOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadGroupRabbitStreamsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadGroupRedisPubSubOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadGroupRedisStreamsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadGroupAzureEventHubOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadGroupAzureServiceBusOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadGroupMQTTOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadGroupGCPPubSubOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadGroupKubeMQQueueOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadGroupAWSKinesisOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadGroupMemphisOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opts_ps_opts_read_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InferSchemaOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opts_ps_opts_read_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opts_ps_opts_read_proto_goTypes,
		DependencyIndexes: file_opts_ps_opts_read_proto_depIdxs,
		EnumInfos:         file_opts_ps_opts_read_proto_enumTypes,
		MessageInfos:      file_opts_ps_opts_read_proto_msgTypes,
	}.Build()
	File_opts_ps_opts_read_proto = out.File
	file_opts_ps_opts_read_proto_rawDesc = nil
	file_opts_ps_opts_read_proto_goTypes = nil
	file_opts_ps_opts_read_proto_depIdxs = nil
}
