// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: opts/ps_opts_connection.proto

package opts

import (
	args "github.com/batchcorp/plumber-schemas/build/go/protos/args"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ConnectionConfig is used for creating a new backend. CLI creates an instance
// of this structure by injecting the conn struct it receives via *Args.
type ConnectionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Friendly name to identify this connection by (used in plumber-server logs)
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Any notes associated with this connection (stored plumber-server side)
	Notes string `protobuf:"bytes,2,opt,name=notes,proto3" json:"notes,omitempty"`
	// Types that are assignable to Conn:
	//
	//	*ConnectionOptions_Kafka
	//	*ConnectionOptions_ActiveMq
	//	*ConnectionOptions_AwsSqs
	//	*ConnectionOptions_AwsSns
	//	*ConnectionOptions_Mongo
	//	*ConnectionOptions_Nats
	//	*ConnectionOptions_NatsStreaming
	//	*ConnectionOptions_Nsq
	//	*ConnectionOptions_Postgres
	//	*ConnectionOptions_Pulsar
	//	*ConnectionOptions_Rabbit
	//	*ConnectionOptions_RabbitStreams
	//	*ConnectionOptions_RedisPubsub
	//	*ConnectionOptions_RedisStreams
	//	*ConnectionOptions_AzureEventHub
	//	*ConnectionOptions_AzureServiceBus
	//	*ConnectionOptions_Mqtt
	//	*ConnectionOptions_KubemqQueue
	//	*ConnectionOptions_GcpPubsub
	//	*ConnectionOptions_NatsJetstream
	//	*ConnectionOptions_AwsKinesis
	//	*ConnectionOptions_Memphis
	Conn isConnectionOptions_Conn `protobuf_oneof:"conn"`
	// Used internally by plumber
	XId string `protobuf:"bytes,1000,opt,name=_id,json=Id,proto3" json:"_id,omitempty"`
}

func (x *ConnectionOptions) Reset() {
	*x = ConnectionOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opts_ps_opts_connection_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionOptions) ProtoMessage() {}

func (x *ConnectionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_opts_ps_opts_connection_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionOptions.ProtoReflect.Descriptor instead.
func (*ConnectionOptions) Descriptor() ([]byte, []int) {
	return file_opts_ps_opts_connection_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectionOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConnectionOptions) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (m *ConnectionOptions) GetConn() isConnectionOptions_Conn {
	if m != nil {
		return m.Conn
	}
	return nil
}

func (x *ConnectionOptions) GetKafka() *args.KafkaConn {
	if x, ok := x.GetConn().(*ConnectionOptions_Kafka); ok {
		return x.Kafka
	}
	return nil
}

func (x *ConnectionOptions) GetActiveMq() *args.ActiveMQConn {
	if x, ok := x.GetConn().(*ConnectionOptions_ActiveMq); ok {
		return x.ActiveMq
	}
	return nil
}

func (x *ConnectionOptions) GetAwsSqs() *args.AWSSQSConn {
	if x, ok := x.GetConn().(*ConnectionOptions_AwsSqs); ok {
		return x.AwsSqs
	}
	return nil
}

func (x *ConnectionOptions) GetAwsSns() *args.AWSSNSConn {
	if x, ok := x.GetConn().(*ConnectionOptions_AwsSns); ok {
		return x.AwsSns
	}
	return nil
}

func (x *ConnectionOptions) GetMongo() *args.MongoConn {
	if x, ok := x.GetConn().(*ConnectionOptions_Mongo); ok {
		return x.Mongo
	}
	return nil
}

func (x *ConnectionOptions) GetNats() *args.NatsConn {
	if x, ok := x.GetConn().(*ConnectionOptions_Nats); ok {
		return x.Nats
	}
	return nil
}

func (x *ConnectionOptions) GetNatsStreaming() *args.NatsStreamingConn {
	if x, ok := x.GetConn().(*ConnectionOptions_NatsStreaming); ok {
		return x.NatsStreaming
	}
	return nil
}

func (x *ConnectionOptions) GetNsq() *args.NSQConn {
	if x, ok := x.GetConn().(*ConnectionOptions_Nsq); ok {
		return x.Nsq
	}
	return nil
}

func (x *ConnectionOptions) GetPostgres() *args.PostgresConn {
	if x, ok := x.GetConn().(*ConnectionOptions_Postgres); ok {
		return x.Postgres
	}
	return nil
}

func (x *ConnectionOptions) GetPulsar() *args.PulsarConn {
	if x, ok := x.GetConn().(*ConnectionOptions_Pulsar); ok {
		return x.Pulsar
	}
	return nil
}

func (x *ConnectionOptions) GetRabbit() *args.RabbitConn {
	if x, ok := x.GetConn().(*ConnectionOptions_Rabbit); ok {
		return x.Rabbit
	}
	return nil
}

func (x *ConnectionOptions) GetRabbitStreams() *args.RabbitStreamsConn {
	if x, ok := x.GetConn().(*ConnectionOptions_RabbitStreams); ok {
		return x.RabbitStreams
	}
	return nil
}

func (x *ConnectionOptions) GetRedisPubsub() *args.RedisPubSubConn {
	if x, ok := x.GetConn().(*ConnectionOptions_RedisPubsub); ok {
		return x.RedisPubsub
	}
	return nil
}

func (x *ConnectionOptions) GetRedisStreams() *args.RedisStreamsConn {
	if x, ok := x.GetConn().(*ConnectionOptions_RedisStreams); ok {
		return x.RedisStreams
	}
	return nil
}

func (x *ConnectionOptions) GetAzureEventHub() *args.AzureEventHubConn {
	if x, ok := x.GetConn().(*ConnectionOptions_AzureEventHub); ok {
		return x.AzureEventHub
	}
	return nil
}

func (x *ConnectionOptions) GetAzureServiceBus() *args.AzureServiceBusConn {
	if x, ok := x.GetConn().(*ConnectionOptions_AzureServiceBus); ok {
		return x.AzureServiceBus
	}
	return nil
}

func (x *ConnectionOptions) GetMqtt() *args.MQTTConn {
	if x, ok := x.GetConn().(*ConnectionOptions_Mqtt); ok {
		return x.Mqtt
	}
	return nil
}

func (x *ConnectionOptions) GetKubemqQueue() *args.KubeMQQueueConn {
	if x, ok := x.GetConn().(*ConnectionOptions_KubemqQueue); ok {
		return x.KubemqQueue
	}
	return nil
}

func (x *ConnectionOptions) GetGcpPubsub() *args.GCPPubSubConn {
	if x, ok := x.GetConn().(*ConnectionOptions_GcpPubsub); ok {
		return x.GcpPubsub
	}
	return nil
}

func (x *ConnectionOptions) GetNatsJetstream() *args.NatsJetstreamConn {
	if x, ok := x.GetConn().(*ConnectionOptions_NatsJetstream); ok {
		return x.NatsJetstream
	}
	return nil
}

func (x *ConnectionOptions) GetAwsKinesis() *args.AWSKinesisConn {
	if x, ok := x.GetConn().(*ConnectionOptions_AwsKinesis); ok {
		return x.AwsKinesis
	}
	return nil
}

func (x *ConnectionOptions) GetMemphis() *args.MemphisConn {
	if x, ok := x.GetConn().(*ConnectionOptions_Memphis); ok {
		return x.Memphis
	}
	return nil
}

func (x *ConnectionOptions) GetXId() string {
	if x != nil {
		return x.XId
	}
	return ""
}

type isConnectionOptions_Conn interface {
	isConnectionOptions_Conn()
}

type ConnectionOptions_Kafka struct {
	Kafka *args.KafkaConn `protobuf:"bytes,100,opt,name=kafka,proto3,oneof"`
}

type ConnectionOptions_ActiveMq struct {
	ActiveMq *args.ActiveMQConn `protobuf:"bytes,101,opt,name=active_mq,json=activeMq,proto3,oneof"`
}

type ConnectionOptions_AwsSqs struct {
	AwsSqs *args.AWSSQSConn `protobuf:"bytes,102,opt,name=aws_sqs,json=awsSqs,proto3,oneof"`
}

type ConnectionOptions_AwsSns struct {
	AwsSns *args.AWSSNSConn `protobuf:"bytes,103,opt,name=aws_sns,json=awsSns,proto3,oneof"`
}

type ConnectionOptions_Mongo struct {
	Mongo *args.MongoConn `protobuf:"bytes,104,opt,name=mongo,proto3,oneof"`
}

type ConnectionOptions_Nats struct {
	Nats *args.NatsConn `protobuf:"bytes,105,opt,name=nats,proto3,oneof"`
}

type ConnectionOptions_NatsStreaming struct {
	NatsStreaming *args.NatsStreamingConn `protobuf:"bytes,106,opt,name=nats_streaming,json=natsStreaming,proto3,oneof"`
}

type ConnectionOptions_Nsq struct {
	Nsq *args.NSQConn `protobuf:"bytes,107,opt,name=nsq,proto3,oneof"`
}

type ConnectionOptions_Postgres struct {
	Postgres *args.PostgresConn `protobuf:"bytes,108,opt,name=postgres,proto3,oneof"`
}

type ConnectionOptions_Pulsar struct {
	Pulsar *args.PulsarConn `protobuf:"bytes,109,opt,name=pulsar,proto3,oneof"`
}

type ConnectionOptions_Rabbit struct {
	Rabbit *args.RabbitConn `protobuf:"bytes,110,opt,name=rabbit,proto3,oneof"`
}

type ConnectionOptions_RabbitStreams struct {
	RabbitStreams *args.RabbitStreamsConn `protobuf:"bytes,111,opt,name=rabbit_streams,json=rabbitStreams,proto3,oneof"`
}

type ConnectionOptions_RedisPubsub struct {
	RedisPubsub *args.RedisPubSubConn `protobuf:"bytes,112,opt,name=redis_pubsub,json=redisPubsub,proto3,oneof"`
}

type ConnectionOptions_RedisStreams struct {
	RedisStreams *args.RedisStreamsConn `protobuf:"bytes,113,opt,name=redis_streams,json=redisStreams,proto3,oneof"`
}

type ConnectionOptions_AzureEventHub struct {
	AzureEventHub *args.AzureEventHubConn `protobuf:"bytes,114,opt,name=azure_event_hub,json=azureEventHub,proto3,oneof"`
}

type ConnectionOptions_AzureServiceBus struct {
	AzureServiceBus *args.AzureServiceBusConn `protobuf:"bytes,115,opt,name=azure_service_bus,json=azureServiceBus,proto3,oneof"`
}

type ConnectionOptions_Mqtt struct {
	Mqtt *args.MQTTConn `protobuf:"bytes,116,opt,name=mqtt,proto3,oneof"`
}

type ConnectionOptions_KubemqQueue struct {
	KubemqQueue *args.KubeMQQueueConn `protobuf:"bytes,117,opt,name=kubemq_queue,json=kubemqQueue,proto3,oneof"`
}

type ConnectionOptions_GcpPubsub struct {
	GcpPubsub *args.GCPPubSubConn `protobuf:"bytes,118,opt,name=gcp_pubsub,json=gcpPubsub,proto3,oneof"`
}

type ConnectionOptions_NatsJetstream struct {
	NatsJetstream *args.NatsJetstreamConn `protobuf:"bytes,119,opt,name=nats_jetstream,json=natsJetstream,proto3,oneof"`
}

type ConnectionOptions_AwsKinesis struct {
	AwsKinesis *args.AWSKinesisConn `protobuf:"bytes,120,opt,name=aws_kinesis,json=awsKinesis,proto3,oneof"`
}

type ConnectionOptions_Memphis struct {
	Memphis *args.MemphisConn `protobuf:"bytes,121,opt,name=memphis,proto3,oneof"`
}

func (*ConnectionOptions_Kafka) isConnectionOptions_Conn() {}

func (*ConnectionOptions_ActiveMq) isConnectionOptions_Conn() {}

func (*ConnectionOptions_AwsSqs) isConnectionOptions_Conn() {}

func (*ConnectionOptions_AwsSns) isConnectionOptions_Conn() {}

func (*ConnectionOptions_Mongo) isConnectionOptions_Conn() {}

func (*ConnectionOptions_Nats) isConnectionOptions_Conn() {}

func (*ConnectionOptions_NatsStreaming) isConnectionOptions_Conn() {}

func (*ConnectionOptions_Nsq) isConnectionOptions_Conn() {}

func (*ConnectionOptions_Postgres) isConnectionOptions_Conn() {}

func (*ConnectionOptions_Pulsar) isConnectionOptions_Conn() {}

func (*ConnectionOptions_Rabbit) isConnectionOptions_Conn() {}

func (*ConnectionOptions_RabbitStreams) isConnectionOptions_Conn() {}

func (*ConnectionOptions_RedisPubsub) isConnectionOptions_Conn() {}

func (*ConnectionOptions_RedisStreams) isConnectionOptions_Conn() {}

func (*ConnectionOptions_AzureEventHub) isConnectionOptions_Conn() {}

func (*ConnectionOptions_AzureServiceBus) isConnectionOptions_Conn() {}

func (*ConnectionOptions_Mqtt) isConnectionOptions_Conn() {}

func (*ConnectionOptions_KubemqQueue) isConnectionOptions_Conn() {}

func (*ConnectionOptions_GcpPubsub) isConnectionOptions_Conn() {}

func (*ConnectionOptions_NatsJetstream) isConnectionOptions_Conn() {}

func (*ConnectionOptions_AwsKinesis) isConnectionOptions_Conn() {}

func (*ConnectionOptions_Memphis) isConnectionOptions_Conn() {}

var File_opts_ps_opts_connection_proto protoreflect.FileDescriptor

var file_opts_ps_opts_connection_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x6f, 0x70, 0x74, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6f, 0x70, 0x74, 0x73, 0x1a, 0x1b, 0x61, 0x72,
	0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x6d, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x61, 0x72, 0x67, 0x73, 0x2f,
	0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x6b, 0x69, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x61, 0x72, 0x67, 0x73, 0x2f,
	0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61,
	0x72, 0x67, 0x73, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x71, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x22, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x75, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61,
	0x72, 0x67, 0x73, 0x5f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x62, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x61, 0x72, 0x67,
	0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x67, 0x63, 0x70, 0x5f, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x72, 0x67, 0x73,
	0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x6d, 0x71, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61,
	0x72, 0x67, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x18, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f,
	0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x72, 0x67,
	0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x61,
	0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x73,
	0x5f, 0x6a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x21, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6e,
	0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67,
	0x73, 0x5f, 0x6e, 0x73, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61, 0x72, 0x67,
	0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70,
	0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67,
	0x73, 0x5f, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x72, 0x61, 0x62,
	0x62, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x61, 0x72, 0x67, 0x73, 0x2f, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73,
	0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x0a, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67,
	0x73, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d,
	0x71, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x51, 0x43, 0x6f,
	0x6e, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x71, 0x12, 0x32,
	0x0a, 0x07, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x71, 0x73, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x57,
	0x53, 0x53, 0x51, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x61, 0x77, 0x73, 0x53,
	0x71, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x77, 0x73, 0x5f, 0x73, 0x6e, 0x73, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67,
	0x73, 0x2e, 0x41, 0x57, 0x53, 0x53, 0x4e, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x00, 0x52, 0x06,
	0x61, 0x77, 0x73, 0x53, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61,
	0x72, 0x67, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x00, 0x52,
	0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x74, 0x73, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72,
	0x67, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x6e,
	0x61, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x03,
	0x6e, 0x73, 0x71, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x53, 0x51, 0x43, 0x6f, 0x6e, 0x6e, 0x48,
	0x00, 0x52, 0x03, 0x6e, 0x73, 0x71, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x43,
	0x6f, 0x6e, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x06, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x50, 0x75,
	0x6c, 0x73, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x70, 0x75, 0x6c, 0x73,
	0x61, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x18, 0x6e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73,
	0x2e, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x72,
	0x61, 0x62, 0x62, 0x69, 0x74, 0x12, 0x47, 0x0a, 0x0e, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x61, 0x62, 0x62,
	0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x00, 0x52,
	0x0d, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x41,
	0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x18, 0x70,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72,
	0x67, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x43, 0x6f,
	0x6e, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x73, 0x50, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x75, 0x62, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41,
	0x7a, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x62, 0x43, 0x6f, 0x6e, 0x6e,
	0x48, 0x00, 0x52, 0x0d, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x75,
	0x62, 0x12, 0x4e, 0x0a, 0x11, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x00,
	0x52, 0x0f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75,
	0x73, 0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4d, 0x51,
	0x54, 0x54, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x71, 0x74, 0x74, 0x12, 0x41,
	0x0a, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x6d, 0x71, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x75,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72,
	0x67, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x4d, 0x51, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x6d, 0x71, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x67, 0x63, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x18,
	0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61,
	0x72, 0x67, 0x73, 0x2e, 0x47, 0x43, 0x50, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x6e,
	0x6e, 0x48, 0x00, 0x52, 0x09, 0x67, 0x63, 0x70, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x12, 0x47,
	0x0a, 0x0e, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x6a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x61, 0x74, 0x73, 0x4a, 0x65,
	0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x77, 0x73, 0x5f, 0x6b,
	0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x4b, 0x69,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x77, 0x73,
	0x4b, 0x69, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x70, 0x68,
	0x69, 0x73, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x43, 0x6f,
	0x6e, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x70, 0x68, 0x69, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x42,
	0x06, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x63, 0x6f, 0x72, 0x70, 0x2f,
	0x70, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x6f, 0x70, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opts_ps_opts_connection_proto_rawDescOnce sync.Once
	file_opts_ps_opts_connection_proto_rawDescData = file_opts_ps_opts_connection_proto_rawDesc
)

func file_opts_ps_opts_connection_proto_rawDescGZIP() []byte {
	file_opts_ps_opts_connection_proto_rawDescOnce.Do(func() {
		file_opts_ps_opts_connection_proto_rawDescData = protoimpl.X.CompressGZIP(file_opts_ps_opts_connection_proto_rawDescData)
	})
	return file_opts_ps_opts_connection_proto_rawDescData
}

var file_opts_ps_opts_connection_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_opts_ps_opts_connection_proto_goTypes = []interface{}{
	(*ConnectionOptions)(nil),        // 0: protos.opts.ConnectionOptions
	(*args.KafkaConn)(nil),           // 1: protos.args.KafkaConn
	(*args.ActiveMQConn)(nil),        // 2: protos.args.ActiveMQConn
	(*args.AWSSQSConn)(nil),          // 3: protos.args.AWSSQSConn
	(*args.AWSSNSConn)(nil),          // 4: protos.args.AWSSNSConn
	(*args.MongoConn)(nil),           // 5: protos.args.MongoConn
	(*args.NatsConn)(nil),            // 6: protos.args.NatsConn
	(*args.NatsStreamingConn)(nil),   // 7: protos.args.NatsStreamingConn
	(*args.NSQConn)(nil),             // 8: protos.args.NSQConn
	(*args.PostgresConn)(nil),        // 9: protos.args.PostgresConn
	(*args.PulsarConn)(nil),          // 10: protos.args.PulsarConn
	(*args.RabbitConn)(nil),          // 11: protos.args.RabbitConn
	(*args.RabbitStreamsConn)(nil),   // 12: protos.args.RabbitStreamsConn
	(*args.RedisPubSubConn)(nil),     // 13: protos.args.RedisPubSubConn
	(*args.RedisStreamsConn)(nil),    // 14: protos.args.RedisStreamsConn
	(*args.AzureEventHubConn)(nil),   // 15: protos.args.AzureEventHubConn
	(*args.AzureServiceBusConn)(nil), // 16: protos.args.AzureServiceBusConn
	(*args.MQTTConn)(nil),            // 17: protos.args.MQTTConn
	(*args.KubeMQQueueConn)(nil),     // 18: protos.args.KubeMQQueueConn
	(*args.GCPPubSubConn)(nil),       // 19: protos.args.GCPPubSubConn
	(*args.NatsJetstreamConn)(nil),   // 20: protos.args.NatsJetstreamConn
	(*args.AWSKinesisConn)(nil),      // 21: protos.args.AWSKinesisConn
	(*args.MemphisConn)(nil),         // 22: protos.args.MemphisConn
}
var file_opts_ps_opts_connection_proto_depIdxs = []int32{
	1,  // 0: protos.opts.ConnectionOptions.kafka:type_name -> protos.args.KafkaConn
	2,  // 1: protos.opts.ConnectionOptions.active_mq:type_name -> protos.args.ActiveMQConn
	3,  // 2: protos.opts.ConnectionOptions.aws_sqs:type_name -> protos.args.AWSSQSConn
	4,  // 3: protos.opts.ConnectionOptions.aws_sns:type_name -> protos.args.AWSSNSConn
	5,  // 4: protos.opts.ConnectionOptions.mongo:type_name -> protos.args.MongoConn
	6,  // 5: protos.opts.ConnectionOptions.nats:type_name -> protos.args.NatsConn
	7,  // 6: protos.opts.ConnectionOptions.nats_streaming:type_name -> protos.args.NatsStreamingConn
	8,  // 7: protos.opts.ConnectionOptions.nsq:type_name -> protos.args.NSQConn
	9,  // 8: protos.opts.ConnectionOptions.postgres:type_name -> protos.args.PostgresConn
	10, // 9: protos.opts.ConnectionOptions.pulsar:type_name -> protos.args.PulsarConn
	11, // 10: protos.opts.ConnectionOptions.rabbit:type_name -> protos.args.RabbitConn
	12, // 11: protos.opts.ConnectionOptions.rabbit_streams:type_name -> protos.args.RabbitStreamsConn
	13, // 12: protos.opts.ConnectionOptions.redis_pubsub:type_name -> protos.args.RedisPubSubConn
	14, // 13: protos.opts.ConnectionOptions.redis_streams:type_name -> protos.args.RedisStreamsConn
	15, // 14: protos.opts.ConnectionOptions.azure_event_hub:type_name -> protos.args.AzureEventHubConn
	16, // 15: protos.opts.ConnectionOptions.azure_service_bus:type_name -> protos.args.AzureServiceBusConn
	17, // 16: protos.opts.ConnectionOptions.mqtt:type_name -> protos.args.MQTTConn
	18, // 17: protos.opts.ConnectionOptions.kubemq_queue:type_name -> protos.args.KubeMQQueueConn
	19, // 18: protos.opts.ConnectionOptions.gcp_pubsub:type_name -> protos.args.GCPPubSubConn
	20, // 19: protos.opts.ConnectionOptions.nats_jetstream:type_name -> protos.args.NatsJetstreamConn
	21, // 20: protos.opts.ConnectionOptions.aws_kinesis:type_name -> protos.args.AWSKinesisConn
	22, // 21: protos.opts.ConnectionOptions.memphis:type_name -> protos.args.MemphisConn
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_opts_ps_opts_connection_proto_init() }
func file_opts_ps_opts_connection_proto_init() {
	if File_opts_ps_opts_connection_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_opts_ps_opts_connection_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_opts_ps_opts_connection_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ConnectionOptions_Kafka)(nil),
		(*ConnectionOptions_ActiveMq)(nil),
		(*ConnectionOptions_AwsSqs)(nil),
		(*ConnectionOptions_AwsSns)(nil),
		(*ConnectionOptions_Mongo)(nil),
		(*ConnectionOptions_Nats)(nil),
		(*ConnectionOptions_NatsStreaming)(nil),
		(*ConnectionOptions_Nsq)(nil),
		(*ConnectionOptions_Postgres)(nil),
		(*ConnectionOptions_Pulsar)(nil),
		(*ConnectionOptions_Rabbit)(nil),
		(*ConnectionOptions_RabbitStreams)(nil),
		(*ConnectionOptions_RedisPubsub)(nil),
		(*ConnectionOptions_RedisStreams)(nil),
		(*ConnectionOptions_AzureEventHub)(nil),
		(*ConnectionOptions_AzureServiceBus)(nil),
		(*ConnectionOptions_Mqtt)(nil),
		(*ConnectionOptions_KubemqQueue)(nil),
		(*ConnectionOptions_GcpPubsub)(nil),
		(*ConnectionOptions_NatsJetstream)(nil),
		(*ConnectionOptions_AwsKinesis)(nil),
		(*ConnectionOptions_Memphis)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opts_ps_opts_connection_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opts_ps_opts_connection_proto_goTypes,
		DependencyIndexes: file_opts_ps_opts_connection_proto_depIdxs,
		MessageInfos:      file_opts_ps_opts_connection_proto_msgTypes,
	}.Build()
	File_opts_ps_opts_connection_proto = out.File
	file_opts_ps_opts_connection_proto_rawDesc = nil
	file_opts_ps_opts_connection_proto_goTypes = nil
	file_opts_ps_opts_connection_proto_depIdxs = nil
}
