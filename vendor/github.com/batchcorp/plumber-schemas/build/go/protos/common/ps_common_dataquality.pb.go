// ps_common_dataquality.proto contains data quality rule structures

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: ps_common_dataquality.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RuleType int32

const (
	RuleType_RULE_TYPE_UNSET     RuleType = 0
	RuleType_RULE_TYPE_MATCH     RuleType = 1
	RuleType_RULE_TYPE_TRANSFORM RuleType = 2
	RuleType_RULE_TYPE_CUSTOM    RuleType = 3
)

// Enum value maps for RuleType.
var (
	RuleType_name = map[int32]string{
		0: "RULE_TYPE_UNSET",
		1: "RULE_TYPE_MATCH",
		2: "RULE_TYPE_TRANSFORM",
		3: "RULE_TYPE_CUSTOM",
	}
	RuleType_value = map[string]int32{
		"RULE_TYPE_UNSET":     0,
		"RULE_TYPE_MATCH":     1,
		"RULE_TYPE_TRANSFORM": 2,
		"RULE_TYPE_CUSTOM":    3,
	}
)

func (x RuleType) Enum() *RuleType {
	p := new(RuleType)
	*p = x
	return p
}

func (x RuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_ps_common_dataquality_proto_enumTypes[0].Descriptor()
}

func (RuleType) Type() protoreflect.EnumType {
	return &file_ps_common_dataquality_proto_enumTypes[0]
}

func (x RuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleType.Descriptor instead.
func (RuleType) EnumDescriptor() ([]byte, []int) {
	return file_ps_common_dataquality_proto_rawDescGZIP(), []int{0}
}

type RuleMode int32

const (
	RuleMode_RULE_MODE_UNSET   RuleMode = 0
	RuleMode_RULE_MODE_PUBLISH RuleMode = 1
	RuleMode_RULE_MODE_CONSUME RuleMode = 2
	RuleMode_RULE_MODE_BOTH    RuleMode = 3
)

// Enum value maps for RuleMode.
var (
	RuleMode_name = map[int32]string{
		0: "RULE_MODE_UNSET",
		1: "RULE_MODE_PUBLISH",
		2: "RULE_MODE_CONSUME",
		3: "RULE_MODE_BOTH",
	}
	RuleMode_value = map[string]int32{
		"RULE_MODE_UNSET":   0,
		"RULE_MODE_PUBLISH": 1,
		"RULE_MODE_CONSUME": 2,
		"RULE_MODE_BOTH":    3,
	}
)

func (x RuleMode) Enum() *RuleMode {
	p := new(RuleMode)
	*p = x
	return p
}

func (x RuleMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ps_common_dataquality_proto_enumTypes[1].Descriptor()
}

func (RuleMode) Type() protoreflect.EnumType {
	return &file_ps_common_dataquality_proto_enumTypes[1]
}

func (x RuleMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleMode.Descriptor instead.
func (RuleMode) EnumDescriptor() ([]byte, []int) {
	return file_ps_common_dataquality_proto_rawDescGZIP(), []int{1}
}

type RuleFailureMode int32

const (
	RuleFailureMode_RULE_FAILURE_MODE_UNSET RuleFailureMode = 0
	// Reject message on publish, ignore message on consume
	RuleFailureMode_RULE_FAILURE_MODE_REJECT RuleFailureMode = 1
	// Send message to Streamdal DLQ
	RuleFailureMode_RULE_FAILURE_MODE_DLQ RuleFailureMode = 2
	// Run a transform on the message
	RuleFailureMode_RULE_FAILURE_MODE_TRANSFORM RuleFailureMode = 3
	// Send an alert to slack
	RuleFailureMode_RULE_FAILURE_MODE_ALERT_SLACK RuleFailureMode = 4
)

// Enum value maps for RuleFailureMode.
var (
	RuleFailureMode_name = map[int32]string{
		0: "RULE_FAILURE_MODE_UNSET",
		1: "RULE_FAILURE_MODE_REJECT",
		2: "RULE_FAILURE_MODE_DLQ",
		3: "RULE_FAILURE_MODE_TRANSFORM",
		4: "RULE_FAILURE_MODE_ALERT_SLACK",
	}
	RuleFailureMode_value = map[string]int32{
		"RULE_FAILURE_MODE_UNSET":       0,
		"RULE_FAILURE_MODE_REJECT":      1,
		"RULE_FAILURE_MODE_DLQ":         2,
		"RULE_FAILURE_MODE_TRANSFORM":   3,
		"RULE_FAILURE_MODE_ALERT_SLACK": 4,
	}
)

func (x RuleFailureMode) Enum() *RuleFailureMode {
	p := new(RuleFailureMode)
	*p = x
	return p
}

func (x RuleFailureMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleFailureMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ps_common_dataquality_proto_enumTypes[2].Descriptor()
}

func (RuleFailureMode) Type() protoreflect.EnumType {
	return &file_ps_common_dataquality_proto_enumTypes[2]
}

func (x RuleFailureMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleFailureMode.Descriptor instead.
func (RuleFailureMode) EnumDescriptor() ([]byte, []int) {
	return file_ps_common_dataquality_proto_rawDescGZIP(), []int{2}
}

type RuleSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Rules []*Rule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *RuleSet) Reset() {
	*x = RuleSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ps_common_dataquality_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleSet) ProtoMessage() {}

func (x *RuleSet) ProtoReflect() protoreflect.Message {
	mi := &file_ps_common_dataquality_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleSet.ProtoReflect.Descriptor instead.
func (*RuleSet) Descriptor() ([]byte, []int) {
	return file_ps_common_dataquality_proto_rawDescGZIP(), []int{0}
}

func (x *RuleSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RuleSet) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines which kind of wasm function we're executing
	Type RuleType `protobuf:"varint,1,opt,name=type,proto3,enum=protos.common.RuleType" json:"type,omitempty"`
	// Determines when this rule is ran
	Mode RuleMode `protobuf:"varint,2,opt,name=mode,proto3,enum=protos.common.RuleMode" json:"mode,omitempty"`
	// TODO: should this be an enum?
	Bus string `protobuf:"bytes,3,opt,name=bus,proto3" json:"bus,omitempty"`
	// What key to run these rules on
	// Kafka:
	//   - Key is the topic being published to, or read from
	//
	// RabbitMQ
	//   - Key is the binding/routing key depending on publish or consume
	Key []string `protobuf:"bytes,4,rep,name=key,proto3" json:"key,omitempty"`
	// The failure mode to use if the rule fails
	FailureMode RuleFailureMode `protobuf:"varint,5,opt,name=failure_mode,json=failureMode,proto3,enum=protos.common.RuleFailureMode" json:"failure_mode,omitempty"`
	// The failure mode configuration
	//
	// Types that are assignable to FailureModeConfig:
	//
	//	*Rule_Reject
	//	*Rule_Dlq
	//	*Rule_Transform
	//	*Rule_AlertSlack
	FailureModeConfig isRule_FailureModeConfig `protobuf_oneof:"failure_mode_config"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ps_common_dataquality_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_ps_common_dataquality_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_ps_common_dataquality_proto_rawDescGZIP(), []int{1}
}

func (x *Rule) GetType() RuleType {
	if x != nil {
		return x.Type
	}
	return RuleType_RULE_TYPE_UNSET
}

func (x *Rule) GetMode() RuleMode {
	if x != nil {
		return x.Mode
	}
	return RuleMode_RULE_MODE_UNSET
}

func (x *Rule) GetBus() string {
	if x != nil {
		return x.Bus
	}
	return ""
}

func (x *Rule) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Rule) GetFailureMode() RuleFailureMode {
	if x != nil {
		return x.FailureMode
	}
	return RuleFailureMode_RULE_FAILURE_MODE_UNSET
}

func (m *Rule) GetFailureModeConfig() isRule_FailureModeConfig {
	if m != nil {
		return m.FailureModeConfig
	}
	return nil
}

func (x *Rule) GetReject() *FailureModeReject {
	if x, ok := x.GetFailureModeConfig().(*Rule_Reject); ok {
		return x.Reject
	}
	return nil
}

func (x *Rule) GetDlq() *FailureModeDLQ {
	if x, ok := x.GetFailureModeConfig().(*Rule_Dlq); ok {
		return x.Dlq
	}
	return nil
}

func (x *Rule) GetTransform() *FailureModeTransform {
	if x, ok := x.GetFailureModeConfig().(*Rule_Transform); ok {
		return x.Transform
	}
	return nil
}

func (x *Rule) GetAlertSlack() *FailureModeAlertSlack {
	if x, ok := x.GetFailureModeConfig().(*Rule_AlertSlack); ok {
		return x.AlertSlack
	}
	return nil
}

type isRule_FailureModeConfig interface {
	isRule_FailureModeConfig()
}

type Rule_Reject struct {
	Reject *FailureModeReject `protobuf:"bytes,100,opt,name=reject,proto3,oneof"`
}

type Rule_Dlq struct {
	Dlq *FailureModeDLQ `protobuf:"bytes,101,opt,name=dlq,proto3,oneof"`
}

type Rule_Transform struct {
	Transform *FailureModeTransform `protobuf:"bytes,102,opt,name=transform,proto3,oneof"`
}

type Rule_AlertSlack struct {
	AlertSlack *FailureModeAlertSlack `protobuf:"bytes,103,opt,name=alert_slack,json=alertSlack,proto3,oneof"`
}

func (*Rule_Reject) isRule_FailureModeConfig() {}

func (*Rule_Dlq) isRule_FailureModeConfig() {}

func (*Rule_Transform) isRule_FailureModeConfig() {}

func (*Rule_AlertSlack) isRule_FailureModeConfig() {}

type FailureModeReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FailureModeReject) Reset() {
	*x = FailureModeReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ps_common_dataquality_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureModeReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureModeReject) ProtoMessage() {}

func (x *FailureModeReject) ProtoReflect() protoreflect.Message {
	mi := &file_ps_common_dataquality_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureModeReject.ProtoReflect.Descriptor instead.
func (*FailureModeReject) Descriptor() ([]byte, []int) {
	return file_ps_common_dataquality_proto_rawDescGZIP(), []int{2}
}

type FailureModeDLQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamdalToken string `protobuf:"bytes,1,opt,name=streamdal_token,json=streamdalToken,proto3" json:"streamdal_token,omitempty"`
}

func (x *FailureModeDLQ) Reset() {
	*x = FailureModeDLQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ps_common_dataquality_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureModeDLQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureModeDLQ) ProtoMessage() {}

func (x *FailureModeDLQ) ProtoReflect() protoreflect.Message {
	mi := &file_ps_common_dataquality_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureModeDLQ.ProtoReflect.Descriptor instead.
func (*FailureModeDLQ) Descriptor() ([]byte, []int) {
	return file_ps_common_dataquality_proto_rawDescGZIP(), []int{3}
}

func (x *FailureModeDLQ) GetStreamdalToken() string {
	if x != nil {
		return x.StreamdalToken
	}
	return ""
}

type FailureModeTransform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key we are replacing
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The value we are replacing it with
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FailureModeTransform) Reset() {
	*x = FailureModeTransform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ps_common_dataquality_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureModeTransform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureModeTransform) ProtoMessage() {}

func (x *FailureModeTransform) ProtoReflect() protoreflect.Message {
	mi := &file_ps_common_dataquality_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureModeTransform.ProtoReflect.Descriptor instead.
func (*FailureModeTransform) Descriptor() ([]byte, []int) {
	return file_ps_common_dataquality_proto_rawDescGZIP(), []int{4}
}

func (x *FailureModeTransform) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FailureModeTransform) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type FailureModeAlertSlack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlackToken   string `protobuf:"bytes,1,opt,name=slack_token,json=slackToken,proto3" json:"slack_token,omitempty"` // TODO: should this be in here or configured somewhere else?
	SlackChannel string `protobuf:"bytes,2,opt,name=slack_channel,json=slackChannel,proto3" json:"slack_channel,omitempty"`
}

func (x *FailureModeAlertSlack) Reset() {
	*x = FailureModeAlertSlack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ps_common_dataquality_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailureModeAlertSlack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureModeAlertSlack) ProtoMessage() {}

func (x *FailureModeAlertSlack) ProtoReflect() protoreflect.Message {
	mi := &file_ps_common_dataquality_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureModeAlertSlack.ProtoReflect.Descriptor instead.
func (*FailureModeAlertSlack) Descriptor() ([]byte, []int) {
	return file_ps_common_dataquality_proto_rawDescGZIP(), []int{5}
}

func (x *FailureModeAlertSlack) GetSlackToken() string {
	if x != nil {
		return x.SlackToken
	}
	return ""
}

func (x *FailureModeAlertSlack) GetSlackChannel() string {
	if x != nil {
		return x.SlackChannel
	}
	return ""
}

var File_ps_common_dataquality_proto protoreflect.FileDescriptor

var file_ps_common_dataquality_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x07,
	0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xdb, 0x03, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a,
	0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x03,
	0x64, 0x6c, 0x71, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x4c, 0x51, 0x48, 0x00, 0x52, 0x03, 0x64, 0x6c, 0x71, 0x12,
	0x43, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x47, 0x0a, 0x0b, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x6c,
	0x61, 0x63, 0x6b, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x48,
	0x00, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x42, 0x15, 0x0a,
	0x13, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x13, 0x0a, 0x11, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x39, 0x0a, 0x0e, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x4c, 0x51, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x61, 0x6c, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x40, 0x0a, 0x14, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5d, 0x0a, 0x15, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2a, 0x63, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x52,
	0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f,
	0x52, 0x4d, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x03, 0x2a, 0x61, 0x0a, 0x08, 0x52, 0x75,
	0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52,
	0x55, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x55, 0x4c,
	0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x03, 0x2a, 0xab, 0x01,
	0x0a, 0x0f, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x52, 0x55, 0x4c, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x44, 0x4c, 0x51, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x55, 0x4c, 0x45, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x55, 0x4c, 0x45,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c,
	0x45, 0x52, 0x54, 0x5f, 0x53, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x04, 0x42, 0x3d, 0x5a, 0x3b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x63,
	0x6f, 0x72, 0x70, 0x2f, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_ps_common_dataquality_proto_rawDescOnce sync.Once
	file_ps_common_dataquality_proto_rawDescData = file_ps_common_dataquality_proto_rawDesc
)

func file_ps_common_dataquality_proto_rawDescGZIP() []byte {
	file_ps_common_dataquality_proto_rawDescOnce.Do(func() {
		file_ps_common_dataquality_proto_rawDescData = protoimpl.X.CompressGZIP(file_ps_common_dataquality_proto_rawDescData)
	})
	return file_ps_common_dataquality_proto_rawDescData
}

var file_ps_common_dataquality_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ps_common_dataquality_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_ps_common_dataquality_proto_goTypes = []interface{}{
	(RuleType)(0),                 // 0: protos.common.RuleType
	(RuleMode)(0),                 // 1: protos.common.RuleMode
	(RuleFailureMode)(0),          // 2: protos.common.RuleFailureMode
	(*RuleSet)(nil),               // 3: protos.common.RuleSet
	(*Rule)(nil),                  // 4: protos.common.Rule
	(*FailureModeReject)(nil),     // 5: protos.common.FailureModeReject
	(*FailureModeDLQ)(nil),        // 6: protos.common.FailureModeDLQ
	(*FailureModeTransform)(nil),  // 7: protos.common.FailureModeTransform
	(*FailureModeAlertSlack)(nil), // 8: protos.common.FailureModeAlertSlack
}
var file_ps_common_dataquality_proto_depIdxs = []int32{
	4, // 0: protos.common.RuleSet.rules:type_name -> protos.common.Rule
	0, // 1: protos.common.Rule.type:type_name -> protos.common.RuleType
	1, // 2: protos.common.Rule.mode:type_name -> protos.common.RuleMode
	2, // 3: protos.common.Rule.failure_mode:type_name -> protos.common.RuleFailureMode
	5, // 4: protos.common.Rule.reject:type_name -> protos.common.FailureModeReject
	6, // 5: protos.common.Rule.dlq:type_name -> protos.common.FailureModeDLQ
	7, // 6: protos.common.Rule.transform:type_name -> protos.common.FailureModeTransform
	8, // 7: protos.common.Rule.alert_slack:type_name -> protos.common.FailureModeAlertSlack
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_ps_common_dataquality_proto_init() }
func file_ps_common_dataquality_proto_init() {
	if File_ps_common_dataquality_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ps_common_dataquality_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ps_common_dataquality_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ps_common_dataquality_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureModeReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ps_common_dataquality_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureModeDLQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ps_common_dataquality_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureModeTransform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ps_common_dataquality_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailureModeAlertSlack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ps_common_dataquality_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Rule_Reject)(nil),
		(*Rule_Dlq)(nil),
		(*Rule_Transform)(nil),
		(*Rule_AlertSlack)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ps_common_dataquality_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ps_common_dataquality_proto_goTypes,
		DependencyIndexes: file_ps_common_dataquality_proto_depIdxs,
		EnumInfos:         file_ps_common_dataquality_proto_enumTypes,
		MessageInfos:      file_ps_common_dataquality_proto_msgTypes,
	}.Build()
	File_ps_common_dataquality_proto = out.File
	file_ps_common_dataquality_proto_rawDesc = nil
	file_ps_common_dataquality_proto_goTypes = nil
	file_ps_common_dataquality_proto_depIdxs = nil
}
