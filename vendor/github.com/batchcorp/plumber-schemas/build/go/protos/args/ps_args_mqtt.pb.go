// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: ps_args_mqtt.proto

package args

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MQTTQoSLevel int32

const (
	MQTTQoSLevel_MQTT_QOS_LEVEL_AT_MOST_ONCE  MQTTQoSLevel = 0
	MQTTQoSLevel_MQTT_QOS_LEVEL_AT_LEAST_ONCE MQTTQoSLevel = 1
	MQTTQoSLevel_MQTT_QOS_LEVEL_EXACTLY_ONCE  MQTTQoSLevel = 2
)

// Enum value maps for MQTTQoSLevel.
var (
	MQTTQoSLevel_name = map[int32]string{
		0: "MQTT_QOS_LEVEL_AT_MOST_ONCE",
		1: "MQTT_QOS_LEVEL_AT_LEAST_ONCE",
		2: "MQTT_QOS_LEVEL_EXACTLY_ONCE",
	}
	MQTTQoSLevel_value = map[string]int32{
		"MQTT_QOS_LEVEL_AT_MOST_ONCE":  0,
		"MQTT_QOS_LEVEL_AT_LEAST_ONCE": 1,
		"MQTT_QOS_LEVEL_EXACTLY_ONCE":  2,
	}
)

func (x MQTTQoSLevel) Enum() *MQTTQoSLevel {
	p := new(MQTTQoSLevel)
	*p = x
	return p
}

func (x MQTTQoSLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MQTTQoSLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_ps_args_mqtt_proto_enumTypes[0].Descriptor()
}

func (MQTTQoSLevel) Type() protoreflect.EnumType {
	return &file_ps_args_mqtt_proto_enumTypes[0]
}

func (x MQTTQoSLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MQTTQoSLevel.Descriptor instead.
func (MQTTQoSLevel) EnumDescriptor() ([]byte, []int) {
	return file_ps_args_mqtt_proto_rawDescGZIP(), []int{0}
}

type MQTTTLSOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='CA cert (only needed if addr is ssl://)',env=PLUMBER_RELAY_MQTT_TLS_CA_CERT"
	TlsCaCert string `protobuf:"bytes,1,opt,name=tls_ca_cert,json=tlsCaCert,proto3" json:"tls_ca_cert,omitempty" kong:"help='CA cert (only needed if addr is ssl://)',env=PLUMBER_RELAY_MQTT_TLS_CA_CERT"`
	// @gotags: kong:"help='Client cert file (only needed if addr is ssl://)',env=PLUMBER_RELAY_MQTT_TLS_CLIENT_CERT"
	TlsClientCert string `protobuf:"bytes,2,opt,name=tls_client_cert,json=tlsClientCert,proto3" json:"tls_client_cert,omitempty" kong:"help='Client cert file (only needed if addr is ssl://)',env=PLUMBER_RELAY_MQTT_TLS_CLIENT_CERT"`
	// @gotags: kong:"help='Client key file (only needed if addr is ssl://)',env=PLUMBER_RELAY_MQTT_TLS_CLIENT_KEY"
	TlsClientKey string `protobuf:"bytes,3,opt,name=tls_client_key,json=tlsClientKey,proto3" json:"tls_client_key,omitempty" kong:"help='Client key file (only needed if addr is ssl://)',env=PLUMBER_RELAY_MQTT_TLS_CLIENT_KEY"`
	// @gotags: kong:"help='Whether to verify server certificate',env=PLUMBER_RELAY_MQTT_SKIP_VERIFY_TLS"
	TlsSkipVerify bool `protobuf:"varint,4,opt,name=tls_skip_verify,json=tlsSkipVerify,proto3" json:"tls_skip_verify,omitempty" kong:"help='Whether to verify server certificate',env=PLUMBER_RELAY_MQTT_SKIP_VERIFY_TLS"`
}

func (x *MQTTTLSOptions) Reset() {
	*x = MQTTTLSOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ps_args_mqtt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MQTTTLSOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MQTTTLSOptions) ProtoMessage() {}

func (x *MQTTTLSOptions) ProtoReflect() protoreflect.Message {
	mi := &file_ps_args_mqtt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MQTTTLSOptions.ProtoReflect.Descriptor instead.
func (*MQTTTLSOptions) Descriptor() ([]byte, []int) {
	return file_ps_args_mqtt_proto_rawDescGZIP(), []int{0}
}

func (x *MQTTTLSOptions) GetTlsCaCert() string {
	if x != nil {
		return x.TlsCaCert
	}
	return ""
}

func (x *MQTTTLSOptions) GetTlsClientCert() string {
	if x != nil {
		return x.TlsClientCert
	}
	return ""
}

func (x *MQTTTLSOptions) GetTlsClientKey() string {
	if x != nil {
		return x.TlsClientKey
	}
	return ""
}

func (x *MQTTTLSOptions) GetTlsSkipVerify() bool {
	if x != nil {
		return x.TlsSkipVerify
	}
	return false
}

type MQTTConn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='MQTT address',default='tcp://localhost:1883',env='PLUMBER_RELAY_MQTT_ADDRESS',required"
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" kong:"help='MQTT address',default='tcp://localhost:1883',env='PLUMBER_RELAY_MQTT_ADDRESS',required"`
	// @gotags: kong:"help='How long to attempt to connect for',env='PLUMBER_RELAY_MQTT_CONNECT_TIMEOUT',default=5"
	ConnTimeoutSeconds uint32 `protobuf:"varint,3,opt,name=conn_timeout_seconds,json=connTimeoutSeconds,proto3" json:"conn_timeout_seconds,omitempty" kong:"help='How long to attempt to connect for',env='PLUMBER_RELAY_MQTT_CONNECT_TIMEOUT',default=5"`
	// @gotags: kong:"help='Client id presented to MQTT broker',env='PLUMBER_RELAY_MQTT_CLIENT_ID',default=plumber"
	ClientId string `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty" kong:"help='Client id presented to MQTT broker',env='PLUMBER_RELAY_MQTT_CLIENT_ID',default=plumber"`
	// @gotags: kong:"help='QoS level to use for pub/sub (options: at_most_once, at_least_once, exactly_once)',env=PLUMBER_RELAY_MQTT_QOS,type=pbenum,pbenum_strip_prefix=MQTT_QOS_LEVEL_,pbenum_lowercase,default=at_most_once"
	QosLevel MQTTQoSLevel `protobuf:"varint,5,opt,name=qos_level,json=qosLevel,proto3,enum=protos.args.MQTTQoSLevel" json:"qos_level,omitempty" kong:"help='QoS level to use for pub/sub (options: at_most_once, at_least_once, exactly_once)',env=PLUMBER_RELAY_MQTT_QOS,type=pbenum,pbenum_strip_prefix=MQTT_QOS_LEVEL_,pbenum_lowercase,default=at_most_once"`
	// @gotags: kong:"embed"
	TlsOptions *MQTTTLSOptions `protobuf:"bytes,6,opt,name=tls_options,json=tlsOptions,proto3" json:"tls_options,omitempty" kong:"embed"`
}

func (x *MQTTConn) Reset() {
	*x = MQTTConn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ps_args_mqtt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MQTTConn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MQTTConn) ProtoMessage() {}

func (x *MQTTConn) ProtoReflect() protoreflect.Message {
	mi := &file_ps_args_mqtt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MQTTConn.ProtoReflect.Descriptor instead.
func (*MQTTConn) Descriptor() ([]byte, []int) {
	return file_ps_args_mqtt_proto_rawDescGZIP(), []int{1}
}

func (x *MQTTConn) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *MQTTConn) GetConnTimeoutSeconds() uint32 {
	if x != nil {
		return x.ConnTimeoutSeconds
	}
	return 0
}

func (x *MQTTConn) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *MQTTConn) GetQosLevel() MQTTQoSLevel {
	if x != nil {
		return x.QosLevel
	}
	return MQTTQoSLevel_MQTT_QOS_LEVEL_AT_MOST_ONCE
}

func (x *MQTTConn) GetTlsOptions() *MQTTTLSOptions {
	if x != nil {
		return x.TlsOptions
	}
	return nil
}

type MQTTReadArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='Topic to read message(s) from',env='PLUMBER_RELAY_MQTT_TOPIC',required"
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty" kong:"help='Topic to read message(s) from',env='PLUMBER_RELAY_MQTT_TOPIC',required"`
	// @gotags: kong:"help='How long to attempt to read message(s)',default=0,env='PLUMBER_RELAY_MQTT_READ_TIMEOUT_SECONDS'"
	ReadTimeoutSeconds uint32 `protobuf:"varint,2,opt,name=read_timeout_seconds,json=readTimeoutSeconds,proto3" json:"read_timeout_seconds,omitempty" kong:"help='How long to attempt to read message(s)',default=0,env='PLUMBER_RELAY_MQTT_READ_TIMEOUT_SECONDS'"`
}

func (x *MQTTReadArgs) Reset() {
	*x = MQTTReadArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ps_args_mqtt_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MQTTReadArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MQTTReadArgs) ProtoMessage() {}

func (x *MQTTReadArgs) ProtoReflect() protoreflect.Message {
	mi := &file_ps_args_mqtt_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MQTTReadArgs.ProtoReflect.Descriptor instead.
func (*MQTTReadArgs) Descriptor() ([]byte, []int) {
	return file_ps_args_mqtt_proto_rawDescGZIP(), []int{2}
}

func (x *MQTTReadArgs) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *MQTTReadArgs) GetReadTimeoutSeconds() uint32 {
	if x != nil {
		return x.ReadTimeoutSeconds
	}
	return 0
}

type MQTTWriteArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='Topic to write message(s) to',required"
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty" kong:"help='Topic to write message(s) to',required"`
	// @gotags: kong:"help='How long to attempt to publish message(s)',default=5"
	WriteTimeoutSeconds uint32 `protobuf:"varint,2,opt,name=write_timeout_seconds,json=writeTimeoutSeconds,proto3" json:"write_timeout_seconds,omitempty" kong:"help='How long to attempt to publish message(s)',default=5"`
}

func (x *MQTTWriteArgs) Reset() {
	*x = MQTTWriteArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ps_args_mqtt_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MQTTWriteArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MQTTWriteArgs) ProtoMessage() {}

func (x *MQTTWriteArgs) ProtoReflect() protoreflect.Message {
	mi := &file_ps_args_mqtt_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MQTTWriteArgs.ProtoReflect.Descriptor instead.
func (*MQTTWriteArgs) Descriptor() ([]byte, []int) {
	return file_ps_args_mqtt_proto_rawDescGZIP(), []int{3}
}

func (x *MQTTWriteArgs) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *MQTTWriteArgs) GetWriteTimeoutSeconds() uint32 {
	if x != nil {
		return x.WriteTimeoutSeconds
	}
	return 0
}

var File_ps_args_mqtt_proto protoreflect.FileDescriptor

var file_ps_args_mqtt_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67,
	0x73, 0x22, 0xa6, 0x01, 0x0a, 0x0e, 0x4d, 0x51, 0x54, 0x54, 0x54, 0x4c, 0x53, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x61, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6c, 0x73, 0x43, 0x61,
	0x43, 0x65, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x6c, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6c, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6c, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x6c, 0x73,
	0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22, 0xe9, 0x01, 0x0a, 0x08, 0x4d,
	0x51, 0x54, 0x54, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x09, 0x71, 0x6f, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67,
	0x73, 0x2e, 0x4d, 0x51, 0x54, 0x54, 0x51, 0x6f, 0x53, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x08,
	0x71, 0x6f, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4d, 0x51, 0x54, 0x54,
	0x54, 0x4c, 0x53, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x74, 0x6c, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x56, 0x0a, 0x0c, 0x4d, 0x51, 0x54, 0x54, 0x52, 0x65,
	0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x30, 0x0a, 0x14,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x61, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x59,
	0x0a, 0x0d, 0x4d, 0x51, 0x54, 0x54, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2a, 0x72, 0x0a, 0x0c, 0x4d, 0x51, 0x54,
	0x54, 0x51, 0x6f, 0x53, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x51, 0x54,
	0x54, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x5f, 0x4d,
	0x4f, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x51,
	0x54, 0x54, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x5f,
	0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b,
	0x4d, 0x51, 0x54, 0x54, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45,
	0x58, 0x41, 0x43, 0x54, 0x4c, 0x59, 0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x42, 0x3b, 0x5a,
	0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x61, 0x72, 0x67, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_ps_args_mqtt_proto_rawDescOnce sync.Once
	file_ps_args_mqtt_proto_rawDescData = file_ps_args_mqtt_proto_rawDesc
)

func file_ps_args_mqtt_proto_rawDescGZIP() []byte {
	file_ps_args_mqtt_proto_rawDescOnce.Do(func() {
		file_ps_args_mqtt_proto_rawDescData = protoimpl.X.CompressGZIP(file_ps_args_mqtt_proto_rawDescData)
	})
	return file_ps_args_mqtt_proto_rawDescData
}

var file_ps_args_mqtt_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ps_args_mqtt_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ps_args_mqtt_proto_goTypes = []interface{}{
	(MQTTQoSLevel)(0),      // 0: protos.args.MQTTQoSLevel
	(*MQTTTLSOptions)(nil), // 1: protos.args.MQTTTLSOptions
	(*MQTTConn)(nil),       // 2: protos.args.MQTTConn
	(*MQTTReadArgs)(nil),   // 3: protos.args.MQTTReadArgs
	(*MQTTWriteArgs)(nil),  // 4: protos.args.MQTTWriteArgs
}
var file_ps_args_mqtt_proto_depIdxs = []int32{
	0, // 0: protos.args.MQTTConn.qos_level:type_name -> protos.args.MQTTQoSLevel
	1, // 1: protos.args.MQTTConn.tls_options:type_name -> protos.args.MQTTTLSOptions
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_ps_args_mqtt_proto_init() }
func file_ps_args_mqtt_proto_init() {
	if File_ps_args_mqtt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ps_args_mqtt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MQTTTLSOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ps_args_mqtt_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MQTTConn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ps_args_mqtt_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MQTTReadArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ps_args_mqtt_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MQTTWriteArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ps_args_mqtt_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ps_args_mqtt_proto_goTypes,
		DependencyIndexes: file_ps_args_mqtt_proto_depIdxs,
		EnumInfos:         file_ps_args_mqtt_proto_enumTypes,
		MessageInfos:      file_ps_args_mqtt_proto_msgTypes,
	}.Build()
	File_ps_args_mqtt_proto = out.File
	file_ps_args_mqtt_proto_rawDesc = nil
	file_ps_args_mqtt_proto_goTypes = nil
	file_ps_args_mqtt_proto_depIdxs = nil
}
