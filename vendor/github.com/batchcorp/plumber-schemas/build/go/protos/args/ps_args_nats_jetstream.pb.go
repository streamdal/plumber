// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: ps_args_nats_jetstream.proto

package args

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NatsJetstreamTLSOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='CA file (only needed if addr is tls://*)',env='PLUMBER_RELAY_NATS_JETSTREAM_TLS_CA_CERT'"
	TlsCaCert string `protobuf:"bytes,1,opt,name=tls_ca_cert,json=tlsCaCert,proto3" json:"tls_ca_cert,omitempty" kong:"help='CA file (only needed if addr is tls://*)',env='PLUMBER_RELAY_NATS_JETSTREAM_TLS_CA_CERT'"`
	// @gotags: kong:"help='Client cert file (only needed if addr is tls://*)',env='PLUMBER_RELAY_NATS_JETSTREAM_TLS_CLIENT_CERT'"
	TlsClientCert string `protobuf:"bytes,2,opt,name=tls_client_cert,json=tlsClientCert,proto3" json:"tls_client_cert,omitempty" kong:"help='Client cert file (only needed if addr is tls://*)',env='PLUMBER_RELAY_NATS_JETSTREAM_TLS_CLIENT_CERT'"`
	// @gotags: kong:"help='Client key file (only needed if addr is tls://*)',env='PLUMBER_RELAY_NATS_JETSTREAM_TLS_CLIENT_KEY'"
	TlsClientKey string `protobuf:"bytes,3,opt,name=tls_client_key,json=tlsClientKey,proto3" json:"tls_client_key,omitempty" kong:"help='Client key file (only needed if addr is tls://*)',env='PLUMBER_RELAY_NATS_JETSTREAM_TLS_CLIENT_KEY'"`
	// @gotags: kong:"help='Whether to verify server certificate',env='PLUMBER_RELAY_NATS_JETSTREAM_SKIP_VERIFY_TLS'"
	TlsSkipVerify bool `protobuf:"varint,4,opt,name=tls_skip_verify,json=tlsSkipVerify,proto3" json:"tls_skip_verify,omitempty" kong:"help='Whether to verify server certificate',env='PLUMBER_RELAY_NATS_JETSTREAM_SKIP_VERIFY_TLS'"`
	// @gotags: kong:"help='Enable TLS',env='PLUMBER_RELAY_NATS_JETSTREAM_USE_TLS'"
	UseTls bool `protobuf:"varint,5,opt,name=use_tls,json=useTls,proto3" json:"use_tls,omitempty" kong:"help='Enable TLS',env='PLUMBER_RELAY_NATS_JETSTREAM_USE_TLS'"`
}

func (x *NatsJetstreamTLSOptions) Reset() {
	*x = NatsJetstreamTLSOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ps_args_nats_jetstream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NatsJetstreamTLSOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NatsJetstreamTLSOptions) ProtoMessage() {}

func (x *NatsJetstreamTLSOptions) ProtoReflect() protoreflect.Message {
	mi := &file_ps_args_nats_jetstream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NatsJetstreamTLSOptions.ProtoReflect.Descriptor instead.
func (*NatsJetstreamTLSOptions) Descriptor() ([]byte, []int) {
	return file_ps_args_nats_jetstream_proto_rawDescGZIP(), []int{0}
}

func (x *NatsJetstreamTLSOptions) GetTlsCaCert() string {
	if x != nil {
		return x.TlsCaCert
	}
	return ""
}

func (x *NatsJetstreamTLSOptions) GetTlsClientCert() string {
	if x != nil {
		return x.TlsClientCert
	}
	return ""
}

func (x *NatsJetstreamTLSOptions) GetTlsClientKey() string {
	if x != nil {
		return x.TlsClientKey
	}
	return ""
}

func (x *NatsJetstreamTLSOptions) GetTlsSkipVerify() bool {
	if x != nil {
		return x.TlsSkipVerify
	}
	return false
}

func (x *NatsJetstreamTLSOptions) GetUseTls() bool {
	if x != nil {
		return x.UseTls
	}
	return false
}

type NatsJetstreamConn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='Dial string for NATS server. Ex: nats://localhost:4222',default='nats://localhost:4222',env='PLUMBER_RELAY_NATS_JETSTREAM_DSN'"
	Dsn string `protobuf:"bytes,1,opt,name=dsn,proto3" json:"dsn,omitempty" kong:"help='Dial string for NATS server. Ex: nats://localhost:4222',default='nats://localhost:4222',env='PLUMBER_RELAY_NATS_JETSTREAM_DSN'"`
	// @gotags: kong:"help='NATS .creds file containing authentication credentials',env='PLUMBER_RELAY_NATS_JETSTREAM_CREDENTIALS'"
	UserCredentials string `protobuf:"bytes,2,opt,name=user_credentials,json=userCredentials,proto3" json:"user_credentials,omitempty" kong:"help='NATS .creds file containing authentication credentials',env='PLUMBER_RELAY_NATS_JETSTREAM_CREDENTIALS'"`
	// @gotags: kong:"help='User specified client ID to connect with',default=plumber,env='PLUMBER_RELAY_NATS_JETSTREAM_CLIENT_ID'"
	ClientId string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty" kong:"help='User specified client ID to connect with',default=plumber,env='PLUMBER_RELAY_NATS_JETSTREAM_CLIENT_ID'"`
	// @gotags: kong:"embed"
	TlsOptions *NatsJetstreamTLSOptions `protobuf:"bytes,4,opt,name=tls_options,json=tlsOptions,proto3" json:"tls_options,omitempty" kong:"embed"`
	// @gotags: kong:"help='File containing NATS NKey',env='PLUMBER_RELAY_NATS_JETSTREAM_NKEY'"
	Nkey string `protobuf:"bytes,5,opt,name=nkey,proto3" json:"nkey,omitempty" kong:"help='File containing NATS NKey',env='PLUMBER_RELAY_NATS_JETSTREAM_NKEY'"`
}

func (x *NatsJetstreamConn) Reset() {
	*x = NatsJetstreamConn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ps_args_nats_jetstream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NatsJetstreamConn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NatsJetstreamConn) ProtoMessage() {}

func (x *NatsJetstreamConn) ProtoReflect() protoreflect.Message {
	mi := &file_ps_args_nats_jetstream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NatsJetstreamConn.ProtoReflect.Descriptor instead.
func (*NatsJetstreamConn) Descriptor() ([]byte, []int) {
	return file_ps_args_nats_jetstream_proto_rawDescGZIP(), []int{1}
}

func (x *NatsJetstreamConn) GetDsn() string {
	if x != nil {
		return x.Dsn
	}
	return ""
}

func (x *NatsJetstreamConn) GetUserCredentials() string {
	if x != nil {
		return x.UserCredentials
	}
	return ""
}

func (x *NatsJetstreamConn) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *NatsJetstreamConn) GetTlsOptions() *NatsJetstreamTLSOptions {
	if x != nil {
		return x.TlsOptions
	}
	return nil
}

func (x *NatsJetstreamConn) GetNkey() string {
	if x != nil {
		return x.Nkey
	}
	return ""
}

type NatsJetstreamReadArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='NATS JetStream stream name. Ex: orders.>',env='PLUMBER_RELAY_NATS_JETSTREAM_STREAM'"
	Stream string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty" kong:"help='NATS JetStream stream name. Ex: orders.>',env='PLUMBER_RELAY_NATS_JETSTREAM_STREAM'"`
	// @gotags: kong:"help='Consumer name (default: random consumer name; has no effect if create_durable_consumer or existing_durable_consumer is not set)',env='PLUMBER_RELAY_NATS_JETSTREAM_CONSUMER_NAME'"
	ConsumerName string `protobuf:"bytes,2,opt,name=consumer_name,json=consumerName,proto3" json:"consumer_name,omitempty" kong:"help='Consumer name (default: random consumer name; has no effect if create_durable_consumer or existing_durable_consumer is not set)',env='PLUMBER_RELAY_NATS_JETSTREAM_CONSUMER_NAME'"`
	// @gotags: kong:"help='Create a new durable consumer (default: use ephemeral consumer)',env='PLUMBER_RELAY_NATS_JETSTREAM_CREATE_DURABLE_CONSUMER'"
	CreateDurableConsumer bool `protobuf:"varint,3,opt,name=create_durable_consumer,json=createDurableConsumer,proto3" json:"create_durable_consumer,omitempty" kong:"help='Create a new durable consumer (default: use ephemeral consumer)',env='PLUMBER_RELAY_NATS_JETSTREAM_CREATE_DURABLE_CONSUMER'"`
	// @gotags: kong:"help='Use an existing durable consumer (default: use ephemeral consumer)',env='PLUMBER_RELAY_NATS_JETSTREAM_EXISTING_DURABLE_CONSUMER'"
	ExistingDurableConsumer bool `protobuf:"varint,4,opt,name=existing_durable_consumer,json=existingDurableConsumer,proto3" json:"existing_durable_consumer,omitempty" kong:"help='Use an existing durable consumer (default: use ephemeral consumer)',env='PLUMBER_RELAY_NATS_JETSTREAM_EXISTING_DURABLE_CONSUMER'"`
	// @gotags: kong:"help='Do not delete consumer after operation is done (default: delete on exit)',env='PLUMBER_RELAY_NATS_JETSTREAM_KEEP_CONSUMER'"
	KeepConsumer bool `protobuf:"varint,5,opt,name=keep_consumer,json=keepConsumer,proto3" json:"keep_consumer,omitempty" kong:"help='Do not delete consumer after operation is done (default: delete on exit)',env='PLUMBER_RELAY_NATS_JETSTREAM_KEEP_CONSUMER'"`
	// @gotags: kong:"help='Where to start read in stream (default: from start)',env='PLUMBER_RELAY_NATS_JETSTREAM_CONSUMER_START_SEQUENCE'"
	ConsumerStartSequence int64 `protobuf:"varint,6,opt,name=consumer_start_sequence,json=consumerStartSequence,proto3" json:"consumer_start_sequence,omitempty" kong:"help='Where to start read in stream (default: from start)',env='PLUMBER_RELAY_NATS_JETSTREAM_CONSUMER_START_SEQUENCE'"`
	// @gotags: kong:"help='At what time to start stream (RFC3339 format, Ex: 2016-06-20T12:41:45.14Z)',env='PLUMBER_RELAY_NATS_JETSTREAM_CONSUMER_START_TIME'"
	ConsumerStartTime string `protobuf:"bytes,7,opt,name=consumer_start_time,json=consumerStartTime,proto3" json:"consumer_start_time,omitempty" kong:"help='At what time to start stream (RFC3339 format, Ex: 2016-06-20T12:41:45.14Z)',env='PLUMBER_RELAY_NATS_JETSTREAM_CONSUMER_START_TIME'"`
	// @gotags: kong:"help='Only receive a subset of messages from the Stream based on the subject',env='PLUMBER_RELAY_NATS_JETSTREAM_CONSUMER_FILTER_SUBJECT'"
	ConsumerFilterSubject string `protobuf:"bytes,8,opt,name=consumer_filter_subject,json=consumerFilterSubject,proto3" json:"consumer_filter_subject,omitempty" kong:"help='Only receive a subset of messages from the Stream based on the subject',env='PLUMBER_RELAY_NATS_JETSTREAM_CONSUMER_FILTER_SUBJECT'"`
}

func (x *NatsJetstreamReadArgs) Reset() {
	*x = NatsJetstreamReadArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ps_args_nats_jetstream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NatsJetstreamReadArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NatsJetstreamReadArgs) ProtoMessage() {}

func (x *NatsJetstreamReadArgs) ProtoReflect() protoreflect.Message {
	mi := &file_ps_args_nats_jetstream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NatsJetstreamReadArgs.ProtoReflect.Descriptor instead.
func (*NatsJetstreamReadArgs) Descriptor() ([]byte, []int) {
	return file_ps_args_nats_jetstream_proto_rawDescGZIP(), []int{2}
}

func (x *NatsJetstreamReadArgs) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *NatsJetstreamReadArgs) GetConsumerName() string {
	if x != nil {
		return x.ConsumerName
	}
	return ""
}

func (x *NatsJetstreamReadArgs) GetCreateDurableConsumer() bool {
	if x != nil {
		return x.CreateDurableConsumer
	}
	return false
}

func (x *NatsJetstreamReadArgs) GetExistingDurableConsumer() bool {
	if x != nil {
		return x.ExistingDurableConsumer
	}
	return false
}

func (x *NatsJetstreamReadArgs) GetKeepConsumer() bool {
	if x != nil {
		return x.KeepConsumer
	}
	return false
}

func (x *NatsJetstreamReadArgs) GetConsumerStartSequence() int64 {
	if x != nil {
		return x.ConsumerStartSequence
	}
	return 0
}

func (x *NatsJetstreamReadArgs) GetConsumerStartTime() string {
	if x != nil {
		return x.ConsumerStartTime
	}
	return ""
}

func (x *NatsJetstreamReadArgs) GetConsumerFilterSubject() string {
	if x != nil {
		return x.ConsumerFilterSubject
	}
	return ""
}

type NatsJetstreamWriteArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='NATS JetStream subject name to write to. Ex: orders.>'"
	Subject string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty" kong:"help='NATS JetStream subject name to write to. Ex: orders.>'"`
}

func (x *NatsJetstreamWriteArgs) Reset() {
	*x = NatsJetstreamWriteArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ps_args_nats_jetstream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NatsJetstreamWriteArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NatsJetstreamWriteArgs) ProtoMessage() {}

func (x *NatsJetstreamWriteArgs) ProtoReflect() protoreflect.Message {
	mi := &file_ps_args_nats_jetstream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NatsJetstreamWriteArgs.ProtoReflect.Descriptor instead.
func (*NatsJetstreamWriteArgs) Descriptor() ([]byte, []int) {
	return file_ps_args_nats_jetstream_proto_rawDescGZIP(), []int{3}
}

func (x *NatsJetstreamWriteArgs) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

var File_ps_args_nats_jetstream_proto protoreflect.FileDescriptor

var file_ps_args_nats_jetstream_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x73, 0x5f, 0x6a,
	0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x17,
	0x4e, 0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x4c, 0x53,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x63,
	0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6c,
	0x73, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6c, 0x73, 0x5f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x6c, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6c, 0x73, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6c, 0x73, 0x5f, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x74, 0x6c, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x54, 0x6c, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x11, 0x4e, 0x61, 0x74, 0x73, 0x4a,
	0x65, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x73, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x72, 0x67, 0x73, 0x2e, 0x4e, 0x61, 0x74, 0x73, 0x4a, 0x65,
	0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x4c, 0x53, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0a, 0x74, 0x6c, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6b, 0x65,
	0x79, 0x22, 0x8d, 0x03, 0x0a, 0x15, 0x4e, 0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x41, 0x72, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x12, 0x3a, 0x0a, 0x19, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x6b, 0x65, 0x65, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x6b, 0x65, 0x65, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0x32, 0x0a, 0x16, 0x4e, 0x61, 0x74, 0x73, 0x4a, 0x65, 0x74, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x70, 0x6c,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x61, 0x72,
	0x67, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ps_args_nats_jetstream_proto_rawDescOnce sync.Once
	file_ps_args_nats_jetstream_proto_rawDescData = file_ps_args_nats_jetstream_proto_rawDesc
)

func file_ps_args_nats_jetstream_proto_rawDescGZIP() []byte {
	file_ps_args_nats_jetstream_proto_rawDescOnce.Do(func() {
		file_ps_args_nats_jetstream_proto_rawDescData = protoimpl.X.CompressGZIP(file_ps_args_nats_jetstream_proto_rawDescData)
	})
	return file_ps_args_nats_jetstream_proto_rawDescData
}

var file_ps_args_nats_jetstream_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ps_args_nats_jetstream_proto_goTypes = []interface{}{
	(*NatsJetstreamTLSOptions)(nil), // 0: protos.args.NatsJetstreamTLSOptions
	(*NatsJetstreamConn)(nil),       // 1: protos.args.NatsJetstreamConn
	(*NatsJetstreamReadArgs)(nil),   // 2: protos.args.NatsJetstreamReadArgs
	(*NatsJetstreamWriteArgs)(nil),  // 3: protos.args.NatsJetstreamWriteArgs
}
var file_ps_args_nats_jetstream_proto_depIdxs = []int32{
	0, // 0: protos.args.NatsJetstreamConn.tls_options:type_name -> protos.args.NatsJetstreamTLSOptions
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_ps_args_nats_jetstream_proto_init() }
func file_ps_args_nats_jetstream_proto_init() {
	if File_ps_args_nats_jetstream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ps_args_nats_jetstream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NatsJetstreamTLSOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ps_args_nats_jetstream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NatsJetstreamConn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ps_args_nats_jetstream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NatsJetstreamReadArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ps_args_nats_jetstream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NatsJetstreamWriteArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ps_args_nats_jetstream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ps_args_nats_jetstream_proto_goTypes,
		DependencyIndexes: file_ps_args_nats_jetstream_proto_depIdxs,
		MessageInfos:      file_ps_args_nats_jetstream_proto_msgTypes,
	}.Build()
	File_ps_args_nats_jetstream_proto = out.File
	file_ps_args_nats_jetstream_proto_rawDesc = nil
	file_ps_args_nats_jetstream_proto_goTypes = nil
	file_ps_args_nats_jetstream_proto_depIdxs = nil
}
