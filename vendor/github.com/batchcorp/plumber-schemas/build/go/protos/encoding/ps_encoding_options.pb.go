// The encoding proto schema is intended to be used for either encoding or
// decoding. The intent of whether to encode or decode should be specified
// somewhere outside of this proto.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: ps_encoding_options.proto

package encoding

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EncodeType int32

const (
	EncodeType_ENCODE_TYPE_UNSET      EncodeType = 0
	EncodeType_ENCODE_TYPE_JSONPB     EncodeType = 1
	EncodeType_ENCODE_TYPE_AVRO       EncodeType = 2
	EncodeType_ENCODE_TYPE_CLOUDEVENT EncodeType = 3
)

// Enum value maps for EncodeType.
var (
	EncodeType_name = map[int32]string{
		0: "ENCODE_TYPE_UNSET",
		1: "ENCODE_TYPE_JSONPB",
		2: "ENCODE_TYPE_AVRO",
		3: "ENCODE_TYPE_CLOUDEVENT",
	}
	EncodeType_value = map[string]int32{
		"ENCODE_TYPE_UNSET":      0,
		"ENCODE_TYPE_JSONPB":     1,
		"ENCODE_TYPE_AVRO":       2,
		"ENCODE_TYPE_CLOUDEVENT": 3,
	}
)

func (x EncodeType) Enum() *EncodeType {
	p := new(EncodeType)
	*p = x
	return p
}

func (x EncodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_ps_encoding_options_proto_enumTypes[0].Descriptor()
}

func (EncodeType) Type() protoreflect.EnumType {
	return &file_ps_encoding_options_proto_enumTypes[0]
}

func (x EncodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncodeType.Descriptor instead.
func (EncodeType) EnumDescriptor() ([]byte, []int) {
	return file_ps_encoding_options_proto_rawDescGZIP(), []int{0}
}

type DecodeType int32

const (
	DecodeType_DECODE_TYPE_UNSET      DecodeType = 0
	DecodeType_DECODE_TYPE_PROTOBUF   DecodeType = 1
	DecodeType_DECODE_TYPE_AVRO       DecodeType = 2
	DecodeType_DECODE_TYPE_THRIFT     DecodeType = 3
	DecodeType_DECODE_TYPE_FLATBUFFER DecodeType = 4
)

// Enum value maps for DecodeType.
var (
	DecodeType_name = map[int32]string{
		0: "DECODE_TYPE_UNSET",
		1: "DECODE_TYPE_PROTOBUF",
		2: "DECODE_TYPE_AVRO",
		3: "DECODE_TYPE_THRIFT",
		4: "DECODE_TYPE_FLATBUFFER",
	}
	DecodeType_value = map[string]int32{
		"DECODE_TYPE_UNSET":      0,
		"DECODE_TYPE_PROTOBUF":   1,
		"DECODE_TYPE_AVRO":       2,
		"DECODE_TYPE_THRIFT":     3,
		"DECODE_TYPE_FLATBUFFER": 4,
	}
)

func (x DecodeType) Enum() *DecodeType {
	p := new(DecodeType)
	*p = x
	return p
}

func (x DecodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DecodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_ps_encoding_options_proto_enumTypes[1].Descriptor()
}

func (DecodeType) Type() protoreflect.EnumType {
	return &file_ps_encoding_options_proto_enumTypes[1]
}

func (x DecodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DecodeType.Descriptor instead.
func (DecodeType) EnumDescriptor() ([]byte, []int) {
	return file_ps_encoding_options_proto_rawDescGZIP(), []int{1}
}

type EnvelopeType int32

const (
	EnvelopeType_ENVELOPE_TYPE_UNSET   EnvelopeType = 0
	EnvelopeType_ENVELOPE_TYPE_DEEP    EnvelopeType = 1
	EnvelopeType_ENVELOPE_TYPE_SHALLOW EnvelopeType = 2
)

// Enum value maps for EnvelopeType.
var (
	EnvelopeType_name = map[int32]string{
		0: "ENVELOPE_TYPE_UNSET",
		1: "ENVELOPE_TYPE_DEEP",
		2: "ENVELOPE_TYPE_SHALLOW",
	}
	EnvelopeType_value = map[string]int32{
		"ENVELOPE_TYPE_UNSET":   0,
		"ENVELOPE_TYPE_DEEP":    1,
		"ENVELOPE_TYPE_SHALLOW": 2,
	}
)

func (x EnvelopeType) Enum() *EnvelopeType {
	p := new(EnvelopeType)
	*p = x
	return p
}

func (x EnvelopeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnvelopeType) Descriptor() protoreflect.EnumDescriptor {
	return file_ps_encoding_options_proto_enumTypes[2].Descriptor()
}

func (EnvelopeType) Type() protoreflect.EnumType {
	return &file_ps_encoding_options_proto_enumTypes[2]
}

func (x EnvelopeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnvelopeType.Descriptor instead.
func (EnvelopeType) EnumDescriptor() ([]byte, []int) {
	return file_ps_encoding_options_proto_rawDescGZIP(), []int{2}
}

type ProtobufSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='Input message(s) should be encoded with this message envelope'"
	ProtobufRootMessage string `protobuf:"bytes,1,opt,name=protobuf_root_message,json=protobufRootMessage,proto3" json:"protobuf_root_message,omitempty" kong:"help='Input message(s) should be encoded with this message envelope'"`
	// Desktop/server should not use this.
	// @gotags: kong:"help='One or more directories which contains protobuf schemas',existingdir"
	ProtobufDirs []string `protobuf:"bytes,2,rep,name=protobuf_dirs,json=protobufDirs,proto3" json:"protobuf_dirs,omitempty" kong:"help='One or more directories which contains protobuf schemas',existingdir"`
	// Directory where protos are stored (used for github import)
	// @gotags: kong:"-"
	XProtobufRootDir string `protobuf:"bytes,3,opt,name=_protobuf_root_dir,json=ProtobufRootDir,proto3" json:"_protobuf_root_dir,omitempty" kong:"-"`
	// Used by server/desktop when creating a read without an existing schema
	// @gotags: kong:"-"
	Archive []byte `protobuf:"bytes,4,opt,name=archive,proto3" json:"archive,omitempty" kong:"-"`
	// Used internally by the server
	// @gotags: kong:"-"
	XMessageDescriptor []byte `protobuf:"bytes,5,opt,name=_message_descriptor,json=MessageDescriptor,proto3" json:"_message_descriptor,omitempty" kong:"-"`
	// @gotags: kong:"help='Envelope type (options: deep, shallow)',type=pbenum,pbenum_strip_prefix=ENVELOPE_TYPE_,pbenum_lowercase,default=deep"
	ProtobufEnvelopeType EnvelopeType `protobuf:"varint,6,opt,name=protobuf_envelope_type,json=protobufEnvelopeType,proto3,enum=protos.encoding.EnvelopeType" json:"protobuf_envelope_type,omitempty" kong:"help='Envelope type (options: deep, shallow)',type=pbenum,pbenum_strip_prefix=ENVELOPE_TYPE_,pbenum_lowercase,default=deep"`
	// @gotags: kong:"help='For shallow envelope messages, the payload field should be encoded with this message name'"
	ShallowEnvelopeMessage string `protobuf:"bytes,7,opt,name=shallow_envelope_message,json=shallowEnvelopeMessage,proto3" json:"shallow_envelope_message,omitempty" kong:"help='For shallow envelope messages, the payload field should be encoded with this message name'"`
	// @gotags: kong:"help='For shallow envelope messages, the field number of the root message that contains the shallow envelope payload'"
	ShallowEnvelopeFieldNumber int32 `protobuf:"varint,8,opt,name=shallow_envelope_field_number,json=shallowEnvelopeFieldNumber,proto3" json:"shallow_envelope_field_number,omitempty" kong:"help='For shallow envelope messages, the field number of the root message that contains the shallow envelope payload'"`
	// Used internally by the server
	// @gotags: kong:"-"
	XShallowEnvelopeMessageDescriptor []byte `protobuf:"bytes,9,opt,name=_shallow_envelope_message_descriptor,json=ShallowEnvelopeMessageDescriptor,proto3" json:"_shallow_envelope_message_descriptor,omitempty" kong:"-"`
	// @gotags: kong:"help='Protobuf descriptor set(.protoset or .fds file)'"
	ProtobufDescriptorSet string `protobuf:"bytes,10,opt,name=protobuf_descriptor_set,json=protobufDescriptorSet,proto3" json:"protobuf_descriptor_set,omitempty" kong:"help='Protobuf descriptor set(.protoset or .fds file)'"`
}

func (x *ProtobufSettings) Reset() {
	*x = ProtobufSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ps_encoding_options_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtobufSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtobufSettings) ProtoMessage() {}

func (x *ProtobufSettings) ProtoReflect() protoreflect.Message {
	mi := &file_ps_encoding_options_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtobufSettings.ProtoReflect.Descriptor instead.
func (*ProtobufSettings) Descriptor() ([]byte, []int) {
	return file_ps_encoding_options_proto_rawDescGZIP(), []int{0}
}

func (x *ProtobufSettings) GetProtobufRootMessage() string {
	if x != nil {
		return x.ProtobufRootMessage
	}
	return ""
}

func (x *ProtobufSettings) GetProtobufDirs() []string {
	if x != nil {
		return x.ProtobufDirs
	}
	return nil
}

func (x *ProtobufSettings) GetXProtobufRootDir() string {
	if x != nil {
		return x.XProtobufRootDir
	}
	return ""
}

func (x *ProtobufSettings) GetArchive() []byte {
	if x != nil {
		return x.Archive
	}
	return nil
}

func (x *ProtobufSettings) GetXMessageDescriptor() []byte {
	if x != nil {
		return x.XMessageDescriptor
	}
	return nil
}

func (x *ProtobufSettings) GetProtobufEnvelopeType() EnvelopeType {
	if x != nil {
		return x.ProtobufEnvelopeType
	}
	return EnvelopeType_ENVELOPE_TYPE_UNSET
}

func (x *ProtobufSettings) GetShallowEnvelopeMessage() string {
	if x != nil {
		return x.ShallowEnvelopeMessage
	}
	return ""
}

func (x *ProtobufSettings) GetShallowEnvelopeFieldNumber() int32 {
	if x != nil {
		return x.ShallowEnvelopeFieldNumber
	}
	return 0
}

func (x *ProtobufSettings) GetXShallowEnvelopeMessageDescriptor() []byte {
	if x != nil {
		return x.XShallowEnvelopeMessageDescriptor
	}
	return nil
}

func (x *ProtobufSettings) GetProtobufDescriptorSet() string {
	if x != nil {
		return x.ProtobufDescriptorSet
	}
	return ""
}

type AvroSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Used by CLI; desktop should not set/use this.
	// @gotags: kong:"help='If encode-type is set to avro, must specify avro schema file',existingfile"
	AvroSchemaFile string `protobuf:"bytes,1,opt,name=avro_schema_file,json=avroSchemaFile,proto3" json:"avro_schema_file,omitempty" kong:"help='If encode-type is set to avro, must specify avro schema file',existingfile"`
	// Used by desktop; CLI should not set/use this.
	// @gotags: kong:"-"
	Schema []byte `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty" kong:"-"`
}

func (x *AvroSettings) Reset() {
	*x = AvroSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ps_encoding_options_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvroSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvroSettings) ProtoMessage() {}

func (x *AvroSettings) ProtoReflect() protoreflect.Message {
	mi := &file_ps_encoding_options_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvroSettings.ProtoReflect.Descriptor instead.
func (*AvroSettings) Descriptor() ([]byte, []int) {
	return file_ps_encoding_options_proto_rawDescGZIP(), []int{1}
}

func (x *AvroSettings) GetAvroSchemaFile() string {
	if x != nil {
		return x.AvroSchemaFile
	}
	return ""
}

func (x *AvroSettings) GetSchema() []byte {
	if x != nil {
		return x.Schema
	}
	return nil
}

type ThriftSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='One or more directories containing Thrift IDL files'"
	ThriftDirs []string `protobuf:"bytes,1,rep,name=thrift_dirs,json=thriftDirs,proto3" json:"thrift_dirs,omitempty" kong:"help='One or more directories containing Thrift IDL files'"`
	// @gotags: kong:"help='Namespace and struct name to decode the message with. Ex: com.mycompany.Account'"
	ThriftStruct string `protobuf:"bytes,2,opt,name=thrift_struct,json=thriftStruct,proto3" json:"thrift_struct,omitempty" kong:"help='Namespace and struct name to decode the message with. Ex: com.mycompany.Account'"`
}

func (x *ThriftSettings) Reset() {
	*x = ThriftSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ps_encoding_options_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThriftSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThriftSettings) ProtoMessage() {}

func (x *ThriftSettings) ProtoReflect() protoreflect.Message {
	mi := &file_ps_encoding_options_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThriftSettings.ProtoReflect.Descriptor instead.
func (*ThriftSettings) Descriptor() ([]byte, []int) {
	return file_ps_encoding_options_proto_rawDescGZIP(), []int{2}
}

func (x *ThriftSettings) GetThriftDirs() []string {
	if x != nil {
		return x.ThriftDirs
	}
	return nil
}

func (x *ThriftSettings) GetThriftStruct() string {
	if x != nil {
		return x.ThriftStruct
	}
	return ""
}

type JSONSchemaSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Used by desktop; CLI should not set/use this.
	// @gotags: kong:"-"
	Schema []byte `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty" kong:"-"`
}

func (x *JSONSchemaSettings) Reset() {
	*x = JSONSchemaSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ps_encoding_options_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JSONSchemaSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSONSchemaSettings) ProtoMessage() {}

func (x *JSONSchemaSettings) ProtoReflect() protoreflect.Message {
	mi := &file_ps_encoding_options_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSONSchemaSettings.ProtoReflect.Descriptor instead.
func (*JSONSchemaSettings) Descriptor() ([]byte, []int) {
	return file_ps_encoding_options_proto_rawDescGZIP(), []int{3}
}

func (x *JSONSchemaSettings) GetSchema() []byte {
	if x != nil {
		return x.Schema
	}
	return nil
}

type CloudEventSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: kong:"help='ID to give cloud event. If left blank, plumber will auto-generate a random UUIDv4'"
	CeId string `protobuf:"bytes,1,opt,name=ce_id,json=ceId,proto3" json:"ce_id,omitempty" kong:"help='ID to give cloud event. If left blank, plumber will auto-generate a random UUIDv4'"`
	// @gotags: kong:"help='Source for cloud event',default='plumber'"
	CeSource string `protobuf:"bytes,2,opt,name=ce_source,json=ceSource,proto3" json:"ce_source,omitempty" kong:"help='Source for cloud event',default='plumber'"`
	// @gotags: kong:"help='Cloud event type'"
	CeType string `protobuf:"bytes,3,opt,name=ce_type,json=ceType,proto3" json:"ce_type,omitempty" kong:"help='Cloud event type'"`
	// @gotags: kong:"help='Cloud event subject'"
	CeSubject string `protobuf:"bytes,4,opt,name=ce_subject,json=ceSubject,proto3" json:"ce_subject,omitempty" kong:"help='Cloud event subject'"`
	// @gotags: kong:"help='Cloud event specification version, ex: 0.1, 0.2, 0.3, 1.0',default='1.0'"
	CeSpecVersion string `protobuf:"bytes,5,opt,name=ce_spec_version,json=ceSpecVersion,proto3" json:"ce_spec_version,omitempty" kong:"help='Cloud event specification version, ex: 0.1, 0.2, 0.3, 1.0',default='1.0'"`
	// @gotags: kong:"help='Type of encoding of the event data',default='application/json; charset=utf-8'"
	CeDataContentType string `protobuf:"bytes,6,opt,name=ce_data_content_type,json=ceDataContentType,proto3" json:"ce_data_content_type,omitempty" kong:"help='Type of encoding of the event data',default='application/json; charset=utf-8'"`
	// @gotags: kong:"help='Path to JSON schema file for the cloud event'"
	CeDataSchema string `protobuf:"bytes,7,opt,name=ce_data_schema,json=ceDataSchema,proto3" json:"ce_data_schema,omitempty" kong:"help='Path to JSON schema file for the cloud event'"`
}

func (x *CloudEventSettings) Reset() {
	*x = CloudEventSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ps_encoding_options_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudEventSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudEventSettings) ProtoMessage() {}

func (x *CloudEventSettings) ProtoReflect() protoreflect.Message {
	mi := &file_ps_encoding_options_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudEventSettings.ProtoReflect.Descriptor instead.
func (*CloudEventSettings) Descriptor() ([]byte, []int) {
	return file_ps_encoding_options_proto_rawDescGZIP(), []int{4}
}

func (x *CloudEventSettings) GetCeId() string {
	if x != nil {
		return x.CeId
	}
	return ""
}

func (x *CloudEventSettings) GetCeSource() string {
	if x != nil {
		return x.CeSource
	}
	return ""
}

func (x *CloudEventSettings) GetCeType() string {
	if x != nil {
		return x.CeType
	}
	return ""
}

func (x *CloudEventSettings) GetCeSubject() string {
	if x != nil {
		return x.CeSubject
	}
	return ""
}

func (x *CloudEventSettings) GetCeSpecVersion() string {
	if x != nil {
		return x.CeSpecVersion
	}
	return ""
}

func (x *CloudEventSettings) GetCeDataContentType() string {
	if x != nil {
		return x.CeDataContentType
	}
	return ""
}

func (x *CloudEventSettings) GetCeDataSchema() string {
	if x != nil {
		return x.CeDataSchema
	}
	return ""
}

type EncodeOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use an existing schema for encoding (and ignore all other encode settings)
	// @gotags: kong:"-"
	SchemaId string `protobuf:"bytes,1,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty" kong:"-"`
	// @gotags: kong:"help='Encode type (options: unset, jsonpb, avro)',default=unset,type=pbenum,pbenum_strip_prefix=ENCODE_TYPE_,pbenum_lowercase"
	EncodeType EncodeType `protobuf:"varint,2,opt,name=encode_type,json=encodeType,proto3,enum=protos.encoding.EncodeType" json:"encode_type,omitempty" kong:"help='Encode type (options: unset, jsonpb, avro)',default=unset,type=pbenum,pbenum_strip_prefix=ENCODE_TYPE_,pbenum_lowercase"`
	// @gotags: kong:"embed,group=protobuf"
	ProtobufSettings *ProtobufSettings `protobuf:"bytes,3,opt,name=protobuf_settings,json=protobufSettings,proto3" json:"protobuf_settings,omitempty" kong:"embed,group=protobuf"`
	// @gotags: kong:"embed,group=avro"
	AvroSettings *AvroSettings `protobuf:"bytes,4,opt,name=avro_settings,json=avroSettings,proto3" json:"avro_settings,omitempty" kong:"embed,group=avro"`
	// @gotags: kong:"embed,group=cloudevent"
	CloudeventSettings *CloudEventSettings `protobuf:"bytes,5,opt,name=cloudevent_settings,json=cloudeventSettings,proto3" json:"cloudevent_settings,omitempty" kong:"embed,group=cloudevent"`
}

func (x *EncodeOptions) Reset() {
	*x = EncodeOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ps_encoding_options_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeOptions) ProtoMessage() {}

func (x *EncodeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_ps_encoding_options_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeOptions.ProtoReflect.Descriptor instead.
func (*EncodeOptions) Descriptor() ([]byte, []int) {
	return file_ps_encoding_options_proto_rawDescGZIP(), []int{5}
}

func (x *EncodeOptions) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *EncodeOptions) GetEncodeType() EncodeType {
	if x != nil {
		return x.EncodeType
	}
	return EncodeType_ENCODE_TYPE_UNSET
}

func (x *EncodeOptions) GetProtobufSettings() *ProtobufSettings {
	if x != nil {
		return x.ProtobufSettings
	}
	return nil
}

func (x *EncodeOptions) GetAvroSettings() *AvroSettings {
	if x != nil {
		return x.AvroSettings
	}
	return nil
}

func (x *EncodeOptions) GetCloudeventSettings() *CloudEventSettings {
	if x != nil {
		return x.CloudeventSettings
	}
	return nil
}

type DecodeOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use an existing schema for decoding (and ignore all other decode settings)
	// @gotags: kong:"-"
	SchemaId string `protobuf:"bytes,1,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty" kong:"-"`
	// @gotags: kong:"help='Decode type (options: unset, protobuf, avro, thrift, flatbuffer)',type=pbenum,pbenum_strip_prefix=DECODE_TYPE_,pbenum_lowercase,default=unset"
	DecodeType DecodeType `protobuf:"varint,2,opt,name=decode_type,json=decodeType,proto3,enum=protos.encoding.DecodeType" json:"decode_type,omitempty" kong:"help='Decode type (options: unset, protobuf, avro, thrift, flatbuffer)',type=pbenum,pbenum_strip_prefix=DECODE_TYPE_,pbenum_lowercase,default=unset"`
	// @gotags: kong:"embed,group=protobuf"
	ProtobufSettings *ProtobufSettings `protobuf:"bytes,3,opt,name=protobuf_settings,json=protobufSettings,proto3" json:"protobuf_settings,omitempty" kong:"embed,group=protobuf"`
	// @gotags: kong:"embed,group=avro"
	AvroSettings *AvroSettings `protobuf:"bytes,4,opt,name=avro_settings,json=avroSettings,proto3" json:"avro_settings,omitempty" kong:"embed,group=avro"`
	// @gotags: kong:"embed,group=thrift"
	ThriftSettings *ThriftSettings `protobuf:"bytes,5,opt,name=thrift_settings,json=thriftSettings,proto3" json:"thrift_settings,omitempty" kong:"embed,group=thrift"`
}

func (x *DecodeOptions) Reset() {
	*x = DecodeOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ps_encoding_options_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeOptions) ProtoMessage() {}

func (x *DecodeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_ps_encoding_options_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeOptions.ProtoReflect.Descriptor instead.
func (*DecodeOptions) Descriptor() ([]byte, []int) {
	return file_ps_encoding_options_proto_rawDescGZIP(), []int{6}
}

func (x *DecodeOptions) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *DecodeOptions) GetDecodeType() DecodeType {
	if x != nil {
		return x.DecodeType
	}
	return DecodeType_DECODE_TYPE_UNSET
}

func (x *DecodeOptions) GetProtobufSettings() *ProtobufSettings {
	if x != nil {
		return x.ProtobufSettings
	}
	return nil
}

func (x *DecodeOptions) GetAvroSettings() *AvroSettings {
	if x != nil {
		return x.AvroSettings
	}
	return nil
}

func (x *DecodeOptions) GetThriftSettings() *ThriftSettings {
	if x != nil {
		return x.ThriftSettings
	}
	return nil
}

var File_ps_encoding_options_proto protoreflect.FileDescriptor

var file_ps_encoding_options_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xbc, 0x04, 0x0a,
	0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x52, 0x6f, 0x6f, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x5f, 0x64, 0x69, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x44, 0x69, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x52, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x53, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x65, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x41, 0x0a, 0x1d, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x24, 0x5f, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x20, 0x53, 0x68, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x22, 0x50, 0x0a, 0x0c, 0x41,
	0x76, 0x72, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61,
	0x76, 0x72, 0x6f, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x76, 0x72, 0x6f, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x56, 0x0a,
	0x0e, 0x54, 0x68, 0x72, 0x69, 0x66, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x68, 0x72, 0x69, 0x66, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x69, 0x66, 0x74, 0x44, 0x69, 0x72, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68, 0x72, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x68, 0x72, 0x69, 0x66, 0x74, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x2c, 0x0a, 0x12, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x22, 0xfd, 0x01, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x65, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14,
	0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x22, 0xd4, 0x02, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x4e, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x42, 0x0a, 0x0d, 0x61, 0x76, 0x72, 0x6f, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x76, 0x72, 0x6f, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x61, 0x76, 0x72, 0x6f, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x54, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xc8, 0x02, 0x0a, 0x0d, 0x44,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x61, 0x76, 0x72, 0x6f, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x41, 0x76, 0x72, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x61,
	0x76, 0x72, 0x6f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x74,
	0x68, 0x72, 0x69, 0x66, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x68, 0x72, 0x69, 0x66, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x69, 0x66, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2a, 0x6d, 0x0a, 0x0a, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4e,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x50, 0x42,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x56, 0x52, 0x4f, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x10, 0x03, 0x2a, 0x87, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x42,
	0x55, 0x46, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x56, 0x52, 0x4f, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x49, 0x46, 0x54,
	0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x10, 0x04, 0x2a, 0x5a,
	0x0a, 0x0c, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x4e, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4e, 0x56, 0x45, 0x4c,
	0x4f, 0x50, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x45, 0x50, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x45, 0x4e, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x48, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x63, 0x6f,
	0x72, 0x70, 0x2f, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ps_encoding_options_proto_rawDescOnce sync.Once
	file_ps_encoding_options_proto_rawDescData = file_ps_encoding_options_proto_rawDesc
)

func file_ps_encoding_options_proto_rawDescGZIP() []byte {
	file_ps_encoding_options_proto_rawDescOnce.Do(func() {
		file_ps_encoding_options_proto_rawDescData = protoimpl.X.CompressGZIP(file_ps_encoding_options_proto_rawDescData)
	})
	return file_ps_encoding_options_proto_rawDescData
}

var file_ps_encoding_options_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ps_encoding_options_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_ps_encoding_options_proto_goTypes = []interface{}{
	(EncodeType)(0),            // 0: protos.encoding.EncodeType
	(DecodeType)(0),            // 1: protos.encoding.DecodeType
	(EnvelopeType)(0),          // 2: protos.encoding.EnvelopeType
	(*ProtobufSettings)(nil),   // 3: protos.encoding.ProtobufSettings
	(*AvroSettings)(nil),       // 4: protos.encoding.AvroSettings
	(*ThriftSettings)(nil),     // 5: protos.encoding.ThriftSettings
	(*JSONSchemaSettings)(nil), // 6: protos.encoding.JSONSchemaSettings
	(*CloudEventSettings)(nil), // 7: protos.encoding.CloudEventSettings
	(*EncodeOptions)(nil),      // 8: protos.encoding.EncodeOptions
	(*DecodeOptions)(nil),      // 9: protos.encoding.DecodeOptions
}
var file_ps_encoding_options_proto_depIdxs = []int32{
	2, // 0: protos.encoding.ProtobufSettings.protobuf_envelope_type:type_name -> protos.encoding.EnvelopeType
	0, // 1: protos.encoding.EncodeOptions.encode_type:type_name -> protos.encoding.EncodeType
	3, // 2: protos.encoding.EncodeOptions.protobuf_settings:type_name -> protos.encoding.ProtobufSettings
	4, // 3: protos.encoding.EncodeOptions.avro_settings:type_name -> protos.encoding.AvroSettings
	7, // 4: protos.encoding.EncodeOptions.cloudevent_settings:type_name -> protos.encoding.CloudEventSettings
	1, // 5: protos.encoding.DecodeOptions.decode_type:type_name -> protos.encoding.DecodeType
	3, // 6: protos.encoding.DecodeOptions.protobuf_settings:type_name -> protos.encoding.ProtobufSettings
	4, // 7: protos.encoding.DecodeOptions.avro_settings:type_name -> protos.encoding.AvroSettings
	5, // 8: protos.encoding.DecodeOptions.thrift_settings:type_name -> protos.encoding.ThriftSettings
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_ps_encoding_options_proto_init() }
func file_ps_encoding_options_proto_init() {
	if File_ps_encoding_options_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ps_encoding_options_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtobufSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ps_encoding_options_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvroSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ps_encoding_options_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThriftSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ps_encoding_options_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JSONSchemaSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ps_encoding_options_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudEventSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ps_encoding_options_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodeOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ps_encoding_options_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ps_encoding_options_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ps_encoding_options_proto_goTypes,
		DependencyIndexes: file_ps_encoding_options_proto_depIdxs,
		EnumInfos:         file_ps_encoding_options_proto_enumTypes,
		MessageInfos:      file_ps_encoding_options_proto_msgTypes,
	}.Build()
	File_ps_encoding_options_proto = out.File
	file_ps_encoding_options_proto_rawDesc = nil
	file_ps_encoding_options_proto_goTypes = nil
	file_ps_encoding_options_proto_depIdxs = nil
}
