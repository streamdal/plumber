syntax = "proto3";
package kubemq;

import "gogo.proto";

option (gogoproto.gostring_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

// For tests
option (gogoproto.testgen_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.populate_all) = true;
service kubemq {
    rpc SendEvent (Event) returns (Result) {}
    rpc SendEventsStream (stream Event) returns (stream Result) {}
    rpc SubscribeToEvents (Subscribe) returns (stream EventReceive) {}
    rpc SubscribeToRequests (Subscribe) returns (stream Request) {}
    rpc SendRequest (Request) returns (Response) {}
    rpc SendResponse(Response) returns (Empty) {}
    rpc SendQueueMessage(QueueMessage) returns (SendQueueMessageResult) {}
    rpc SendQueueMessagesBatch(QueueMessagesBatchRequest) returns (QueueMessagesBatchResponse) {}
    rpc ReceiveQueueMessages(ReceiveQueueMessagesRequest) returns (ReceiveQueueMessagesResponse) {}
    rpc StreamQueueMessage(stream StreamQueueMessagesRequest) returns (stream StreamQueueMessagesResponse) {}
    rpc AckAllQueueMessages(AckAllQueueMessagesRequest) returns (AckAllQueueMessagesResponse) {}
    rpc Ping (Empty) returns (PingResult) {}
    rpc QueuesDownstream(stream QueuesDownstreamRequest) returns (stream QueuesDownstreamResponse) {}
    rpc QueuesUpstream(stream QueuesUpstreamRequest) returns (stream QueuesUpstreamResponse) {}
    rpc QueuesInfo(QueuesInfoRequest) returns (QueuesInfoResponse) {}
}
message PingResult {
    string  Host        =1;
    string Version      =2;
    int64  ServerStartTime   =3;
    int64  ServerUpTimeSeconds =4;
}
message Empty {}

message Result {
    string  EventID     =1;
    bool    Sent        =2;
    string  Error       =3;
}

message Event {
    string  EventID             =1;
    string  ClientID            =2;
    string  Channel             =3;
    string  Metadata            =4;
    bytes   Body                =5;
    bool    Store               =6;
    map<string,string>  Tags    =7;
}

message EventReceive {
    string  EventID             =1;
    string  Channel             =2;
    string  Metadata            =3;
    bytes   Body                =4;
    int64   Timestamp           =5;
    uint64  Sequence            =6;
    map<string,string>  Tags    =7;
}

message Subscribe {
    enum SubscribeType {
        SubscribeTypeUndefined = 0;
        Events                  =1;
        EventsStore             =2;
        Commands                =3;
        Queries                 =4;

    }
    SubscribeType SubscribeTypeData         =1;
    string ClientID                         =2;
    string Channel                          =3;
    string Group                            =4;
    enum EventsStoreType {
        EventsStoreTypeUndefined    =0;
        StartNewOnly                =1;
        StartFromFirst              =2;
        StartFromLast               =3;
        StartAtSequence             =4;
        StartAtTime                 =5;
        StartAtTimeDelta            =6;
    }
    EventsStoreType EventsStoreTypeData     =5;
    int64 EventsStoreTypeValue              =6;
}

message Request {
    string  RequestID            =1;
    enum RequestType {
        RequestTypeUnknown      =0;
        Command                 =1;
        Query                   =2;
    }
    RequestType RequestTypeData =2;
    string  ClientID            =3;
    string  Channel             =4;
    string  Metadata            =5;
    bytes   Body                =6;
    string  ReplyChannel        =7;
    int32   Timeout             =8;
    string  CacheKey            =9;
    int32   CacheTTL            =10;
    bytes   Span                =11;
    map<string,string>  Tags             =12;
}
message Response {
    string  ClientID        =1;
    string  RequestID       =2;
    string  ReplyChannel    =3;
    string  Metadata        =4;
    bytes   Body            =5;
    bool    CacheHit        =6;
    int64   Timestamp       =7;
    bool    Executed        =8;
    string  Error           =9;
    bytes   Span            =10;
    map<string,string>  Tags  =11;
}

message QueueMessage {
    string  MessageID                   =1;
    string  ClientID                    =2;
    string  Channel                     =3;
    string  Metadata                    =4;
    bytes   Body                        =5;
    map<string,string>  Tags            =6;
    QueueMessageAttributes Attributes   =7;
    QueueMessagePolicy Policy           =8;
    string Topic                        =9;
    int32  Partition                    =10;
    string PartitionKey                 =11;
}
message QueueMessagesBatchRequest {
    string      BatchID                 =1;
    repeated    QueueMessage Messages   =2;
}
message QueueMessagesBatchResponse {
    string      BatchID                         =1;
    repeated    SendQueueMessageResult Results  =2;
    bool        HaveErrors                      =3;
}

message QueueMessageAttributes {
    int64               Timestamp                   =1;
    uint64              Sequence                    =2;
    string              MD5OfBody                   =3;
    int32               ReceiveCount                =4;
    bool                ReRouted                    =5;
    string              ReRoutedFromQueue           =6;
    int64               ExpirationAt                =7;
    int64               DelayedTo                   =8;
}

message QueueMessagePolicy {
    int32               ExpirationSeconds           =1;
    int32               DelaySeconds                =2;
    int32               MaxReceiveCount             =3;
    string              MaxReceiveQueue             =4;

}
message SendQueueMessageResult {
    string  MessageID       =1;
    int64   SentAt          =2;
    int64   ExpirationAt    =3;
    int64   DelayedTo       =4;
    bool    IsError         =5;
    string  Error           =6;
    string  RefChannel      =7;
    string  RefTopic         =8;
    int32   RefPartition     =9;
    string  RefHash         =10;
}

message ReceiveQueueMessagesRequest {
    string RequestID                =1;
    string  ClientID                =2;
    string  Channel               =3;
    int32   MaxNumberOfMessages     =4;
    int32   WaitTimeSeconds         =5;
    bool    IsPeak                     =6;
}
message ReceiveQueueMessagesResponse {
    string   RequestID                  =1;
    repeated QueueMessage   Messages    =2;
    int32    MessagesReceived            =3;
    int32    MessagesExpired             =4;
    bool     IsPeak                         =5;
    bool     IsError                     =6;
    string   Error                       =7;
}


message AckAllQueueMessagesRequest {
    string RequestID                 =1;
    string  ClientID                 =2;
    string Channel                   =3;
    int32 WaitTimeSeconds         =4;
}
message AckAllQueueMessagesResponse {
    string RequestID                =1;
    uint64 AffectedMessages         =2;
    bool    IsError                 =3;
    string  Error                   =4;
}


enum StreamRequestType {
    StreamRequestTypeUnknown      =0;
    ReceiveMessage         =1;
    AckMessage             =2;
    RejectMessage          =3;
    ModifyVisibility       =4;
    ResendMessage          =5;
    SendModifiedMessage    =6;
}
message StreamQueueMessagesRequest {
    string RequestID                =1;
    string ClientID                 =2;
    StreamRequestType StreamRequestTypeData   =3;
    string Channel                  =4;
    int32 VisibilitySeconds         =5;
    int32 WaitTimeSeconds               =6;
    uint64 RefSequence              =7;
    QueueMessage ModifiedMessage    =8;
}


message StreamQueueMessagesResponse {
    string RequestID                =1;
    StreamRequestType StreamRequestTypeData   =2;
    QueueMessage Message            =3;
    bool IsError                    =4;
    string Error                    =5;
}


message QueuesUpstreamRequest {
    string      RequestID                 =1;
    repeated    QueueMessage Messages   =2;
}
message QueuesUpstreamResponse {
    string      RefRequestID                    =1;
    repeated    SendQueueMessageResult Results  =2;
    bool        IsError                    =3;
    string      Error                    =4;
}


enum QueuesDownstreamRequestType {
    PollRequestTypeUnknown      =0;
    Get                         =1;
    AckAll                      =2;
    AckRange                    =3;
    NAckAll                     =4;
    NAckRange                   =5;
    ReQueueAll                  =6;
    ReQueueRange                =7;
    ActiveOffsets               =8;
    TransactionStatus           =9;
    CloseByClient               =10;
    CloseByServer               =11;
}

message QueuesDownstreamRequest {
    string RequestID                =1;
    string ClientID                 =2;
    QueuesDownstreamRequestType RequestTypeData =3;
    string Channel                  =4;
    int32 MaxItems                  =5;
    int32 WaitTimeout               =6;
    bool AutoAck                    =7;
    string ReQueueChannel           =8;
    repeated int64 SequenceRange    =9;
    string RefTransactionId         =10;
    map<string,string>  Metadata     =12;
}

message QueuesDownstreamResponse {
    string TransactionId            =1;
    string RefRequestId             =2;
    QueuesDownstreamRequestType RequestTypeData   =3;
    repeated QueueMessage Messages = 4;
    repeated int64 ActiveOffsets   = 5;
    bool IsError                    =6;
    string Error                    =7;
    bool TransactionComplete        =8;
    map<string,string>  Metadata     =9;
}

message QueueInfo {
    string Name         =1;
    int64 Messages      =2;
    int64 Bytes         =3;
    int64 FirstSequence =4;
    int64 LastSequence  =5;
    int64 Sent          =6;
    int64 Delivered     =7;
    int64 Waiting       =8;
    int64 Subscribers   =9;
}
message QueuesInfo {
    int32 TotalQueue     =1;
    int64 Sent          =2;
    int64 Delivered     =3;
    int64 Waiting       =4;
    repeated QueueInfo Queues =5;
}
message QueuesInfoRequest {
    string RequestID  =1;
    string QueueName  =2;
}

message QueuesInfoResponse {
    string RefRequestID  =1;
    QueuesInfo Info   =2;

}

enum TopicsUpstreamRequestType {
    TopicsUpstreamRequestUnknown    =0;
    FireAndForget                   =1;
    SendAsync                       =2;
    SendSync                        =3;
}
message TopicsUpstreamRequest {
    string      RequestID                     =1;
    TopicsUpstreamRequestType RequestTypeData =2;
    string      ClientID                      =3;
    repeated    QueueMessage Messages         =4;
}
message TopicsUpstreamResponse {
    string      RefRequestID                    =1;
    TopicsUpstreamRequestType RequestTypeData   =2;
    map<string,SendTopicResults>  TopicResults  =3;
    bool        IsError                         =4;
    string      Error                           =5;
}

message SendPartitionResults {
    repeated SendQueueMessageResult PartitionResults =1;
}

message SendTopicResults {
    map<int32,SendPartitionResults> TopicResults =1;
}

message TopicRecordHeader {
    string Key =1;
    bytes Value=2;
}

message TopicRecord {
    repeated TopicRecordHeader Headers =1;
    string   Topic                     =2;
    uint32   Partition                 =3;
    uint64   Timestamp                 =4;
    bytes    Key                       =5;
    bytes    Value                     =6;
}

message TopicPartition {
    string Topic        =1;
    uint32 Partition    =2;
}
enum TopicsSubscriptionStrategyType {
    SubscriptionStrategyTypeUndefined =0;
    Range                  =1;
    RoundRobin             =2;
    Sticky                 =3;
}
enum TopicsSubscriptionOffsetType {
    SubscriptionOffsetTypeUndefined    =0;
    StartNewOnly                       =1;
    StartFromFirst                     =2;
    StartFromLast                      =3;
    StartAtSequence                    =4;
    StartAtTime                        =5;
    StartAtTimeDelta                   =6;
}
enum TopicsSubscriptionRequestType {
    SubscriptionRequestTypeUndefined                           =0;
    SubscriptionRequestTypeJoin                                =1;
    SubscriptionRequestTypeLeave                               =2;
}
message TopicsSubscriptionRequest {
    TopicsSubscriptionRequestType   SubscriptionRequestType         =1;
    repeated string                 Topics                          =2;
    repeated TopicPartition         TopicPartitions                 =3;
    string                          GroupID                         =4;
    string                          MemberID                        =5;
    bool                            IsStatic                        =6;
    TopicsSubscriptionStrategyType  SubscriptionStrategyType        =7;
    TopicsSubscriptionOffsetType    SubscriptionOffsetType          =8;
}

enum  TopicsSubscriptionEventType {
    SubscriptionEventTypeUndefined                  =0;
    SubscriptionEventTypeSubscribe                  =1;
    SubscriptionEventTypeReSync                     =2;
    SubscriptionEventTypeReSyncComplete             =3;
    SubscriptionEventTypeHeartbeat                  =4;
    SubscriptionEventTypeLeave                      =5;
    SubscriptionEventTypeGroupState                      =6;

}
message TopicsSubscriptionEvent {
    string SubscriptionID                               =1;
    TopicsSubscriptionEventType  SubscriptionEventType  =2;
    string GroupID =3;
    string MemberID =4;

    repeated TopicPartition Assigned                    =5;
    int64   ReSyncAt                                    =6;
    bool    IsError =15;
    string  Error = 16;
}

message TopicsDownstreamRequest {
    string RequestID                                  =1;
    TopicsDownstreamRequestType DownstreamRequestType =2;
    bytes Data                                        =3;
}
enum TopicsDownstreamRequestType {
    DownstreamRequestTypeUndefined                      = 0;
    DownstreamRequestTypeSubscriptionRequest             =1;
    DownstreamRequestTypeSubscriptionEvent               =2;
}
message TopicsDownstreamResponse {
    string TransactionID            =1;
    string RefRequestID             =2;
    bytes Data                      =3;

    bool    IsError =15;
    string  Error = 16;
}
